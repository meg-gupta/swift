  *** SIL module after #0, stage SILGen Passes, pass 0: SILGenCleanup (silgen-cleanup)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden [ossa] @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
// %0 "input"                                     // users: %12, %4, %1
bb0(%0 : @guaranteed $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = metatype $@thick DataWrapper.Type          // user: %6
  // function_ref Array.count.getter
  %3 = function_ref @$sSa5countSivg : $@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int // user: %4
  %4 = apply %3<UInt8>(%0) : $@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int // user: %6
  // function_ref DataWrapper.__allocating_init(count:)
  %5 = function_ref @$s4main11DataWrapperC5countACSi_tcfC : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper // user: %6
  %6 = apply %5(%4, %2) : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper // user: %7
  %7 = move_value [lexical] [var_decl] %6 : $DataWrapper // users: %9, %10, %17, %8
  debug_value %7 : $DataWrapper, let, name "data" // id: %8
  %9 = class_method %7 : $DataWrapper, #DataWrapper.bytes!getter : (DataWrapper) -> () -> UnsafeMutableRawBufferPointer, $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %10
  %10 = apply %9(%7) : $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %14
  %11 = alloc_stack $Array<UInt8>                 // users: %16, %12
  %12 = store_borrow %0 to %11 : $*Array<UInt8>   // users: %15, %14
  // function_ref UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %13 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlF : $@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (@in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer) -> () // user: %14
  %14 = apply %13<[UInt8]>(%12, %10) : $@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (@in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer) -> ()
  end_borrow %12 : $*Array<UInt8>                 // id: %15
  dealloc_stack %11 : $*Array<UInt8>              // id: %16
  destroy_value %7 : $DataWrapper                 // id: %17
  %18 = tuple ()                                  // user: %19
  return %18 : $()                                // id: %19
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL module after #94, stage Mandatory Diagnostic Passes + Enabling Optimization Passes, pass 4: CapturePromotion (capture-promotion)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden [ossa] @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
// %0 "input"                                     // users: %12, %4, %1
bb0(%0 : @guaranteed $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = metatype $@thick DataWrapper.Type          // user: %6
  // function_ref Array.count.getter
  %3 = function_ref @$sSa5countSivg : $@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int // user: %4
  %4 = apply %3<UInt8>(%0) : $@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int // user: %6
  // function_ref DataWrapper.__allocating_init(count:)
  %5 = function_ref @$s4main11DataWrapperC5countACSi_tcfC : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper // user: %6
  %6 = apply %5(%4, %2) : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper // user: %7
  %7 = move_value [lexical] [var_decl] %6 : $DataWrapper // users: %9, %10, %17, %8
  debug_value %7 : $DataWrapper, let, name "data" // id: %8
  %9 = class_method %7 : $DataWrapper, #DataWrapper.bytes!getter : (DataWrapper) -> () -> UnsafeMutableRawBufferPointer, $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %10
  %10 = apply %9(%7) : $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %14
  %11 = alloc_stack $Array<UInt8>                 // users: %16, %12
  %12 = store_borrow %0 to %11 : $*Array<UInt8>   // users: %15, %14
  // function_ref UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %13 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlF : $@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (@in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer) -> () // user: %14
  %14 = apply %13<[UInt8]>(%12, %10) : $@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (@in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer) -> ()
  end_borrow %12 : $*Array<UInt8>                 // id: %15
  dealloc_stack %11 : $*Array<UInt8>              // id: %16
  destroy_value %7 : $DataWrapper                 // id: %17
  %18 = tuple ()                                  // user: %19
  return %18 : $()                                // id: %19
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL module after #95, stage Mandatory Diagnostic Passes + Enabling Optimization Passes, pass 5: AccessEnforcementSelection (access-enforcement-selection)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden [ossa] @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
// %0 "input"                                     // users: %12, %4, %1
bb0(%0 : @guaranteed $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = metatype $@thick DataWrapper.Type          // user: %6
  // function_ref Array.count.getter
  %3 = function_ref @$sSa5countSivg : $@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int // user: %4
  %4 = apply %3<UInt8>(%0) : $@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int // user: %6
  // function_ref DataWrapper.__allocating_init(count:)
  %5 = function_ref @$s4main11DataWrapperC5countACSi_tcfC : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper // user: %6
  %6 = apply %5(%4, %2) : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper // user: %7
  %7 = move_value [lexical] [var_decl] %6 : $DataWrapper // users: %9, %10, %17, %8
  debug_value %7 : $DataWrapper, let, name "data" // id: %8
  %9 = class_method %7 : $DataWrapper, #DataWrapper.bytes!getter : (DataWrapper) -> () -> UnsafeMutableRawBufferPointer, $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %10
  %10 = apply %9(%7) : $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %14
  %11 = alloc_stack $Array<UInt8>                 // users: %16, %12
  %12 = store_borrow %0 to %11 : $*Array<UInt8>   // users: %15, %14
  // function_ref UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %13 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlF : $@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (@in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer) -> () // user: %14
  %14 = apply %13<[UInt8]>(%12, %10) : $@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (@in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer) -> ()
  end_borrow %12 : $*Array<UInt8>                 // id: %15
  dealloc_stack %11 : $*Array<UInt8>              // id: %16
  destroy_value %7 : $DataWrapper                 // id: %17
  %18 = tuple ()                                  // user: %19
  return %18 : $()                                // id: %19
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #396, stage Mandatory Diagnostic Passes + Enabling Optimization Passes, pass 18: TrivialMoveOnlyTypeEliminator (sil-trivial-move-only-type-eliminator)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden [ossa] @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
// %0 "input"                                     // users: %12, %4, %1
bb0(%0 : @guaranteed $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = metatype $@thick DataWrapper.Type          // user: %6
  // function_ref Array.count.getter
  %3 = function_ref @$sSa5countSivg : $@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int // user: %4
  %4 = apply %3<UInt8>(%0) : $@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int // user: %6
  // function_ref DataWrapper.__allocating_init(count:)
  %5 = function_ref @$s4main11DataWrapperC5countACSi_tcfC : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper // user: %6
  %6 = apply %5(%4, %2) : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper // user: %7
  %7 = move_value [lexical] [var_decl] %6 : $DataWrapper // users: %9, %10, %17, %8
  debug_value %7 : $DataWrapper, let, name "data" // id: %8
  %9 = class_method %7 : $DataWrapper, #DataWrapper.bytes!getter : (DataWrapper) -> () -> UnsafeMutableRawBufferPointer, $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %10
  %10 = apply %9(%7) : $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %14
  %11 = alloc_stack $Array<UInt8>                 // users: %16, %12
  %12 = store_borrow %0 to %11 : $*Array<UInt8>   // users: %15, %14
  // function_ref UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %13 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlF : $@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (@in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer) -> () // user: %14
  %14 = apply %13<[UInt8]>(%12, %10) : $@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (@in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer) -> ()
  end_borrow %12 : $*Array<UInt8>                 // id: %15
  dealloc_stack %11 : $*Array<UInt8>              // id: %16
  destroy_value %7 : $DataWrapper                 // id: %17
  %18 = tuple ()                                  // user: %19
  return %18 : $()                                // id: %19
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL module after #532, stage Mandatory Diagnostic Passes + Enabling Optimization Passes, pass 22: MandatoryInlining (mandatory-inlining)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden [ossa] @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
// %0 "input"                                     // users: %12, %4, %1
bb0(%0 : @guaranteed $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = metatype $@thick DataWrapper.Type          // user: %6
  // function_ref Array.count.getter
  %3 = function_ref @$sSa5countSivg : $@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int // user: %4
  %4 = apply %3<UInt8>(%0) : $@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int // user: %6
  // function_ref DataWrapper.__allocating_init(count:)
  %5 = function_ref @$s4main11DataWrapperC5countACSi_tcfC : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper // user: %6
  %6 = apply %5(%4, %2) : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper // user: %7
  %7 = move_value [lexical] [var_decl] %6 : $DataWrapper // users: %9, %10, %17, %8
  debug_value %7 : $DataWrapper, let, name "data" // id: %8
  %9 = class_method %7 : $DataWrapper, #DataWrapper.bytes!getter : (DataWrapper) -> () -> UnsafeMutableRawBufferPointer, $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %10
  %10 = apply %9(%7) : $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %14
  %11 = alloc_stack $Array<UInt8>                 // users: %16, %12
  %12 = store_borrow %0 to %11 : $*Array<UInt8>   // users: %15, %14
  // function_ref UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %13 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlF : $@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (@in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer) -> () // user: %14
  %14 = apply %13<[UInt8]>(%12, %10) : $@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (@in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer) -> ()
  end_borrow %12 : $*Array<UInt8>                 // id: %15
  dealloc_stack %11 : $*Array<UInt8>              // id: %16
  destroy_value %7 : $DataWrapper                 // id: %17
  %18 = tuple ()                                  // user: %19
  return %18 : $()                                // id: %19
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL module after #533, stage Mandatory Diagnostic Passes + Enabling Optimization Passes, pass 23: MandatorySILLinker (mandatory-linker)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden [ossa] @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
// %0 "input"                                     // users: %12, %4, %1
bb0(%0 : @guaranteed $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = metatype $@thick DataWrapper.Type          // user: %6
  // function_ref Array.count.getter
  %3 = function_ref @$sSa5countSivg : $@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int // user: %4
  %4 = apply %3<UInt8>(%0) : $@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int // user: %6
  // function_ref DataWrapper.__allocating_init(count:)
  %5 = function_ref @$s4main11DataWrapperC5countACSi_tcfC : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper // user: %6
  %6 = apply %5(%4, %2) : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper // user: %7
  %7 = move_value [lexical] [var_decl] %6 : $DataWrapper // users: %9, %10, %17, %8
  debug_value %7 : $DataWrapper, let, name "data" // id: %8
  %9 = class_method %7 : $DataWrapper, #DataWrapper.bytes!getter : (DataWrapper) -> () -> UnsafeMutableRawBufferPointer, $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %10
  %10 = apply %9(%7) : $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %14
  %11 = alloc_stack $Array<UInt8>                 // users: %16, %12
  %12 = store_borrow %0 to %11 : $*Array<UInt8>   // users: %15, %14
  // function_ref UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %13 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlF : $@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (@in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer) -> () // user: %14
  %14 = apply %13<[UInt8]>(%12, %10) : $@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (@in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer) -> ()
  end_borrow %12 : $*Array<UInt8>                 // id: %15
  dealloc_stack %11 : $*Array<UInt8>              // id: %16
  destroy_value %7 : $DataWrapper                 // id: %17
  %18 = tuple ()                                  // user: %19
  return %18 : $()                                // id: %19
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #647, stage Mandatory Diagnostic Passes + Enabling Optimization Passes, pass 29: DiagnoseUnreachable (diagnose-unreachable)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden [ossa] @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
// %0 "input"                                     // users: %12, %4, %1
bb0(%0 : @guaranteed $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = metatype $@thick DataWrapper.Type          // user: %6
  // function_ref Array.count.getter
  %3 = function_ref @$sSa5countSivg : $@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int // user: %4
  %4 = apply %3<UInt8>(%0) : $@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int // user: %6
  // function_ref DataWrapper.__allocating_init(count:)
  %5 = function_ref @$s4main11DataWrapperC5countACSi_tcfC : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper // user: %6
  %6 = apply %5(%4, %2) : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper // user: %7
  %7 = move_value [lexical] [var_decl] %6 : $DataWrapper // users: %9, %10, %17, %8
  debug_value %7 : $DataWrapper, let, name "data" // id: %8
  %9 = class_method %7 : $DataWrapper, #DataWrapper.bytes!getter : (DataWrapper) -> () -> UnsafeMutableRawBufferPointer, $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %10
  %10 = apply %9(%7) : $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %14
  %11 = alloc_stack $Array<UInt8>                 // users: %16, %12
  %12 = store_borrow %0 to %11 : $*Array<UInt8>   // users: %15, %14
  // function_ref UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %13 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlF : $@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (@in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer) -> () // user: %14
  %14 = apply %13<[UInt8]>(%12, %10) : $@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (@in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer) -> ()
  end_borrow %12 : $*Array<UInt8>                 // id: %15
  dealloc_stack %11 : $*Array<UInt8>              // id: %16
  destroy_value %7 : $DataWrapper                 // id: %17
  %18 = tuple ()                                  // user: %19
  return %18 : $()                                // id: %19
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #653, stage Mandatory Diagnostic Passes + Enabling Optimization Passes, pass 35: MoveOnlyTypeEliminator (sil-move-only-type-eliminator)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden [ossa] @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
// %0 "input"                                     // users: %12, %4, %1
bb0(%0 : @guaranteed $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = metatype $@thick DataWrapper.Type          // user: %6
  // function_ref Array.count.getter
  %3 = function_ref @$sSa5countSivg : $@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int // user: %4
  %4 = apply %3<UInt8>(%0) : $@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int // user: %6
  // function_ref DataWrapper.__allocating_init(count:)
  %5 = function_ref @$s4main11DataWrapperC5countACSi_tcfC : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper // user: %6
  %6 = apply %5(%4, %2) : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper // user: %7
  %7 = move_value [lexical] [var_decl] %6 : $DataWrapper // users: %9, %10, %17, %8
  debug_value %7 : $DataWrapper, let, name "data" // id: %8
  %9 = class_method %7 : $DataWrapper, #DataWrapper.bytes!getter : (DataWrapper) -> () -> UnsafeMutableRawBufferPointer, $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %10
  %10 = apply %9(%7) : $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %14
  %11 = alloc_stack $Array<UInt8>                 // users: %16, %12
  %12 = store_borrow %0 to %11 : $*Array<UInt8>   // users: %15, %14
  // function_ref UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %13 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlF : $@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (@in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer) -> () // user: %14
  %14 = apply %13<[UInt8]>(%12, %10) : $@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (@in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer) -> ()
  end_borrow %12 : $*Array<UInt8>                 // id: %15
  dealloc_stack %11 : $*Array<UInt8>              // id: %16
  destroy_value %7 : $DataWrapper                 // id: %17
  %18 = tuple ()                                  // user: %19
  return %18 : $()                                // id: %19
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL module after #79, stage PrepareOptimizationPasses, pass 3: AccessMarkerElimination (access-marker-elim)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden [ossa] @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
// %0 "input"                                     // users: %12, %4, %1
bb0(%0 : @guaranteed $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = metatype $@thick DataWrapper.Type          // user: %6
  // function_ref Array.count.getter
  %3 = function_ref @$sSa5countSivg : $@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int // user: %4
  %4 = apply %3<UInt8>(%0) : $@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int // user: %6
  // function_ref DataWrapper.__allocating_init(count:)
  %5 = function_ref @$s4main11DataWrapperC5countACSi_tcfC : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper // user: %6
  %6 = apply %5(%4, %2) : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper // user: %7
  %7 = move_value [lexical] [var_decl] %6 : $DataWrapper // users: %9, %10, %17, %8
  debug_value %7 : $DataWrapper, let, name "data" // id: %8
  %9 = class_method %7 : $DataWrapper, #DataWrapper.bytes!getter : (DataWrapper) -> () -> UnsafeMutableRawBufferPointer, $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %10
  %10 = apply %9(%7) : $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %14
  %11 = alloc_stack $Array<UInt8>                 // users: %16, %12
  %12 = store_borrow %0 to %11 : $*Array<UInt8>   // users: %15, %14
  // function_ref UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %13 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlF : $@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (@in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer) -> () // user: %14
  %14 = apply %13<[UInt8]>(%12, %10) : $@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (@in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer) -> ()
  end_borrow %12 : $*Array<UInt8>                 // id: %15
  dealloc_stack %11 : $*Array<UInt8>              // id: %16
  destroy_value %7 : $DataWrapper                 // id: %17
  %18 = tuple ()                                  // user: %19
  return %18 : $()                                // id: %19
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL module after #80, stage EarlyModulePasses, pass 0: DeadFunctionAndGlobalElimination (sil-deadfuncelim)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden [ossa] @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
// %0 "input"                                     // users: %12, %4, %1
bb0(%0 : @guaranteed $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = metatype $@thick DataWrapper.Type          // user: %6
  // function_ref Array.count.getter
  %3 = function_ref @$sSa5countSivg : $@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int // user: %4
  %4 = apply %3<UInt8>(%0) : $@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int // user: %6
  // function_ref DataWrapper.__allocating_init(count:)
  %5 = function_ref @$s4main11DataWrapperC5countACSi_tcfC : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper // user: %6
  %6 = apply %5(%4, %2) : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper // user: %7
  %7 = move_value [lexical] [var_decl] %6 : $DataWrapper // users: %9, %10, %17, %8
  debug_value %7 : $DataWrapper, let, name "data" // id: %8
  %9 = class_method %7 : $DataWrapper, #DataWrapper.bytes!getter : (DataWrapper) -> () -> UnsafeMutableRawBufferPointer, $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %10
  %10 = apply %9(%7) : $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %14
  %11 = alloc_stack $Array<UInt8>                 // users: %16, %12
  %12 = store_borrow %0 to %11 : $*Array<UInt8>   // users: %15, %14
  // function_ref UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %13 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlF : $@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (@in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer) -> () // user: %14
  %14 = apply %13<[UInt8]>(%12, %10) : $@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (@in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer) -> ()
  end_borrow %12 : $*Array<UInt8>                 // id: %15
  dealloc_stack %11 : $*Array<UInt8>              // id: %16
  destroy_value %7 : $DataWrapper                 // id: %17
  %18 = tuple ()                                  // user: %19
  return %18 : $()                                // id: %19
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #122, stage EarlyModulePasses, pass 2: ComputeSideEffects (compute-side-effects)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden [ossa] @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %12, %4, %1
bb0(%0 : @guaranteed $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = metatype $@thick DataWrapper.Type          // user: %6
  // function_ref Array.count.getter
  %3 = function_ref @$sSa5countSivg : $@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int // user: %4
  %4 = apply %3<UInt8>(%0) : $@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int // user: %6
  // function_ref DataWrapper.__allocating_init(count:)
  %5 = function_ref @$s4main11DataWrapperC5countACSi_tcfC : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper // user: %6
  %6 = apply %5(%4, %2) : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper // user: %7
  %7 = move_value [lexical] [var_decl] %6 : $DataWrapper // users: %9, %10, %17, %8
  debug_value %7 : $DataWrapper, let, name "data" // id: %8
  %9 = class_method %7 : $DataWrapper, #DataWrapper.bytes!getter : (DataWrapper) -> () -> UnsafeMutableRawBufferPointer, $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %10
  %10 = apply %9(%7) : $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %14
  %11 = alloc_stack $Array<UInt8>                 // users: %16, %12
  %12 = store_borrow %0 to %11 : $*Array<UInt8>   // users: %15, %14
  // function_ref UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %13 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlF : $@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (@in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer) -> () // user: %14
  %14 = apply %13<[UInt8]>(%12, %10) : $@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (@in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer) -> ()
  end_borrow %12 : $*Array<UInt8>                 // id: %15
  dealloc_stack %11 : $*Array<UInt8>              // id: %16
  destroy_value %7 : $DataWrapper                 // id: %17
  %18 = tuple ()                                  // user: %19
  return %18 : $()                                // id: %19
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #123, stage EarlyModulePasses, pass 3: CopyPropagation (copy-propagation)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden [ossa] @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %12, %4, %1
bb0(%0 : @guaranteed $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = metatype $@thick DataWrapper.Type          // user: %6
  // function_ref Array.count.getter
  %3 = function_ref @$sSa5countSivg : $@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int // user: %4
  %4 = apply %3<UInt8>(%0) : $@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int // user: %6
  // function_ref DataWrapper.__allocating_init(count:)
  %5 = function_ref @$s4main11DataWrapperC5countACSi_tcfC : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper // user: %6
  %6 = apply %5(%4, %2) : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper // user: %7
  %7 = move_value [lexical] [var_decl] %6 : $DataWrapper // users: %15, %9, %10, %8
  debug_value %7 : $DataWrapper, let, name "data" // id: %8
  %9 = class_method %7 : $DataWrapper, #DataWrapper.bytes!getter : (DataWrapper) -> () -> UnsafeMutableRawBufferPointer, $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %10
  %10 = apply %9(%7) : $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %14
  %11 = alloc_stack $Array<UInt8>                 // users: %17, %12
  %12 = store_borrow %0 to %11 : $*Array<UInt8>   // users: %16, %14
  // function_ref UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %13 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlF : $@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (@in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer) -> () // user: %14
  %14 = apply %13<[UInt8]>(%12, %10) : $@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (@in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer) -> ()
  destroy_value %7 : $DataWrapper                 // id: %15
  end_borrow %12 : $*Array<UInt8>                 // id: %16
  dealloc_stack %11 : $*Array<UInt8>              // id: %17
  %18 = tuple ()                                  // user: %19
  return %18 : $()                                // id: %19
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL module after #266, stage EarlyModulePasses, pass 6: PerformanceSILLinker (performance-linker)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden [ossa] @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %12, %4, %1
bb0(%0 : @guaranteed $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = metatype $@thick DataWrapper.Type          // user: %6
  // function_ref Array.count.getter
  %3 = function_ref @$sSa5countSivg : $@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int // user: %4
  %4 = apply %3<UInt8>(%0) : $@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int // user: %6
  // function_ref DataWrapper.__allocating_init(count:)
  %5 = function_ref @$s4main11DataWrapperC5countACSi_tcfC : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper // user: %6
  %6 = apply %5(%4, %2) : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper // user: %7
  %7 = move_value [lexical] [var_decl] %6 : $DataWrapper // users: %15, %9, %10, %8
  debug_value %7 : $DataWrapper, let, name "data" // id: %8
  %9 = class_method %7 : $DataWrapper, #DataWrapper.bytes!getter : (DataWrapper) -> () -> UnsafeMutableRawBufferPointer, $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %10
  %10 = apply %9(%7) : $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %14
  %11 = alloc_stack $Array<UInt8>                 // users: %17, %12
  %12 = store_borrow %0 to %11 : $*Array<UInt8>   // users: %16, %14
  // function_ref UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %13 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlF : $@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (@in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer) -> () // user: %14
  %14 = apply %13<[UInt8]>(%12, %10) : $@convention(method) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (@in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer) -> ()
  destroy_value %7 : $DataWrapper                 // id: %15
  end_borrow %12 : $*Array<UInt8>                 // id: %16
  dealloc_stack %11 : $*Array<UInt8>              // id: %17
  %18 = tuple ()                                  // user: %19
  return %18 : $()                                // id: %19
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** New SIL function in  #1349, stage HighLevel,Function+EarlyLoopOpt, pass: GenericSpecializer (generic-specializer), Function: $sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()

$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 was derived from $sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlF
  *** SIL function after  #1349, stage HighLevel,Function+EarlyLoopOpt, pass 18: GenericSpecializer (generic-specializer)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden [ossa] @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %4, %12, %1
bb0(%0 : @guaranteed $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = metatype $@thick DataWrapper.Type          // user: %6
  // function_ref specialized Array.count.getter
  %3 = function_ref @$sSa5countSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %4
  %4 = apply %3(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %6
  // function_ref DataWrapper.__allocating_init(count:)
  %5 = function_ref @$s4main11DataWrapperC5countACSi_tcfC : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper // user: %6
  %6 = apply %5(%4, %2) : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper // user: %7
  %7 = move_value [lexical] [var_decl] %6 : $DataWrapper // users: %17, %9, %10, %8
  debug_value %7 : $DataWrapper, let, name "data" // id: %8
  %9 = class_method %7 : $DataWrapper, #DataWrapper.bytes!getter : (DataWrapper) -> () -> UnsafeMutableRawBufferPointer, $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %10
  %10 = apply %9(%7) : $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %15
  %11 = alloc_stack $Array<UInt8>                 // users: %19, %12
  %12 = store_borrow %0 to %11 : $*Array<UInt8>   // users: %14, %18
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %13 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %15
  %14 = load_borrow %12 : $*Array<UInt8>          // users: %15, %16
  %15 = apply %13(%14, %10) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  end_borrow %14 : $Array<UInt8>                  // id: %16
  destroy_value %7 : $DataWrapper                 // id: %17
  end_borrow %12 : $*Array<UInt8>                 // id: %18
  dealloc_stack %11 : $*Array<UInt8>              // id: %19
  %20 = tuple ()                                  // user: %21
  return %20 : $()                                // id: %21
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #1355, stage HighLevel,Function+EarlyLoopOpt, pass 5: DCE (dce)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
// %0                                             // user: %3
// %1                                             // users: %9, %4
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = alloc_stack $Array<UInt8>                  // users: %39, %24, %13, %10, %9, %3
  store %0 to %2 : $*Array<UInt8>                 // id: %3
  %4 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %5
  switch_enum %4 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb2 // id: %5

// %6                                             // users: %62, %9
bb1(%6 : $UnsafeMutableRawPointer):               // Preds: bb0
  %7 = alloc_stack $Optional<()>                  // users: %75, %19, %15, %13
  // function_ref closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %8 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFySRyADGXEfU_ : $@convention(thin) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (UnsafeBufferPointer<UInt8>, @in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // user: %9
  %9 = partial_apply [callee_guaranteed] [on_stack] %8<Array<UInt8>>(%2, %1, %6) : $@convention(thin) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (UnsafeBufferPointer<UInt8>, @in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // users: %14, %10
  %10 = mark_dependence %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) on %2 : $*Array<UInt8> // user: %11
  %11 = convert_function %10 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) to $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()> // user: %13
  %12 = witness_method $Array<UInt8>, #Sequence.withContiguousStorageIfAvailable : <Self where Self : Sequence><R> (Self) -> ((UnsafeBufferPointer<Self.Element>) throws -> R) throws -> R? : $@convention(witness_method: Sequence) <τ_0_0 where τ_0_0 : Sequence><τ_1_0> (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <τ_0_0.Element, τ_1_0>, @in_guaranteed τ_0_0) -> (@out Optional<τ_1_0>, @error any Error) // user: %13
  %13 = apply [nothrow] %12<Array<UInt8>, ()>(%7, %11, %2) : $@convention(witness_method: Sequence) <τ_0_0 where τ_0_0 : Sequence><τ_1_0> (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <τ_0_0.Element, τ_1_0>, @in_guaranteed τ_0_0) -> (@out Optional<τ_1_0>, @error any Error)
  dealloc_stack %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) // id: %14
  %15 = load %7 : $*Optional<()>                  // user: %16
  switch_enum %15 : $Optional<()>, case #Optional.some!enumelt: bb3, case #Optional.none!enumelt: bb4 // id: %16

bb2:                                              // Preds: bb0
  br bb5                                          // id: %17

bb3(%18 : $()):                                   // Preds: bb1
  dealloc_stack %7 : $*Optional<()>               // id: %19
  br bb5                                          // id: %20

bb4:                                              // Preds: bb1
  %21 = alloc_stack $EnumeratedSequence<Array<UInt8>>.Iterator // users: %74, %73, %33, %28
  %22 = alloc_stack $EnumeratedSequence<Array<UInt8>> // users: %35, %23
  %23 = struct_element_addr %22 : $*EnumeratedSequence<Array<UInt8>>, #EnumeratedSequence._base // users: %26, %24
  copy_addr %2 to [init] %23 : $*Array<UInt8>     // id: %24
  %25 = alloc_stack $Array<UInt8>                 // users: %30, %29, %26
  copy_addr [take] %23 to [init] %25 : $*Array<UInt8> // id: %26
  %27 = witness_method $Array<UInt8>, #Sequence.makeIterator : <Self where Self : Sequence> (__owned Self) -> () -> Self.Iterator : $@convention(witness_method: Sequence) <τ_0_0 where τ_0_0 : Sequence> (@in τ_0_0) -> @out τ_0_0.Iterator // user: %29
  %28 = struct_element_addr %21 : $*EnumeratedSequence<Array<UInt8>>.Iterator, #EnumeratedSequence.Iterator._base // users: %42, %29
  %29 = apply %27<Array<UInt8>>(%28, %25) : $@convention(witness_method: Sequence) <τ_0_0 where τ_0_0 : Sequence> (@in τ_0_0) -> @out τ_0_0.Iterator
  dealloc_stack %25 : $*Array<UInt8>              // id: %30
  %31 = integer_literal $Builtin.Int64, 0         // users: %67, %32
  %32 = struct $Int (%31 : $Builtin.Int64)        // user: %34
  %33 = struct_element_addr %21 : $*EnumeratedSequence<Array<UInt8>>.Iterator, #EnumeratedSequence.Iterator._count // users: %57, %48, %34
  store %32 to %33 : $*Int                        // id: %34
  dealloc_stack %22 : $*EnumeratedSequence<Array<UInt8>> // id: %35
  %36 = witness_method $IndexingIterator<Array<UInt8>>, #IteratorProtocol.next : <Self where Self : IteratorProtocol> (inout Self) -> () -> Self.Element? : $@convention(witness_method: IteratorProtocol) <τ_0_0 where τ_0_0 : IteratorProtocol> (@inout τ_0_0) -> @out Optional<τ_0_0.Element> // user: %42
  br bb6                                          // id: %37

bb5:                                              // Preds: bb2 bb8 bb3
  %38 = tuple ()                                  // user: %40
  dealloc_stack %2 : $*Array<UInt8>               // id: %39
  return %38 : $()                                // id: %40

bb6:                                              // Preds: bb7 bb4
  %41 = alloc_stack $Optional<UInt8>              // users: %72, %47, %43, %42
  %42 = apply %36<IndexingIterator<Array<UInt8>>>(%41, %28) : $@convention(witness_method: IteratorProtocol) <τ_0_0 where τ_0_0 : IteratorProtocol> (@inout τ_0_0) -> @out Optional<τ_0_0.Element>
  %43 = load %41 : $*Optional<UInt8>              // users: %44, %46
  switch_enum %43 : $Optional<UInt8>, case #Optional.some!enumelt: bb7, case #Optional.none!enumelt: bb8 // id: %44

bb7(%45 : $UInt8):                                // Preds: bb6
  %46 = unchecked_enum_data %43 : $Optional<UInt8>, #Optional.some!enumelt // user: %60
  dealloc_stack %41 : $*Optional<UInt8>           // id: %47
  %48 = struct_element_addr %33 : $*Int, #Int._value // user: %49
  %49 = load %48 : $*Builtin.Int64                // users: %63, %52
  %50 = integer_literal $Builtin.Int64, 1         // user: %52
  %51 = integer_literal $Builtin.Int1, -1         // user: %52
  %52 = builtin "sadd_with_overflow_Int64"(%49 : $Builtin.Int64, %50 : $Builtin.Int64, %51 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %54, %53
  %53 = tuple_extract %52 : $(Builtin.Int64, Builtin.Int1), 0 // user: %56
  %54 = tuple_extract %52 : $(Builtin.Int64, Builtin.Int1), 1 // user: %55
  cond_fail %54 : $Builtin.Int1, "arithmetic overflow" // id: %55
  %56 = struct $Int (%53 : $Builtin.Int64)        // user: %57
  store %56 to %33 : $*Int                        // id: %57
  %58 = integer_literal $Builtin.Int1, 0          // user: %69
  %59 = alloc_stack $UInt8                        // users: %70, %61, %60
  store %46 to %59 : $*UInt8                      // id: %60
  %61 = address_to_pointer [stack_protection] %59 : $*UInt8 to $Builtin.RawPointer // user: %69
  %62 = struct_extract %6 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %64
  %63 = builtin "truncOrBitCast_Int64_Word"(%49 : $Builtin.Int64) : $Builtin.Word // user: %64
  %64 = index_raw_pointer %62 : $Builtin.RawPointer, %63 : $Builtin.Word // user: %69
  %65 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %66
  %66 = builtin "sextOrBitCast_Word_Int64"(%65 : $Builtin.Word) : $Builtin.Int64 // users: %69, %67
  %67 = builtin "cmp_slt_Int64"(%66 : $Builtin.Int64, %31 : $Builtin.Int64) : $Builtin.Int1 // user: %68
  cond_fail %67 : $Builtin.Int1, "Negative value is not representable" // id: %68
  %69 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%64 : $Builtin.RawPointer, %61 : $Builtin.RawPointer, %66 : $Builtin.Int64, %58 : $Builtin.Int1) : $()
  dealloc_stack %59 : $*UInt8                     // id: %70
  br bb6                                          // id: %71

bb8:                                              // Preds: bb6
  dealloc_stack %41 : $*Optional<UInt8>           // id: %72
  destroy_addr %21 : $*EnumeratedSequence<Array<UInt8>>.Iterator // id: %73
  dealloc_stack %21 : $*EnumeratedSequence<Array<UInt8>>.Iterator // id: %74
  dealloc_stack %7 : $*Optional<()>               // id: %75
  br bb5                                          // id: %76
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #1357, stage HighLevel,Function+EarlyLoopOpt, pass 7: LowerAggregateInstrs (lower-aggregate-instrs)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
// %0                                             // user: %3
// %1                                             // users: %9, %4
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = alloc_stack $Array<UInt8>                  // users: %24, %44, %13, %10, %9, %3
  store %0 to %2 : $*Array<UInt8>                 // id: %3
  %4 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %5
  switch_enum %4 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb2 // id: %5

// %6                                             // users: %67, %9
bb1(%6 : $UnsafeMutableRawPointer):               // Preds: bb0
  %7 = alloc_stack $Optional<()>                  // users: %85, %19, %15, %13
  // function_ref closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %8 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFySRyADGXEfU_ : $@convention(thin) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (UnsafeBufferPointer<UInt8>, @in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // user: %9
  %9 = partial_apply [callee_guaranteed] [on_stack] %8<Array<UInt8>>(%2, %1, %6) : $@convention(thin) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (UnsafeBufferPointer<UInt8>, @in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // users: %14, %10
  %10 = mark_dependence %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) on %2 : $*Array<UInt8> // user: %11
  %11 = convert_function %10 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) to $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()> // user: %13
  %12 = witness_method $Array<UInt8>, #Sequence.withContiguousStorageIfAvailable : <Self where Self : Sequence><R> (Self) -> ((UnsafeBufferPointer<Self.Element>) throws -> R) throws -> R? : $@convention(witness_method: Sequence) <τ_0_0 where τ_0_0 : Sequence><τ_1_0> (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <τ_0_0.Element, τ_1_0>, @in_guaranteed τ_0_0) -> (@out Optional<τ_1_0>, @error any Error) // user: %13
  %13 = apply [nothrow] %12<Array<UInt8>, ()>(%7, %11, %2) : $@convention(witness_method: Sequence) <τ_0_0 where τ_0_0 : Sequence><τ_1_0> (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <τ_0_0.Element, τ_1_0>, @in_guaranteed τ_0_0) -> (@out Optional<τ_1_0>, @error any Error)
  dealloc_stack %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) // id: %14
  %15 = load %7 : $*Optional<()>                  // user: %16
  switch_enum %15 : $Optional<()>, case #Optional.some!enumelt: bb3, case #Optional.none!enumelt: bb4 // id: %16

bb2:                                              // Preds: bb0
  br bb5                                          // id: %17

bb3(%18 : $()):                                   // Preds: bb1
  dealloc_stack %7 : $*Optional<()>               // id: %19
  br bb5                                          // id: %20

bb4:                                              // Preds: bb1
  %21 = alloc_stack $EnumeratedSequence<Array<UInt8>>.Iterator // users: %78, %84, %38, %33
  %22 = alloc_stack $EnumeratedSequence<Array<UInt8>> // users: %40, %23
  %23 = struct_element_addr %22 : $*EnumeratedSequence<Array<UInt8>>, #EnumeratedSequence._base // users: %30, %28
  %24 = load %2 : $*Array<UInt8>                  // users: %28, %25
  %25 = struct_extract %24 : $Array<UInt8>, #Array._buffer // user: %26
  %26 = struct_extract %25 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %27
  strong_retain %26 : $__ContiguousArrayStorageBase // id: %27
  store %24 to %23 : $*Array<UInt8>               // id: %28
  %29 = alloc_stack $Array<UInt8>                 // users: %31, %35, %34
  %30 = load %23 : $*Array<UInt8>                 // user: %31
  store %30 to %29 : $*Array<UInt8>               // id: %31
  %32 = witness_method $Array<UInt8>, #Sequence.makeIterator : <Self where Self : Sequence> (__owned Self) -> () -> Self.Iterator : $@convention(witness_method: Sequence) <τ_0_0 where τ_0_0 : Sequence> (@in τ_0_0) -> @out τ_0_0.Iterator // user: %34
  %33 = struct_element_addr %21 : $*EnumeratedSequence<Array<UInt8>>.Iterator, #EnumeratedSequence.Iterator._base // users: %47, %34
  %34 = apply %32<Array<UInt8>>(%33, %29) : $@convention(witness_method: Sequence) <τ_0_0 where τ_0_0 : Sequence> (@in τ_0_0) -> @out τ_0_0.Iterator
  dealloc_stack %29 : $*Array<UInt8>              // id: %35
  %36 = integer_literal $Builtin.Int64, 0         // users: %72, %37
  %37 = struct $Int (%36 : $Builtin.Int64)        // user: %39
  %38 = struct_element_addr %21 : $*EnumeratedSequence<Array<UInt8>>.Iterator, #EnumeratedSequence.Iterator._count // users: %62, %53, %39
  store %37 to %38 : $*Int                        // id: %39
  dealloc_stack %22 : $*EnumeratedSequence<Array<UInt8>> // id: %40
  %41 = witness_method $IndexingIterator<Array<UInt8>>, #IteratorProtocol.next : <Self where Self : IteratorProtocol> (inout Self) -> () -> Self.Element? : $@convention(witness_method: IteratorProtocol) <τ_0_0 where τ_0_0 : IteratorProtocol> (@inout τ_0_0) -> @out Optional<τ_0_0.Element> // user: %47
  br bb6                                          // id: %42

bb5:                                              // Preds: bb2 bb8 bb3
  %43 = tuple ()                                  // user: %45
  dealloc_stack %2 : $*Array<UInt8>               // id: %44
  return %43 : $()                                // id: %45

bb6:                                              // Preds: bb7 bb4
  %46 = alloc_stack $Optional<UInt8>              // users: %77, %52, %48, %47
  %47 = apply %41<IndexingIterator<Array<UInt8>>>(%46, %33) : $@convention(witness_method: IteratorProtocol) <τ_0_0 where τ_0_0 : IteratorProtocol> (@inout τ_0_0) -> @out Optional<τ_0_0.Element>
  %48 = load %46 : $*Optional<UInt8>              // users: %49, %51
  switch_enum %48 : $Optional<UInt8>, case #Optional.some!enumelt: bb7, case #Optional.none!enumelt: bb8 // id: %49

bb7(%50 : $UInt8):                                // Preds: bb6
  %51 = unchecked_enum_data %48 : $Optional<UInt8>, #Optional.some!enumelt // user: %65
  dealloc_stack %46 : $*Optional<UInt8>           // id: %52
  %53 = struct_element_addr %38 : $*Int, #Int._value // user: %54
  %54 = load %53 : $*Builtin.Int64                // users: %68, %57
  %55 = integer_literal $Builtin.Int64, 1         // user: %57
  %56 = integer_literal $Builtin.Int1, -1         // user: %57
  %57 = builtin "sadd_with_overflow_Int64"(%54 : $Builtin.Int64, %55 : $Builtin.Int64, %56 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %59, %58
  %58 = tuple_extract %57 : $(Builtin.Int64, Builtin.Int1), 0 // user: %61
  %59 = tuple_extract %57 : $(Builtin.Int64, Builtin.Int1), 1 // user: %60
  cond_fail %59 : $Builtin.Int1, "arithmetic overflow" // id: %60
  %61 = struct $Int (%58 : $Builtin.Int64)        // user: %62
  store %61 to %38 : $*Int                        // id: %62
  %63 = integer_literal $Builtin.Int1, 0          // user: %74
  %64 = alloc_stack $UInt8                        // users: %75, %66, %65
  store %51 to %64 : $*UInt8                      // id: %65
  %66 = address_to_pointer [stack_protection] %64 : $*UInt8 to $Builtin.RawPointer // user: %74
  %67 = struct_extract %6 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %69
  %68 = builtin "truncOrBitCast_Int64_Word"(%54 : $Builtin.Int64) : $Builtin.Word // user: %69
  %69 = index_raw_pointer %67 : $Builtin.RawPointer, %68 : $Builtin.Word // user: %74
  %70 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %71
  %71 = builtin "sextOrBitCast_Word_Int64"(%70 : $Builtin.Word) : $Builtin.Int64 // users: %74, %72
  %72 = builtin "cmp_slt_Int64"(%71 : $Builtin.Int64, %36 : $Builtin.Int64) : $Builtin.Int1 // user: %73
  cond_fail %72 : $Builtin.Int1, "Negative value is not representable" // id: %73
  %74 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%69 : $Builtin.RawPointer, %66 : $Builtin.RawPointer, %71 : $Builtin.Int64, %63 : $Builtin.Int1) : $()
  dealloc_stack %64 : $*UInt8                     // id: %75
  br bb6                                          // id: %76

bb8:                                              // Preds: bb6
  dealloc_stack %46 : $*Optional<UInt8>           // id: %77
  %78 = load %21 : $*EnumeratedSequence<Array<UInt8>>.Iterator // user: %79
  %79 = struct_extract %78 : $EnumeratedSequence<Array<UInt8>>.Iterator, #EnumeratedSequence.Iterator._base // user: %80
  %80 = struct_extract %79 : $IndexingIterator<Array<UInt8>>, #IndexingIterator._elements // user: %81
  %81 = struct_extract %80 : $Array<UInt8>, #Array._buffer // user: %82
  %82 = struct_extract %81 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %83
  strong_release %82 : $__ContiguousArrayStorageBase // id: %83
  dealloc_stack %21 : $*EnumeratedSequence<Array<UInt8>>.Iterator // id: %84
  dealloc_stack %7 : $*Optional<()>               // id: %85
  br bb5                                          // id: %86
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #1358, stage HighLevel,Function+EarlyLoopOpt, pass 8: EarlySROA (early-sroa)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
// %0                                             // user: %3
// %1                                             // users: %9, %4
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = alloc_stack $Array<UInt8>                  // users: %24, %43, %13, %10, %9, %3
  store %0 to %2 : $*Array<UInt8>                 // id: %3
  %4 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %5
  switch_enum %4 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb2 // id: %5

// %6                                             // users: %66, %9
bb1(%6 : $UnsafeMutableRawPointer):               // Preds: bb0
  %7 = alloc_stack $Optional<()>                  // users: %88, %19, %15, %13
  // function_ref closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %8 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFySRyADGXEfU_ : $@convention(thin) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (UnsafeBufferPointer<UInt8>, @in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // user: %9
  %9 = partial_apply [callee_guaranteed] [on_stack] %8<Array<UInt8>>(%2, %1, %6) : $@convention(thin) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (UnsafeBufferPointer<UInt8>, @in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // users: %14, %10
  %10 = mark_dependence %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) on %2 : $*Array<UInt8> // user: %11
  %11 = convert_function %10 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) to $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()> // user: %13
  %12 = witness_method $Array<UInt8>, #Sequence.withContiguousStorageIfAvailable : <Self where Self : Sequence><R> (Self) -> ((UnsafeBufferPointer<Self.Element>) throws -> R) throws -> R? : $@convention(witness_method: Sequence) <τ_0_0 where τ_0_0 : Sequence><τ_1_0> (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <τ_0_0.Element, τ_1_0>, @in_guaranteed τ_0_0) -> (@out Optional<τ_1_0>, @error any Error) // user: %13
  %13 = apply [nothrow] %12<Array<UInt8>, ()>(%7, %11, %2) : $@convention(witness_method: Sequence) <τ_0_0 where τ_0_0 : Sequence><τ_1_0> (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <τ_0_0.Element, τ_1_0>, @in_guaranteed τ_0_0) -> (@out Optional<τ_1_0>, @error any Error)
  dealloc_stack %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) // id: %14
  %15 = load %7 : $*Optional<()>                  // user: %16
  switch_enum %15 : $Optional<()>, case #Optional.some!enumelt: bb3, case #Optional.none!enumelt: bb4 // id: %16

bb2:                                              // Preds: bb0
  br bb5                                          // id: %17

bb3(%18 : $()):                                   // Preds: bb1
  dealloc_stack %7 : $*Optional<()>               // id: %19
  br bb5                                          // id: %20

bb4:                                              // Preds: bb1
  %21 = alloc_stack $IndexingIterator<Array<UInt8>> // users: %87, %33, %46, %77
  %22 = alloc_stack $Builtin.Int64                // users: %86, %52, %61, %38, %78
  %23 = alloc_stack $Array<UInt8>                 // users: %39, %28, %30
  %24 = load %2 : $*Array<UInt8>                  // users: %28, %25
  %25 = struct_extract %24 : $Array<UInt8>, #Array._buffer // user: %26
  %26 = struct_extract %25 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %27
  strong_retain %26 : $__ContiguousArrayStorageBase // id: %27
  store %24 to %23 : $*Array<UInt8>               // id: %28
  %29 = alloc_stack $Array<UInt8>                 // users: %31, %34, %33
  %30 = load %23 : $*Array<UInt8>                 // user: %31
  store %30 to %29 : $*Array<UInt8>               // id: %31
  %32 = witness_method $Array<UInt8>, #Sequence.makeIterator : <Self where Self : Sequence> (__owned Self) -> () -> Self.Iterator : $@convention(witness_method: Sequence) <τ_0_0 where τ_0_0 : Sequence> (@in τ_0_0) -> @out τ_0_0.Iterator // user: %33
  %33 = apply %32<Array<UInt8>>(%21, %29) : $@convention(witness_method: Sequence) <τ_0_0 where τ_0_0 : Sequence> (@in τ_0_0) -> @out τ_0_0.Iterator
  dealloc_stack %29 : $*Array<UInt8>              // id: %34
  %35 = integer_literal $Builtin.Int64, 0         // users: %71, %36
  %36 = struct $Int (%35 : $Builtin.Int64)        // user: %37
  %37 = struct_extract %36 : $Int, #Int._value    // user: %38
  store %37 to %22 : $*Builtin.Int64              // id: %38
  dealloc_stack %23 : $*Array<UInt8>              // id: %39
  %40 = witness_method $IndexingIterator<Array<UInt8>>, #IteratorProtocol.next : <Self where Self : IteratorProtocol> (inout Self) -> () -> Self.Element? : $@convention(witness_method: IteratorProtocol) <τ_0_0 where τ_0_0 : IteratorProtocol> (@inout τ_0_0) -> @out Optional<τ_0_0.Element> // user: %46
  br bb6                                          // id: %41

bb5:                                              // Preds: bb2 bb8 bb3
  %42 = tuple ()                                  // user: %44
  dealloc_stack %2 : $*Array<UInt8>               // id: %43
  return %42 : $()                                // id: %44

bb6:                                              // Preds: bb7 bb4
  %45 = alloc_stack $Optional<UInt8>              // users: %76, %51, %47, %46
  %46 = apply %40<IndexingIterator<Array<UInt8>>>(%45, %21) : $@convention(witness_method: IteratorProtocol) <τ_0_0 where τ_0_0 : IteratorProtocol> (@inout τ_0_0) -> @out Optional<τ_0_0.Element>
  %47 = load %45 : $*Optional<UInt8>              // users: %48, %50
  switch_enum %47 : $Optional<UInt8>, case #Optional.some!enumelt: bb7, case #Optional.none!enumelt: bb8 // id: %48

bb7(%49 : $UInt8):                                // Preds: bb6
  %50 = unchecked_enum_data %47 : $Optional<UInt8>, #Optional.some!enumelt // user: %64
  dealloc_stack %45 : $*Optional<UInt8>           // id: %51
  %52 = load %22 : $*Builtin.Int64                // users: %67, %55
  %53 = integer_literal $Builtin.Int64, 1         // user: %55
  %54 = integer_literal $Builtin.Int1, -1         // user: %55
  %55 = builtin "sadd_with_overflow_Int64"(%52 : $Builtin.Int64, %53 : $Builtin.Int64, %54 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %57, %56
  %56 = tuple_extract %55 : $(Builtin.Int64, Builtin.Int1), 0 // user: %59
  %57 = tuple_extract %55 : $(Builtin.Int64, Builtin.Int1), 1 // user: %58
  cond_fail %57 : $Builtin.Int1, "arithmetic overflow" // id: %58
  %59 = struct $Int (%56 : $Builtin.Int64)        // user: %60
  %60 = struct_extract %59 : $Int, #Int._value    // user: %61
  store %60 to %22 : $*Builtin.Int64              // id: %61
  %62 = integer_literal $Builtin.Int1, 0          // user: %73
  %63 = alloc_stack $UInt8                        // users: %74, %65, %64
  store %50 to %63 : $*UInt8                      // id: %64
  %65 = address_to_pointer [stack_protection] %63 : $*UInt8 to $Builtin.RawPointer // user: %73
  %66 = struct_extract %6 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %68
  %67 = builtin "truncOrBitCast_Int64_Word"(%52 : $Builtin.Int64) : $Builtin.Word // user: %68
  %68 = index_raw_pointer %66 : $Builtin.RawPointer, %67 : $Builtin.Word // user: %73
  %69 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %70
  %70 = builtin "sextOrBitCast_Word_Int64"(%69 : $Builtin.Word) : $Builtin.Int64 // users: %73, %71
  %71 = builtin "cmp_slt_Int64"(%70 : $Builtin.Int64, %35 : $Builtin.Int64) : $Builtin.Int1 // user: %72
  cond_fail %71 : $Builtin.Int1, "Negative value is not representable" // id: %72
  %73 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%68 : $Builtin.RawPointer, %65 : $Builtin.RawPointer, %70 : $Builtin.Int64, %62 : $Builtin.Int1) : $()
  dealloc_stack %63 : $*UInt8                     // id: %74
  br bb6                                          // id: %75

bb8:                                              // Preds: bb6
  dealloc_stack %45 : $*Optional<UInt8>           // id: %76
  %77 = load %21 : $*IndexingIterator<Array<UInt8>> // user: %80
  %78 = load %22 : $*Builtin.Int64                // user: %79
  %79 = struct $Int (%78 : $Builtin.Int64)        // user: %80
  %80 = struct $EnumeratedSequence<Array<UInt8>>.Iterator (%77 : $IndexingIterator<Array<UInt8>>, %79 : $Int) // user: %81
  %81 = struct_extract %80 : $EnumeratedSequence<Array<UInt8>>.Iterator, #EnumeratedSequence.Iterator._base // user: %82
  %82 = struct_extract %81 : $IndexingIterator<Array<UInt8>>, #IndexingIterator._elements // user: %83
  %83 = struct_extract %82 : $Array<UInt8>, #Array._buffer // user: %84
  %84 = struct_extract %83 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %85
  strong_release %84 : $__ContiguousArrayStorageBase // id: %85
  dealloc_stack %22 : $*Builtin.Int64             // id: %86
  dealloc_stack %21 : $*IndexingIterator<Array<UInt8>> // id: %87
  dealloc_stack %7 : $*Optional<()>               // id: %88
  br bb5                                          // id: %89
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #1359, stage HighLevel,Function+EarlyLoopOpt, pass 9: Mem2Reg (mem2reg)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
// %0                                             // user: %3
// %1                                             // users: %9, %4
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = alloc_stack $Array<UInt8>                  // users: %22, %37, %13, %10, %9, %3
  store %0 to %2 : $*Array<UInt8>                 // id: %3
  %4 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %5
  switch_enum %4 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb2 // id: %5

// %6                                             // users: %59, %9
bb1(%6 : $UnsafeMutableRawPointer):               // Preds: bb0
  %7 = alloc_stack $Optional<()>                  // users: %79, %19, %15, %13
  // function_ref closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %8 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFySRyADGXEfU_ : $@convention(thin) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (UnsafeBufferPointer<UInt8>, @in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // user: %9
  %9 = partial_apply [callee_guaranteed] [on_stack] %8<Array<UInt8>>(%2, %1, %6) : $@convention(thin) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (UnsafeBufferPointer<UInt8>, @in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // users: %14, %10
  %10 = mark_dependence %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) on %2 : $*Array<UInt8> // user: %11
  %11 = convert_function %10 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) to $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()> // user: %13
  %12 = witness_method $Array<UInt8>, #Sequence.withContiguousStorageIfAvailable : <Self where Self : Sequence><R> (Self) -> ((UnsafeBufferPointer<Self.Element>) throws -> R) throws -> R? : $@convention(witness_method: Sequence) <τ_0_0 where τ_0_0 : Sequence><τ_1_0> (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <τ_0_0.Element, τ_1_0>, @in_guaranteed τ_0_0) -> (@out Optional<τ_1_0>, @error any Error) // user: %13
  %13 = apply [nothrow] %12<Array<UInt8>, ()>(%7, %11, %2) : $@convention(witness_method: Sequence) <τ_0_0 where τ_0_0 : Sequence><τ_1_0> (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <τ_0_0.Element, τ_1_0>, @in_guaranteed τ_0_0) -> (@out Optional<τ_1_0>, @error any Error)
  dealloc_stack %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) // id: %14
  %15 = load %7 : $*Optional<()>                  // user: %16
  switch_enum %15 : $Optional<()>, case #Optional.some!enumelt: bb3, case #Optional.none!enumelt: bb4 // id: %16

bb2:                                              // Preds: bb0
  br bb5                                          // id: %17

bb3(%18 : $()):                                   // Preds: bb1
  dealloc_stack %7 : $*Optional<()>               // id: %19
  br bb5                                          // id: %20

bb4:                                              // Preds: bb1
  %21 = alloc_stack $IndexingIterator<Array<UInt8>> // users: %78, %29, %41, %70
  %22 = load %2 : $*Array<UInt8>                  // users: %27, %23
  %23 = struct_extract %22 : $Array<UInt8>, #Array._buffer // user: %24
  %24 = struct_extract %23 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %25
  strong_retain %24 : $__ContiguousArrayStorageBase // id: %25
  %26 = alloc_stack $Array<UInt8>                 // users: %27, %30, %29
  store %22 to %26 : $*Array<UInt8>               // id: %27
  %28 = witness_method $Array<UInt8>, #Sequence.makeIterator : <Self where Self : Sequence> (__owned Self) -> () -> Self.Iterator : $@convention(witness_method: Sequence) <τ_0_0 where τ_0_0 : Sequence> (@in τ_0_0) -> @out τ_0_0.Iterator // user: %29
  %29 = apply %28<Array<UInt8>>(%21, %26) : $@convention(witness_method: Sequence) <τ_0_0 where τ_0_0 : Sequence> (@in τ_0_0) -> @out τ_0_0.Iterator
  dealloc_stack %26 : $*Array<UInt8>              // id: %30
  %31 = integer_literal $Builtin.Int64, 0         // users: %64, %32
  %32 = struct $Int (%31 : $Builtin.Int64)        // user: %33
  %33 = struct_extract %32 : $Int, #Int._value    // user: %35
  %34 = witness_method $IndexingIterator<Array<UInt8>>, #IteratorProtocol.next : <Self where Self : IteratorProtocol> (inout Self) -> () -> Self.Element? : $@convention(witness_method: IteratorProtocol) <τ_0_0 where τ_0_0 : IteratorProtocol> (@inout τ_0_0) -> @out Optional<τ_0_0.Element> // user: %41
  br bb6(%33 : $Builtin.Int64)                    // id: %35

bb5:                                              // Preds: bb2 bb8 bb3
  %36 = tuple ()                                  // user: %38
  dealloc_stack %2 : $*Array<UInt8>               // id: %37
  return %36 : $()                                // id: %38

// %39                                            // users: %71, %49, %60
bb6(%39 : $Builtin.Int64):                        // Preds: bb4 bb7
  %40 = alloc_stack $Optional<UInt8>              // users: %69, %46, %42, %41
  %41 = apply %34<IndexingIterator<Array<UInt8>>>(%40, %21) : $@convention(witness_method: IteratorProtocol) <τ_0_0 where τ_0_0 : IteratorProtocol> (@inout τ_0_0) -> @out Optional<τ_0_0.Element>
  %42 = load %40 : $*Optional<UInt8>              // users: %43, %45
  switch_enum %42 : $Optional<UInt8>, case #Optional.some!enumelt: bb7, case #Optional.none!enumelt: bb8 // id: %43

bb7(%44 : $UInt8):                                // Preds: bb6
  %45 = unchecked_enum_data %42 : $Optional<UInt8>, #Optional.some!enumelt // user: %57
  dealloc_stack %40 : $*Optional<UInt8>           // id: %46
  %47 = integer_literal $Builtin.Int64, 1         // user: %49
  %48 = integer_literal $Builtin.Int1, -1         // user: %49
  %49 = builtin "sadd_with_overflow_Int64"(%39 : $Builtin.Int64, %47 : $Builtin.Int64, %48 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %51, %50
  %50 = tuple_extract %49 : $(Builtin.Int64, Builtin.Int1), 0 // user: %53
  %51 = tuple_extract %49 : $(Builtin.Int64, Builtin.Int1), 1 // user: %52
  cond_fail %51 : $Builtin.Int1, "arithmetic overflow" // id: %52
  %53 = struct $Int (%50 : $Builtin.Int64)        // user: %54
  %54 = struct_extract %53 : $Int, #Int._value    // user: %68
  %55 = integer_literal $Builtin.Int1, 0          // user: %66
  %56 = alloc_stack $UInt8                        // users: %67, %58, %57
  store %45 to %56 : $*UInt8                      // id: %57
  %58 = address_to_pointer [stack_protection] %56 : $*UInt8 to $Builtin.RawPointer // user: %66
  %59 = struct_extract %6 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %61
  %60 = builtin "truncOrBitCast_Int64_Word"(%39 : $Builtin.Int64) : $Builtin.Word // user: %61
  %61 = index_raw_pointer %59 : $Builtin.RawPointer, %60 : $Builtin.Word // user: %66
  %62 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %63
  %63 = builtin "sextOrBitCast_Word_Int64"(%62 : $Builtin.Word) : $Builtin.Int64 // users: %66, %64
  %64 = builtin "cmp_slt_Int64"(%63 : $Builtin.Int64, %31 : $Builtin.Int64) : $Builtin.Int1 // user: %65
  cond_fail %64 : $Builtin.Int1, "Negative value is not representable" // id: %65
  %66 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%61 : $Builtin.RawPointer, %58 : $Builtin.RawPointer, %63 : $Builtin.Int64, %55 : $Builtin.Int1) : $()
  dealloc_stack %56 : $*UInt8                     // id: %67
  br bb6(%54 : $Builtin.Int64)                    // id: %68

bb8:                                              // Preds: bb6
  dealloc_stack %40 : $*Optional<UInt8>           // id: %69
  %70 = load %21 : $*IndexingIterator<Array<UInt8>> // user: %72
  %71 = struct $Int (%39 : $Builtin.Int64)        // user: %72
  %72 = struct $EnumeratedSequence<Array<UInt8>>.Iterator (%70 : $IndexingIterator<Array<UInt8>>, %71 : $Int) // user: %73
  %73 = struct_extract %72 : $EnumeratedSequence<Array<UInt8>>.Iterator, #EnumeratedSequence.Iterator._base // user: %74
  %74 = struct_extract %73 : $IndexingIterator<Array<UInt8>>, #IndexingIterator._elements // user: %75
  %75 = struct_extract %74 : $Array<UInt8>, #Array._buffer // user: %76
  %76 = struct_extract %75 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %77
  strong_release %76 : $__ContiguousArrayStorageBase // id: %77
  dealloc_stack %21 : $*IndexingIterator<Array<UInt8>> // id: %78
  dealloc_stack %7 : $*Optional<()>               // id: %79
  br bb5                                          // id: %80
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #1361, stage HighLevel,Function+EarlyLoopOpt, pass 11: PerformanceConstantPropagation (performance-constant-propagation)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
// %0                                             // user: %3
// %1                                             // users: %9, %4
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = alloc_stack $Array<UInt8>                  // users: %22, %35, %13, %10, %9, %3
  store %0 to %2 : $*Array<UInt8>                 // id: %3
  %4 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %5
  switch_enum %4 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb2 // id: %5

// %6                                             // users: %55, %9
bb1(%6 : $UnsafeMutableRawPointer):               // Preds: bb0
  %7 = alloc_stack $Optional<()>                  // users: %72, %19, %15, %13
  // function_ref closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %8 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFySRyADGXEfU_ : $@convention(thin) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (UnsafeBufferPointer<UInt8>, @in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // user: %9
  %9 = partial_apply [callee_guaranteed] [on_stack] %8<Array<UInt8>>(%2, %1, %6) : $@convention(thin) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (UnsafeBufferPointer<UInt8>, @in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // users: %14, %10
  %10 = mark_dependence %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) on %2 : $*Array<UInt8> // user: %11
  %11 = convert_function %10 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) to $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()> // user: %13
  %12 = witness_method $Array<UInt8>, #Sequence.withContiguousStorageIfAvailable : <Self where Self : Sequence><R> (Self) -> ((UnsafeBufferPointer<Self.Element>) throws -> R) throws -> R? : $@convention(witness_method: Sequence) <τ_0_0 where τ_0_0 : Sequence><τ_1_0> (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <τ_0_0.Element, τ_1_0>, @in_guaranteed τ_0_0) -> (@out Optional<τ_1_0>, @error any Error) // user: %13
  %13 = apply [nothrow] %12<Array<UInt8>, ()>(%7, %11, %2) : $@convention(witness_method: Sequence) <τ_0_0 where τ_0_0 : Sequence><τ_1_0> (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <τ_0_0.Element, τ_1_0>, @in_guaranteed τ_0_0) -> (@out Optional<τ_1_0>, @error any Error)
  dealloc_stack %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) // id: %14
  %15 = load %7 : $*Optional<()>                  // user: %16
  switch_enum %15 : $Optional<()>, case #Optional.some!enumelt: bb3, case #Optional.none!enumelt: bb4 // id: %16

bb2:                                              // Preds: bb0
  br bb5                                          // id: %17

bb3(%18 : $()):                                   // Preds: bb1
  dealloc_stack %7 : $*Optional<()>               // id: %19
  br bb5                                          // id: %20

bb4:                                              // Preds: bb1
  %21 = alloc_stack $IndexingIterator<Array<UInt8>> // users: %71, %29, %39, %66
  %22 = load %2 : $*Array<UInt8>                  // users: %27, %23
  %23 = struct_extract %22 : $Array<UInt8>, #Array._buffer // user: %24
  %24 = struct_extract %23 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %25
  strong_retain %24 : $__ContiguousArrayStorageBase // id: %25
  %26 = alloc_stack $Array<UInt8>                 // users: %27, %30, %29
  store %22 to %26 : $*Array<UInt8>               // id: %27
  %28 = witness_method $Array<UInt8>, #Sequence.makeIterator : <Self where Self : Sequence> (__owned Self) -> () -> Self.Iterator : $@convention(witness_method: Sequence) <τ_0_0 where τ_0_0 : Sequence> (@in τ_0_0) -> @out τ_0_0.Iterator // user: %29
  %29 = apply %28<Array<UInt8>>(%21, %26) : $@convention(witness_method: Sequence) <τ_0_0 where τ_0_0 : Sequence> (@in τ_0_0) -> @out τ_0_0.Iterator
  dealloc_stack %26 : $*Array<UInt8>              // id: %30
  %31 = integer_literal $Builtin.Int64, 0         // users: %33, %60
  %32 = witness_method $IndexingIterator<Array<UInt8>>, #IteratorProtocol.next : <Self where Self : IteratorProtocol> (inout Self) -> () -> Self.Element? : $@convention(witness_method: IteratorProtocol) <τ_0_0 where τ_0_0 : IteratorProtocol> (@inout τ_0_0) -> @out Optional<τ_0_0.Element> // user: %39
  br bb6(%31 : $Builtin.Int64)                    // id: %33

bb5:                                              // Preds: bb2 bb8 bb3
  %34 = tuple ()                                  // user: %36
  dealloc_stack %2 : $*Array<UInt8>               // id: %35
  return %34 : $()                                // id: %36

// %37                                            // users: %47, %56
bb6(%37 : $Builtin.Int64):                        // Preds: bb4 bb7
  %38 = alloc_stack $Optional<UInt8>              // users: %65, %44, %40, %39
  %39 = apply %32<IndexingIterator<Array<UInt8>>>(%38, %21) : $@convention(witness_method: IteratorProtocol) <τ_0_0 where τ_0_0 : IteratorProtocol> (@inout τ_0_0) -> @out Optional<τ_0_0.Element>
  %40 = load %38 : $*Optional<UInt8>              // users: %41, %43
  switch_enum %40 : $Optional<UInt8>, case #Optional.some!enumelt: bb7, case #Optional.none!enumelt: bb8 // id: %41

bb7(%42 : $UInt8):                                // Preds: bb6
  %43 = unchecked_enum_data %40 : $Optional<UInt8>, #Optional.some!enumelt // user: %53
  dealloc_stack %38 : $*Optional<UInt8>           // id: %44
  %45 = integer_literal $Builtin.Int64, 1         // user: %47
  %46 = integer_literal $Builtin.Int1, -1         // user: %47
  %47 = builtin "sadd_with_overflow_Int64"(%37 : $Builtin.Int64, %45 : $Builtin.Int64, %46 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %49, %48
  %48 = tuple_extract %47 : $(Builtin.Int64, Builtin.Int1), 0 // user: %64
  %49 = tuple_extract %47 : $(Builtin.Int64, Builtin.Int1), 1 // user: %50
  cond_fail %49 : $Builtin.Int1, "arithmetic overflow" // id: %50
  %51 = integer_literal $Builtin.Int1, 0          // user: %62
  %52 = alloc_stack $UInt8                        // users: %63, %54, %53
  store %43 to %52 : $*UInt8                      // id: %53
  %54 = address_to_pointer [stack_protection] %52 : $*UInt8 to $Builtin.RawPointer // user: %62
  %55 = struct_extract %6 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %57
  %56 = builtin "truncOrBitCast_Int64_Word"(%37 : $Builtin.Int64) : $Builtin.Word // user: %57
  %57 = index_raw_pointer %55 : $Builtin.RawPointer, %56 : $Builtin.Word // user: %62
  %58 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %59
  %59 = builtin "sextOrBitCast_Word_Int64"(%58 : $Builtin.Word) : $Builtin.Int64 // users: %62, %60
  %60 = builtin "cmp_slt_Int64"(%59 : $Builtin.Int64, %31 : $Builtin.Int64) : $Builtin.Int1 // user: %61
  cond_fail %60 : $Builtin.Int1, "Negative value is not representable" // id: %61
  %62 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%57 : $Builtin.RawPointer, %54 : $Builtin.RawPointer, %59 : $Builtin.Int64, %51 : $Builtin.Int1) : $()
  dealloc_stack %52 : $*UInt8                     // id: %63
  br bb6(%48 : $Builtin.Int64)                    // id: %64

bb8:                                              // Preds: bb6
  dealloc_stack %38 : $*Optional<UInt8>           // id: %65
  %66 = load %21 : $*IndexingIterator<Array<UInt8>> // user: %67
  %67 = struct_extract %66 : $IndexingIterator<Array<UInt8>>, #IndexingIterator._elements // user: %68
  %68 = struct_extract %67 : $Array<UInt8>, #Array._buffer // user: %69
  %69 = struct_extract %68 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %70
  strong_release %69 : $__ContiguousArrayStorageBase // id: %70
  dealloc_stack %21 : $*IndexingIterator<Array<UInt8>> // id: %71
  dealloc_stack %7 : $*Optional<()>               // id: %72
  br bb5                                          // id: %73
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #1364, stage HighLevel,Function+EarlyLoopOpt, pass 14: SILCombine (sil-combine)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
// %0                                             // user: %3
// %1                                             // users: %9, %4
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = alloc_stack $Array<UInt8>                  // users: %22, %35, %13, %10, %9, %3
  store %0 to %2 : $*Array<UInt8>                 // id: %3
  %4 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %5
  switch_enum %4 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb2 // id: %5

// %6                                             // users: %55, %9
bb1(%6 : $UnsafeMutableRawPointer):               // Preds: bb0
  %7 = alloc_stack $Optional<()>                  // users: %72, %19, %15, %13
  // function_ref closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %8 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFySRyADGXEfU_ : $@convention(thin) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (UnsafeBufferPointer<UInt8>, @in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // user: %9
  %9 = partial_apply [callee_guaranteed] [on_stack] %8<Array<UInt8>>(%2, %1, %6) : $@convention(thin) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (UnsafeBufferPointer<UInt8>, @in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // users: %14, %10
  %10 = mark_dependence %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) on %2 : $*Array<UInt8> // user: %11
  %11 = convert_function %10 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) to $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()> // user: %13
  %12 = witness_method $Array<UInt8>, #Sequence.withContiguousStorageIfAvailable : <Self where Self : Sequence><R> (Self) -> ((UnsafeBufferPointer<Self.Element>) throws -> R) throws -> R? : $@convention(witness_method: Sequence) <τ_0_0 where τ_0_0 : Sequence><τ_1_0> (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <τ_0_0.Element, τ_1_0>, @in_guaranteed τ_0_0) -> (@out Optional<τ_1_0>, @error any Error) // user: %13
  %13 = apply [nothrow] %12<Array<UInt8>, ()>(%7, %11, %2) : $@convention(witness_method: Sequence) <τ_0_0 where τ_0_0 : Sequence><τ_1_0> (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <τ_0_0.Element, τ_1_0>, @in_guaranteed τ_0_0) -> (@out Optional<τ_1_0>, @error any Error)
  dealloc_stack %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) // id: %14
  %15 = load %7 : $*Optional<()>                  // user: %16
  switch_enum %15 : $Optional<()>, case #Optional.some!enumelt: bb3, case #Optional.none!enumelt: bb4 // id: %16

bb2:                                              // Preds: bb0
  br bb5                                          // id: %17

bb3(%18 : $()):                                   // Preds: bb1
  dealloc_stack %7 : $*Optional<()>               // id: %19
  br bb5                                          // id: %20

bb4:                                              // Preds: bb1
  %21 = alloc_stack $IndexingIterator<Array<UInt8>> // users: %66, %71, %29, %39
  %22 = load %2 : $*Array<UInt8>                  // users: %27, %23
  %23 = struct_extract %22 : $Array<UInt8>, #Array._buffer // user: %24
  %24 = struct_extract %23 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %25
  strong_retain %24 : $__ContiguousArrayStorageBase // id: %25
  %26 = alloc_stack $Array<UInt8>                 // users: %27, %30, %29
  store %22 to %26 : $*Array<UInt8>               // id: %27
  %28 = witness_method $Array<UInt8>, #Sequence.makeIterator : <Self where Self : Sequence> (__owned Self) -> () -> Self.Iterator : $@convention(witness_method: Sequence) <τ_0_0 where τ_0_0 : Sequence> (@in τ_0_0) -> @out τ_0_0.Iterator // user: %29
  %29 = apply %28<Array<UInt8>>(%21, %26) : $@convention(witness_method: Sequence) <τ_0_0 where τ_0_0 : Sequence> (@in τ_0_0) -> @out τ_0_0.Iterator
  dealloc_stack %26 : $*Array<UInt8>              // id: %30
  %31 = integer_literal $Builtin.Int64, 0         // users: %33, %60
  %32 = witness_method $IndexingIterator<Array<UInt8>>, #IteratorProtocol.next : <Self where Self : IteratorProtocol> (inout Self) -> () -> Self.Element? : $@convention(witness_method: IteratorProtocol) <τ_0_0 where τ_0_0 : IteratorProtocol> (@inout τ_0_0) -> @out Optional<τ_0_0.Element> // user: %39
  br bb6(%31 : $Builtin.Int64)                    // id: %33

bb5:                                              // Preds: bb2 bb8 bb3
  %34 = tuple ()                                  // user: %36
  dealloc_stack %2 : $*Array<UInt8>               // id: %35
  return %34 : $()                                // id: %36

// %37                                            // users: %47, %56
bb6(%37 : $Builtin.Int64):                        // Preds: bb4 bb7
  %38 = alloc_stack $Optional<UInt8>              // users: %65, %44, %40, %39
  %39 = apply %32<IndexingIterator<Array<UInt8>>>(%38, %21) : $@convention(witness_method: IteratorProtocol) <τ_0_0 where τ_0_0 : IteratorProtocol> (@inout τ_0_0) -> @out Optional<τ_0_0.Element>
  %40 = load %38 : $*Optional<UInt8>              // users: %41, %43
  switch_enum %40 : $Optional<UInt8>, case #Optional.some!enumelt: bb7, case #Optional.none!enumelt: bb8 // id: %41

bb7(%42 : $UInt8):                                // Preds: bb6
  %43 = unchecked_enum_data %40 : $Optional<UInt8>, #Optional.some!enumelt // user: %53
  dealloc_stack %38 : $*Optional<UInt8>           // id: %44
  %45 = integer_literal $Builtin.Int64, 1         // user: %47
  %46 = integer_literal $Builtin.Int1, -1         // user: %47
  %47 = builtin "sadd_with_overflow_Int64"(%37 : $Builtin.Int64, %45 : $Builtin.Int64, %46 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %49, %48
  %48 = tuple_extract %47 : $(Builtin.Int64, Builtin.Int1), 0 // user: %64
  %49 = tuple_extract %47 : $(Builtin.Int64, Builtin.Int1), 1 // user: %50
  cond_fail %49 : $Builtin.Int1, "arithmetic overflow" // id: %50
  %51 = integer_literal $Builtin.Int1, 0          // user: %62
  %52 = alloc_stack $UInt8                        // users: %63, %54, %53
  store %43 to %52 : $*UInt8                      // id: %53
  %54 = address_to_pointer [stack_protection] %52 : $*UInt8 to $Builtin.RawPointer // user: %62
  %55 = struct_extract %6 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %57
  %56 = builtin "truncOrBitCast_Int64_Word"(%37 : $Builtin.Int64) : $Builtin.Word // user: %57
  %57 = index_raw_pointer %55 : $Builtin.RawPointer, %56 : $Builtin.Word // user: %62
  %58 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %59
  %59 = builtin "sextOrBitCast_Word_Int64"(%58 : $Builtin.Word) : $Builtin.Int64 // users: %62, %60
  %60 = builtin "cmp_slt_Int64"(%59 : $Builtin.Int64, %31 : $Builtin.Int64) : $Builtin.Int1 // user: %61
  cond_fail %60 : $Builtin.Int1, "Negative value is not representable" // id: %61
  %62 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%57 : $Builtin.RawPointer, %54 : $Builtin.RawPointer, %59 : $Builtin.Int64, %51 : $Builtin.Int1) : $()
  dealloc_stack %52 : $*UInt8                     // id: %63
  br bb6(%48 : $Builtin.Int64)                    // id: %64

bb8:                                              // Preds: bb6
  dealloc_stack %38 : $*Optional<UInt8>           // id: %65
  %66 = struct_element_addr %21 : $*IndexingIterator<Array<UInt8>>, #IndexingIterator._elements // user: %67
  %67 = struct_element_addr %66 : $*Array<UInt8>, #Array._buffer // user: %68
  %68 = struct_element_addr %67 : $*_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %69
  %69 = load %68 : $*__ContiguousArrayStorageBase // user: %70
  strong_release %69 : $__ContiguousArrayStorageBase // id: %70
  dealloc_stack %21 : $*IndexingIterator<Array<UInt8>> // id: %71
  dealloc_stack %7 : $*Optional<()>               // id: %72
  br bb5                                          // id: %73
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #1367, stage HighLevel,Function+EarlyLoopOpt, pass 17: Devirtualizer (devirtualizer)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
// %0                                             // user: %3
// %1                                             // users: %9, %4
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = alloc_stack $Array<UInt8>                  // users: %13, %22, %34, %10, %9, %3
  store %0 to %2 : $*Array<UInt8>                 // id: %3
  %4 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %5
  switch_enum %4 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb2 // id: %5

// %6                                             // users: %55, %9
bb1(%6 : $UnsafeMutableRawPointer):               // Preds: bb0
  %7 = alloc_stack $Optional<()>                  // users: %13, %72, %19, %15
  // function_ref closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %8 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFySRyADGXEfU_ : $@convention(thin) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (UnsafeBufferPointer<UInt8>, @in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // user: %9
  %9 = partial_apply [callee_guaranteed] [on_stack] %8<Array<UInt8>>(%2, %1, %6) : $@convention(thin) <τ_0_0 where τ_0_0 : Collection, τ_0_0.Element == UInt8> (UnsafeBufferPointer<UInt8>, @in_guaranteed τ_0_0, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // users: %14, %10
  %10 = mark_dependence %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) on %2 : $*Array<UInt8> // user: %11
  %11 = convert_function %10 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) to $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()> // user: %13
  // function_ref protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance [A]
  %12 = function_ref @$sSayxGSTsST32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFTW : $@convention(witness_method: Sequence) <τ_0_0><τ_1_0> (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <τ_0_0, τ_1_0>, @in_guaranteed Array<τ_0_0>) -> (@out Optional<τ_1_0>, @error any Error) // user: %13
  %13 = apply [nothrow] %12<UInt8, ()>(%7, %11, %2) : $@convention(witness_method: Sequence) <τ_0_0><τ_1_0> (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <τ_0_0, τ_1_0>, @in_guaranteed Array<τ_0_0>) -> (@out Optional<τ_1_0>, @error any Error)
  dealloc_stack %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) // id: %14
  %15 = load %7 : $*Optional<()>                  // user: %16
  switch_enum %15 : $Optional<()>, case #Optional.some!enumelt: bb3, case #Optional.none!enumelt: bb4 // id: %16

bb2:                                              // Preds: bb0
  br bb5                                          // id: %17

bb3(%18 : $()):                                   // Preds: bb1
  dealloc_stack %7 : $*Optional<()>               // id: %19
  br bb5                                          // id: %20

bb4:                                              // Preds: bb1
  %21 = alloc_stack $IndexingIterator<Array<UInt8>> // users: %39, %29, %66, %71
  %22 = load %2 : $*Array<UInt8>                  // users: %27, %23
  %23 = struct_extract %22 : $Array<UInt8>, #Array._buffer // user: %24
  %24 = struct_extract %23 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %25
  strong_retain %24 : $__ContiguousArrayStorageBase // id: %25
  %26 = alloc_stack $Array<UInt8>                 // users: %29, %27, %30
  store %22 to %26 : $*Array<UInt8>               // id: %27
  // function_ref protocol witness for Sequence.makeIterator() in conformance [A]
  %28 = function_ref @$sSayxGSTsST12makeIterator0B0QzyFTW : $@convention(witness_method: Sequence) <τ_0_0> (@in Array<τ_0_0>) -> @out IndexingIterator<Array<τ_0_0>> // user: %29
  %29 = apply %28<UInt8>(%21, %26) : $@convention(witness_method: Sequence) <τ_0_0> (@in Array<τ_0_0>) -> @out IndexingIterator<Array<τ_0_0>>
  dealloc_stack %26 : $*Array<UInt8>              // id: %30
  %31 = integer_literal $Builtin.Int64, 0         // users: %32, %60
  br bb6(%31 : $Builtin.Int64)                    // id: %32

bb5:                                              // Preds: bb2 bb8 bb3
  %33 = tuple ()                                  // user: %35
  dealloc_stack %2 : $*Array<UInt8>               // id: %34
  return %33 : $()                                // id: %35

// %36                                            // users: %47, %56
bb6(%36 : $Builtin.Int64):                        // Preds: bb4 bb7
  %37 = alloc_stack $Optional<UInt8>              // users: %39, %65, %44, %40
  // function_ref protocol witness for IteratorProtocol.next() in conformance IndexingIterator<A>
  %38 = function_ref @$ss16IndexingIteratorVyxGStsSt4next7ElementQzSgyFTW : $@convention(witness_method: IteratorProtocol) <τ_0_0 where τ_0_0 : Collection> (@inout IndexingIterator<τ_0_0>) -> @out Optional<τ_0_0.Element> // user: %39
  %39 = apply %38<Array<UInt8>>(%37, %21) : $@convention(witness_method: IteratorProtocol) <τ_0_0 where τ_0_0 : Collection> (@inout IndexingIterator<τ_0_0>) -> @out Optional<τ_0_0.Element>
  %40 = load %37 : $*Optional<UInt8>              // users: %41, %43
  switch_enum %40 : $Optional<UInt8>, case #Optional.some!enumelt: bb7, case #Optional.none!enumelt: bb8 // id: %41

bb7(%42 : $UInt8):                                // Preds: bb6
  %43 = unchecked_enum_data %40 : $Optional<UInt8>, #Optional.some!enumelt // user: %53
  dealloc_stack %37 : $*Optional<UInt8>           // id: %44
  %45 = integer_literal $Builtin.Int64, 1         // user: %47
  %46 = integer_literal $Builtin.Int1, -1         // user: %47
  %47 = builtin "sadd_with_overflow_Int64"(%36 : $Builtin.Int64, %45 : $Builtin.Int64, %46 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %49, %48
  %48 = tuple_extract %47 : $(Builtin.Int64, Builtin.Int1), 0 // user: %64
  %49 = tuple_extract %47 : $(Builtin.Int64, Builtin.Int1), 1 // user: %50
  cond_fail %49 : $Builtin.Int1, "arithmetic overflow" // id: %50
  %51 = integer_literal $Builtin.Int1, 0          // user: %62
  %52 = alloc_stack $UInt8                        // users: %63, %54, %53
  store %43 to %52 : $*UInt8                      // id: %53
  %54 = address_to_pointer [stack_protection] %52 : $*UInt8 to $Builtin.RawPointer // user: %62
  %55 = struct_extract %6 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %57
  %56 = builtin "truncOrBitCast_Int64_Word"(%36 : $Builtin.Int64) : $Builtin.Word // user: %57
  %57 = index_raw_pointer %55 : $Builtin.RawPointer, %56 : $Builtin.Word // user: %62
  %58 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %59
  %59 = builtin "sextOrBitCast_Word_Int64"(%58 : $Builtin.Word) : $Builtin.Int64 // users: %62, %60
  %60 = builtin "cmp_slt_Int64"(%59 : $Builtin.Int64, %31 : $Builtin.Int64) : $Builtin.Int1 // user: %61
  cond_fail %60 : $Builtin.Int1, "Negative value is not representable" // id: %61
  %62 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%57 : $Builtin.RawPointer, %54 : $Builtin.RawPointer, %59 : $Builtin.Int64, %51 : $Builtin.Int1) : $()
  dealloc_stack %52 : $*UInt8                     // id: %63
  br bb6(%48 : $Builtin.Int64)                    // id: %64

bb8:                                              // Preds: bb6
  dealloc_stack %37 : $*Optional<UInt8>           // id: %65
  %66 = struct_element_addr %21 : $*IndexingIterator<Array<UInt8>>, #IndexingIterator._elements // user: %67
  %67 = struct_element_addr %66 : $*Array<UInt8>, #Array._buffer // user: %68
  %68 = struct_element_addr %67 : $*_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %69
  %69 = load %68 : $*__ContiguousArrayStorageBase // user: %70
  strong_release %69 : $__ContiguousArrayStorageBase // id: %70
  dealloc_stack %21 : $*IndexingIterator<Array<UInt8>> // id: %71
  dealloc_stack %7 : $*Optional<()>               // id: %72
  br bb5                                          // id: %73
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #1556, stage HighLevel,Function+EarlyLoopOpt, pass 18: GenericSpecializer (generic-specializer)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
// %0                                             // user: %3
// %1                                             // users: %9, %4
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = alloc_stack $Array<UInt8>                  // users: %13, %9, %24, %38, %10, %3
  store %0 to %2 : $*Array<UInt8>                 // id: %3
  %4 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %5
  switch_enum %4 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb2 // id: %5

// %6                                             // users: %9, %60
bb1(%6 : $UnsafeMutableRawPointer):               // Preds: bb0
  %7 = alloc_stack $Optional<()>                  // users: %15, %77, %21, %17
  // function_ref specialized closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %8 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFySRyADGXEfU_SayADG_TG5 : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // user: %9
  %9 = partial_apply [callee_guaranteed] [on_stack] %8(%2, %1, %6) : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // users: %10, %16
  %10 = mark_dependence %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) on %2 : $*Array<UInt8> // user: %11
  %11 = convert_function %10 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) to $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()> // user: %14
  // function_ref specialized protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance [A]
  %12 = function_ref @$sSayxGSTsST32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFTWs5UInt8V_ytTg5 : $@convention(witness_method: Sequence) (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()>, @guaranteed Array<UInt8>) -> (Optional<()>, @error any Error) // user: %14
  %13 = load %2 : $*Array<UInt8>                  // user: %14
  %14 = apply [nothrow] %12(%11, %13) : $@convention(witness_method: Sequence) (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()>, @guaranteed Array<UInt8>) -> (Optional<()>, @error any Error) // user: %15
  store %14 to %7 : $*Optional<()>                // id: %15
  dealloc_stack %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) // id: %16
  %17 = load %7 : $*Optional<()>                  // user: %18
  switch_enum %17 : $Optional<()>, case #Optional.some!enumelt: bb3, case #Optional.none!enumelt: bb4 // id: %18

bb2:                                              // Preds: bb0
  br bb5                                          // id: %19

bb3(%20 : $()):                                   // Preds: bb1
  dealloc_stack %7 : $*Optional<()>               // id: %21
  br bb5                                          // id: %22

bb4:                                              // Preds: bb1
  %23 = alloc_stack $IndexingIterator<Array<UInt8>> // users: %43, %33, %71, %76
  %24 = load %2 : $*Array<UInt8>                  // users: %29, %25
  %25 = struct_extract %24 : $Array<UInt8>, #Array._buffer // user: %26
  %26 = struct_extract %25 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %27
  strong_retain %26 : $__ContiguousArrayStorageBase // id: %27
  %28 = alloc_stack $Array<UInt8>                 // users: %31, %29, %34
  store %24 to %28 : $*Array<UInt8>               // id: %29
  // function_ref specialized protocol witness for Sequence.makeIterator() in conformance [A]
  %30 = function_ref @$sSayxGSTsST12makeIterator0B0QzyFTWs5UInt8V_Tg5 : $@convention(witness_method: Sequence) (@owned Array<UInt8>) -> @owned IndexingIterator<Array<UInt8>> // user: %32
  %31 = load %28 : $*Array<UInt8>                 // user: %32
  %32 = apply %30(%31) : $@convention(witness_method: Sequence) (@owned Array<UInt8>) -> @owned IndexingIterator<Array<UInt8>> // user: %33
  store %32 to %23 : $*IndexingIterator<Array<UInt8>> // id: %33
  dealloc_stack %28 : $*Array<UInt8>              // id: %34
  %35 = integer_literal $Builtin.Int64, 0         // users: %36, %65
  br bb6(%35 : $Builtin.Int64)                    // id: %36

bb5:                                              // Preds: bb2 bb8 bb3
  %37 = tuple ()                                  // user: %39
  dealloc_stack %2 : $*Array<UInt8>               // id: %38
  return %37 : $()                                // id: %39

// %40                                            // users: %52, %61
bb6(%40 : $Builtin.Int64):                        // Preds: bb4 bb7
  %41 = alloc_stack $Optional<UInt8>              // users: %44, %70, %49, %45
  // function_ref specialized protocol witness for IteratorProtocol.next() in conformance IndexingIterator<A>
  %42 = function_ref @$ss16IndexingIteratorVyxGStsSt4next7ElementQzSgyFTWSays5UInt8VG_Tg5 : $@convention(witness_method: IteratorProtocol) (@inout IndexingIterator<Array<UInt8>>) -> Optional<UInt8> // user: %43
  %43 = apply %42(%23) : $@convention(witness_method: IteratorProtocol) (@inout IndexingIterator<Array<UInt8>>) -> Optional<UInt8> // user: %44
  store %43 to %41 : $*Optional<UInt8>            // id: %44
  %45 = load %41 : $*Optional<UInt8>              // users: %46, %48
  switch_enum %45 : $Optional<UInt8>, case #Optional.some!enumelt: bb7, case #Optional.none!enumelt: bb8 // id: %46

bb7(%47 : $UInt8):                                // Preds: bb6
  %48 = unchecked_enum_data %45 : $Optional<UInt8>, #Optional.some!enumelt // user: %58
  dealloc_stack %41 : $*Optional<UInt8>           // id: %49
  %50 = integer_literal $Builtin.Int64, 1         // user: %52
  %51 = integer_literal $Builtin.Int1, -1         // user: %52
  %52 = builtin "sadd_with_overflow_Int64"(%40 : $Builtin.Int64, %50 : $Builtin.Int64, %51 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %54, %53
  %53 = tuple_extract %52 : $(Builtin.Int64, Builtin.Int1), 0 // user: %69
  %54 = tuple_extract %52 : $(Builtin.Int64, Builtin.Int1), 1 // user: %55
  cond_fail %54 : $Builtin.Int1, "arithmetic overflow" // id: %55
  %56 = integer_literal $Builtin.Int1, 0          // user: %67
  %57 = alloc_stack $UInt8                        // users: %68, %59, %58
  store %48 to %57 : $*UInt8                      // id: %58
  %59 = address_to_pointer [stack_protection] %57 : $*UInt8 to $Builtin.RawPointer // user: %67
  %60 = struct_extract %6 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %62
  %61 = builtin "truncOrBitCast_Int64_Word"(%40 : $Builtin.Int64) : $Builtin.Word // user: %62
  %62 = index_raw_pointer %60 : $Builtin.RawPointer, %61 : $Builtin.Word // user: %67
  %63 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %64
  %64 = builtin "sextOrBitCast_Word_Int64"(%63 : $Builtin.Word) : $Builtin.Int64 // users: %67, %65
  %65 = builtin "cmp_slt_Int64"(%64 : $Builtin.Int64, %35 : $Builtin.Int64) : $Builtin.Int1 // user: %66
  cond_fail %65 : $Builtin.Int1, "Negative value is not representable" // id: %66
  %67 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%62 : $Builtin.RawPointer, %59 : $Builtin.RawPointer, %64 : $Builtin.Int64, %56 : $Builtin.Int1) : $()
  dealloc_stack %57 : $*UInt8                     // id: %68
  br bb6(%53 : $Builtin.Int64)                    // id: %69

bb8:                                              // Preds: bb6
  dealloc_stack %41 : $*Optional<UInt8>           // id: %70
  %71 = struct_element_addr %23 : $*IndexingIterator<Array<UInt8>>, #IndexingIterator._elements // user: %72
  %72 = struct_element_addr %71 : $*Array<UInt8>, #Array._buffer // user: %73
  %73 = struct_element_addr %72 : $*_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %74
  %74 = load %73 : $*__ContiguousArrayStorageBase // user: %75
  strong_release %74 : $__ContiguousArrayStorageBase // id: %75
  dealloc_stack %23 : $*IndexingIterator<Array<UInt8>> // id: %76
  dealloc_stack %7 : $*Optional<()>               // id: %77
  br bb5                                          // id: %78
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5880, stage HighLevel,Function+EarlyLoopOpt, pass 21: ComputeSideEffects (compute-side-effects)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // user: %3
// %1                                             // users: %9, %4
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = alloc_stack $Array<UInt8>                  // users: %13, %9, %24, %38, %10, %3
  store %0 to %2 : $*Array<UInt8>                 // id: %3
  %4 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %5
  switch_enum %4 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb2 // id: %5

// %6                                             // users: %9, %60
bb1(%6 : $UnsafeMutableRawPointer):               // Preds: bb0
  %7 = alloc_stack $Optional<()>                  // users: %15, %77, %21, %17
  // function_ref specialized closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %8 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFySRyADGXEfU_SayADG_TG5 : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // user: %9
  %9 = partial_apply [callee_guaranteed] [on_stack] %8(%2, %1, %6) : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // users: %10, %16
  %10 = mark_dependence %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) on %2 : $*Array<UInt8> // user: %11
  %11 = convert_function %10 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) to $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()> // user: %14
  // function_ref specialized protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance [A]
  %12 = function_ref @$sSayxGSTsST32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFTWs5UInt8V_ytTg5 : $@convention(witness_method: Sequence) (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()>, @guaranteed Array<UInt8>) -> (Optional<()>, @error any Error) // user: %14
  %13 = load %2 : $*Array<UInt8>                  // user: %14
  %14 = apply [nothrow] %12(%11, %13) : $@convention(witness_method: Sequence) (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()>, @guaranteed Array<UInt8>) -> (Optional<()>, @error any Error) // user: %15
  store %14 to %7 : $*Optional<()>                // id: %15
  dealloc_stack %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) // id: %16
  %17 = load %7 : $*Optional<()>                  // user: %18
  switch_enum %17 : $Optional<()>, case #Optional.some!enumelt: bb3, case #Optional.none!enumelt: bb4 // id: %18

bb2:                                              // Preds: bb0
  br bb5                                          // id: %19

bb3(%20 : $()):                                   // Preds: bb1
  dealloc_stack %7 : $*Optional<()>               // id: %21
  br bb5                                          // id: %22

bb4:                                              // Preds: bb1
  %23 = alloc_stack $IndexingIterator<Array<UInt8>> // users: %43, %33, %71, %76
  %24 = load %2 : $*Array<UInt8>                  // users: %29, %25
  %25 = struct_extract %24 : $Array<UInt8>, #Array._buffer // user: %26
  %26 = struct_extract %25 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %27
  strong_retain %26 : $__ContiguousArrayStorageBase // id: %27
  %28 = alloc_stack $Array<UInt8>                 // users: %31, %29, %34
  store %24 to %28 : $*Array<UInt8>               // id: %29
  // function_ref specialized protocol witness for Sequence.makeIterator() in conformance [A]
  %30 = function_ref @$sSayxGSTsST12makeIterator0B0QzyFTWs5UInt8V_Tg5 : $@convention(witness_method: Sequence) (@owned Array<UInt8>) -> @owned IndexingIterator<Array<UInt8>> // user: %32
  %31 = load %28 : $*Array<UInt8>                 // user: %32
  %32 = apply %30(%31) : $@convention(witness_method: Sequence) (@owned Array<UInt8>) -> @owned IndexingIterator<Array<UInt8>> // user: %33
  store %32 to %23 : $*IndexingIterator<Array<UInt8>> // id: %33
  dealloc_stack %28 : $*Array<UInt8>              // id: %34
  %35 = integer_literal $Builtin.Int64, 0         // users: %36, %65
  br bb6(%35 : $Builtin.Int64)                    // id: %36

bb5:                                              // Preds: bb2 bb8 bb3
  %37 = tuple ()                                  // user: %39
  dealloc_stack %2 : $*Array<UInt8>               // id: %38
  return %37 : $()                                // id: %39

// %40                                            // users: %52, %61
bb6(%40 : $Builtin.Int64):                        // Preds: bb4 bb7
  %41 = alloc_stack $Optional<UInt8>              // users: %44, %70, %49, %45
  // function_ref specialized protocol witness for IteratorProtocol.next() in conformance IndexingIterator<A>
  %42 = function_ref @$ss16IndexingIteratorVyxGStsSt4next7ElementQzSgyFTWSays5UInt8VG_Tg5 : $@convention(witness_method: IteratorProtocol) (@inout IndexingIterator<Array<UInt8>>) -> Optional<UInt8> // user: %43
  %43 = apply %42(%23) : $@convention(witness_method: IteratorProtocol) (@inout IndexingIterator<Array<UInt8>>) -> Optional<UInt8> // user: %44
  store %43 to %41 : $*Optional<UInt8>            // id: %44
  %45 = load %41 : $*Optional<UInt8>              // users: %46, %48
  switch_enum %45 : $Optional<UInt8>, case #Optional.some!enumelt: bb7, case #Optional.none!enumelt: bb8 // id: %46

bb7(%47 : $UInt8):                                // Preds: bb6
  %48 = unchecked_enum_data %45 : $Optional<UInt8>, #Optional.some!enumelt // user: %58
  dealloc_stack %41 : $*Optional<UInt8>           // id: %49
  %50 = integer_literal $Builtin.Int64, 1         // user: %52
  %51 = integer_literal $Builtin.Int1, -1         // user: %52
  %52 = builtin "sadd_with_overflow_Int64"(%40 : $Builtin.Int64, %50 : $Builtin.Int64, %51 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %54, %53
  %53 = tuple_extract %52 : $(Builtin.Int64, Builtin.Int1), 0 // user: %69
  %54 = tuple_extract %52 : $(Builtin.Int64, Builtin.Int1), 1 // user: %55
  cond_fail %54 : $Builtin.Int1, "arithmetic overflow" // id: %55
  %56 = integer_literal $Builtin.Int1, 0          // user: %67
  %57 = alloc_stack $UInt8                        // users: %68, %59, %58
  store %48 to %57 : $*UInt8                      // id: %58
  %59 = address_to_pointer [stack_protection] %57 : $*UInt8 to $Builtin.RawPointer // user: %67
  %60 = struct_extract %6 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %62
  %61 = builtin "truncOrBitCast_Int64_Word"(%40 : $Builtin.Int64) : $Builtin.Word // user: %62
  %62 = index_raw_pointer %60 : $Builtin.RawPointer, %61 : $Builtin.Word // user: %67
  %63 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %64
  %64 = builtin "sextOrBitCast_Word_Int64"(%63 : $Builtin.Word) : $Builtin.Int64 // users: %67, %65
  %65 = builtin "cmp_slt_Int64"(%64 : $Builtin.Int64, %35 : $Builtin.Int64) : $Builtin.Int1 // user: %66
  cond_fail %65 : $Builtin.Int1, "Negative value is not representable" // id: %66
  %67 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%62 : $Builtin.RawPointer, %59 : $Builtin.RawPointer, %64 : $Builtin.Int64, %56 : $Builtin.Int1) : $()
  dealloc_stack %57 : $*UInt8                     // id: %68
  br bb6(%53 : $Builtin.Int64)                    // id: %69

bb8:                                              // Preds: bb6
  dealloc_stack %41 : $*Optional<UInt8>           // id: %70
  %71 = struct_element_addr %23 : $*IndexingIterator<Array<UInt8>>, #IndexingIterator._elements // user: %72
  %72 = struct_element_addr %71 : $*Array<UInt8>, #Array._buffer // user: %73
  %73 = struct_element_addr %72 : $*_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %74
  %74 = load %73 : $*__ContiguousArrayStorageBase // user: %75
  strong_release %74 : $__ContiguousArrayStorageBase // id: %75
  dealloc_stack %23 : $*IndexingIterator<Array<UInt8>> // id: %76
  dealloc_stack %7 : $*Optional<()>               // id: %77
  br bb5                                          // id: %78
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5884, stage HighLevel,Function+EarlyLoopOpt, pass 25: EarlyPerfInliner (early-inline)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // user: %3
// %1                                             // users: %9, %4
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = alloc_stack $Array<UInt8>                  // users: %12, %9, %27, %45, %10, %3
  store %0 to %2 : $*Array<UInt8>                 // id: %3
  %4 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %5
  switch_enum %4 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %5

// %6                                             // users: %9, %95
bb1(%6 : $UnsafeMutableRawPointer):               // Preds: bb0
  %7 = alloc_stack $Optional<()>                  // users: %16, %112, %24, %18
  // function_ref specialized closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %8 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFySRyADGXEfU_SayADG_TG5 : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // user: %9
  %9 = partial_apply [callee_guaranteed] [on_stack] %8(%2, %1, %6) : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // users: %10, %17
  %10 = mark_dependence %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) on %2 : $*Array<UInt8> // user: %11
  %11 = convert_function %10 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) to $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()> // user: %14
  %12 = load %2 : $*Array<UInt8>                  // user: %14
  // function_ref specialized Array.withContiguousStorageIfAvailable<A>(_:)
  %13 = function_ref @$sSa32withContiguousStorageIfAvailableyqd__Sgqd__SRyxGKXEKlFs5UInt8V_ytTg5 : $@convention(method) (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()>, @guaranteed Array<UInt8>) -> (Optional<()>, @error any Error) // user: %14
  try_apply %13(%11, %12) : $@convention(method) (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()>, @guaranteed Array<UInt8>) -> (Optional<()>, @error any Error), normal bb2, error bb3 // id: %14

// %15                                            // user: %16
bb2(%15 : $Optional<()>):                         // Preds: bb1
  store %15 to %7 : $*Optional<()>                // id: %16
  dealloc_stack %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) // id: %17
  %18 = load %7 : $*Optional<()>                  // user: %19
  switch_enum %18 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %19

bb3(%20 : $any Error):                            // Preds: bb1
  unreachable                                     // id: %21

bb4:                                              // Preds: bb0
  br bb7                                          // id: %22

bb5(%23 : $()):                                   // Preds: bb2
  dealloc_stack %7 : $*Optional<()>               // id: %24
  br bb7                                          // id: %25

bb6:                                              // Preds: bb2
  %26 = alloc_stack $IndexingIterator<Array<UInt8>> // users: %53, %50, %40, %106, %111
  %27 = load %2 : $*Array<UInt8>                  // users: %32, %28
  %28 = struct_extract %27 : $Array<UInt8>, #Array._buffer // user: %29
  %29 = struct_extract %28 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %30
  strong_retain %29 : $__ContiguousArrayStorageBase // id: %30
  %31 = alloc_stack $Array<UInt8>                 // users: %33, %32, %41
  store %27 to %31 : $*Array<UInt8>               // id: %32
  %33 = load %31 : $*Array<UInt8>                 // users: %36, %35
  // function_ref specialized Array.startIndex.getter
  %34 = function_ref @$sSa10startIndexSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %35
  %35 = apply %34(%33) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // users: %39, %36
  %36 = struct $IndexingIterator<Array<UInt8>> (%33 : $Array<UInt8>, %35 : $Int) // users: %38, %37
  %37 = struct_extract %36 : $IndexingIterator<Array<UInt8>>, #IndexingIterator._elements // user: %39
  %38 = struct_extract %36 : $IndexingIterator<Array<UInt8>>, #IndexingIterator._position
  %39 = struct $IndexingIterator<Array<UInt8>> (%37 : $Array<UInt8>, %35 : $Int) // user: %40
  store %39 to %26 : $*IndexingIterator<Array<UInt8>> // id: %40
  dealloc_stack %31 : $*Array<UInt8>              // id: %41
  %42 = integer_literal $Builtin.Int64, 0         // users: %43, %100
  br bb8(%42 : $Builtin.Int64)                    // id: %43

bb7:                                              // Preds: bb4 bb13 bb5
  %44 = tuple ()                                  // user: %46
  dealloc_stack %2 : $*Array<UInt8>               // id: %45
  return %44 : $()                                // id: %46

// %47                                            // users: %87, %96
bb8(%47 : $Builtin.Int64):                        // Preds: bb6 bb12
  %48 = alloc_stack $Optional<UInt8>              // users: %79, %105, %84, %80
  %49 = alloc_stack $Optional<UInt8>              // users: %75, %66, %78, %77, %60
  %50 = struct_element_addr %26 : $*IndexingIterator<Array<UInt8>>, #IndexingIterator._position // users: %73, %51
  %51 = load %50 : $*Int                          // users: %64, %52
  %52 = struct_extract %51 : $Int, #Int._value    // user: %58
  %53 = struct_element_addr %26 : $*IndexingIterator<Array<UInt8>>, #IndexingIterator._elements // users: %70, %62, %54
  %54 = load %53 : $*Array<UInt8>                 // user: %56
  // function_ref specialized Array.endIndex.getter
  %55 = function_ref @$sSa8endIndexSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %56
  %56 = apply %55(%54) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %57
  %57 = struct_extract %56 : $Int, #Int._value    // user: %58
  %58 = builtin "cmp_eq_Int64"(%52 : $Builtin.Int64, %57 : $Builtin.Int64) : $Builtin.Int1 // user: %59
  cond_br %58, bb9, bb10                          // id: %59

bb9:                                              // Preds: bb8
  inject_enum_addr %49 : $*Optional<UInt8>, #Optional.none!enumelt // id: %60
  br bb11                                         // id: %61

bb10:                                             // Preds: bb8
  %62 = load %53 : $*Array<UInt8>                 // user: %64
  // function_ref specialized Array.subscript.read
  %63 = function_ref @$sSayxSicirs5UInt8V_Tg5 : $@yield_once @convention(method) (Int, @guaranteed Array<UInt8>) -> @yields @in_guaranteed UInt8 // user: %64
  (%64, %65) = begin_apply %63(%51, %62) : $@yield_once @convention(method) (Int, @guaranteed Array<UInt8>) -> @yields @in_guaranteed UInt8 // users: %67, %69
  %66 = init_enum_data_addr %49 : $*Optional<UInt8>, #Optional.some!enumelt // user: %68
  %67 = load %64 : $*UInt8                        // user: %68
  store %67 to %66 : $*UInt8                      // id: %68
  end_apply %65                                   // id: %69
  %70 = load %53 : $*Array<UInt8>                 // users: %74, %73, %71
  retain_value %70 : $Array<UInt8>                // id: %71
  // function_ref specialized Array.formIndex(after:)
  %72 = function_ref @$sSa9formIndex5afterySiz_tFs5UInt8V_Tg5 : $@convention(method) (@inout Int, @guaranteed Array<UInt8>) -> () // user: %73
  %73 = apply %72(%50, %70) : $@convention(method) (@inout Int, @guaranteed Array<UInt8>) -> ()
  release_value %70 : $Array<UInt8>               // id: %74
  inject_enum_addr %49 : $*Optional<UInt8>, #Optional.some!enumelt // id: %75
  br bb11                                         // id: %76

bb11:                                             // Preds: bb10 bb9
  %77 = load %49 : $*Optional<UInt8>              // user: %79
  dealloc_stack %49 : $*Optional<UInt8>           // id: %78
  store %77 to %48 : $*Optional<UInt8>            // id: %79
  %80 = load %48 : $*Optional<UInt8>              // users: %81, %83
  switch_enum %80 : $Optional<UInt8>, case #Optional.some!enumelt: bb12, case #Optional.none!enumelt: bb13 // id: %81

bb12(%82 : $UInt8):                               // Preds: bb11
  %83 = unchecked_enum_data %80 : $Optional<UInt8>, #Optional.some!enumelt // user: %93
  dealloc_stack %48 : $*Optional<UInt8>           // id: %84
  %85 = integer_literal $Builtin.Int64, 1         // user: %87
  %86 = integer_literal $Builtin.Int1, -1         // user: %87
  %87 = builtin "sadd_with_overflow_Int64"(%47 : $Builtin.Int64, %85 : $Builtin.Int64, %86 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %89, %88
  %88 = tuple_extract %87 : $(Builtin.Int64, Builtin.Int1), 0 // user: %104
  %89 = tuple_extract %87 : $(Builtin.Int64, Builtin.Int1), 1 // user: %90
  cond_fail %89 : $Builtin.Int1, "arithmetic overflow" // id: %90
  %91 = integer_literal $Builtin.Int1, 0          // user: %102
  %92 = alloc_stack $UInt8                        // users: %103, %94, %93
  store %83 to %92 : $*UInt8                      // id: %93
  %94 = address_to_pointer [stack_protection] %92 : $*UInt8 to $Builtin.RawPointer // user: %102
  %95 = struct_extract %6 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %97
  %96 = builtin "truncOrBitCast_Int64_Word"(%47 : $Builtin.Int64) : $Builtin.Word // user: %97
  %97 = index_raw_pointer %95 : $Builtin.RawPointer, %96 : $Builtin.Word // user: %102
  %98 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %99
  %99 = builtin "sextOrBitCast_Word_Int64"(%98 : $Builtin.Word) : $Builtin.Int64 // users: %102, %100
  %100 = builtin "cmp_slt_Int64"(%99 : $Builtin.Int64, %42 : $Builtin.Int64) : $Builtin.Int1 // user: %101
  cond_fail %100 : $Builtin.Int1, "Negative value is not representable" // id: %101
  %102 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%97 : $Builtin.RawPointer, %94 : $Builtin.RawPointer, %99 : $Builtin.Int64, %91 : $Builtin.Int1) : $()
  dealloc_stack %92 : $*UInt8                     // id: %103
  br bb8(%88 : $Builtin.Int64)                    // id: %104

bb13:                                             // Preds: bb11
  dealloc_stack %48 : $*Optional<UInt8>           // id: %105
  %106 = struct_element_addr %26 : $*IndexingIterator<Array<UInt8>>, #IndexingIterator._elements // user: %107
  %107 = struct_element_addr %106 : $*Array<UInt8>, #Array._buffer // user: %108
  %108 = struct_element_addr %107 : $*_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %109
  %109 = load %108 : $*__ContiguousArrayStorageBase // user: %110
  strong_release %109 : $__ContiguousArrayStorageBase // id: %110
  dealloc_stack %26 : $*IndexingIterator<Array<UInt8>> // id: %111
  dealloc_stack %7 : $*Optional<()>               // id: %112
  br bb7                                          // id: %113
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5890, stage HighLevel,Function+EarlyLoopOpt, pass 5: DCE (dce)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // user: %3
// %1                                             // users: %9, %4
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = alloc_stack $Array<UInt8>                  // users: %12, %9, %27, %44, %10, %3
  store %0 to %2 : $*Array<UInt8>                 // id: %3
  %4 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %5
  switch_enum %4 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %5

// %6                                             // users: %9, %94
bb1(%6 : $UnsafeMutableRawPointer):               // Preds: bb0
  %7 = alloc_stack $Optional<()>                  // users: %16, %111, %24, %18
  // function_ref specialized closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %8 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFySRyADGXEfU_SayADG_TG5 : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // user: %9
  %9 = partial_apply [callee_guaranteed] [on_stack] %8(%2, %1, %6) : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // users: %10, %17
  %10 = mark_dependence %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) on %2 : $*Array<UInt8> // user: %11
  %11 = convert_function %10 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) to $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()> // user: %14
  %12 = load %2 : $*Array<UInt8>                  // user: %14
  // function_ref specialized Array.withContiguousStorageIfAvailable<A>(_:)
  %13 = function_ref @$sSa32withContiguousStorageIfAvailableyqd__Sgqd__SRyxGKXEKlFs5UInt8V_ytTg5 : $@convention(method) (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()>, @guaranteed Array<UInt8>) -> (Optional<()>, @error any Error) // user: %14
  try_apply %13(%11, %12) : $@convention(method) (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()>, @guaranteed Array<UInt8>) -> (Optional<()>, @error any Error), normal bb2, error bb3 // id: %14

// %15                                            // user: %16
bb2(%15 : $Optional<()>):                         // Preds: bb1
  store %15 to %7 : $*Optional<()>                // id: %16
  dealloc_stack %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) // id: %17
  %18 = load %7 : $*Optional<()>                  // user: %19
  switch_enum %18 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %19

bb3(%20 : $any Error):                            // Preds: bb1
  unreachable                                     // id: %21

bb4:                                              // Preds: bb0
  br bb7                                          // id: %22

bb5(%23 : $()):                                   // Preds: bb2
  dealloc_stack %7 : $*Optional<()>               // id: %24
  br bb7                                          // id: %25

bb6:                                              // Preds: bb2
  %26 = alloc_stack $IndexingIterator<Array<UInt8>> // users: %52, %49, %39, %105, %110
  %27 = load %2 : $*Array<UInt8>                  // users: %32, %28
  %28 = struct_extract %27 : $Array<UInt8>, #Array._buffer // user: %29
  %29 = struct_extract %28 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %30
  strong_retain %29 : $__ContiguousArrayStorageBase // id: %30
  %31 = alloc_stack $Array<UInt8>                 // users: %33, %32, %40
  store %27 to %31 : $*Array<UInt8>               // id: %32
  %33 = load %31 : $*Array<UInt8>                 // users: %36, %35
  // function_ref specialized Array.startIndex.getter
  %34 = function_ref @$sSa10startIndexSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %35
  %35 = apply %34(%33) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // users: %38, %36
  %36 = struct $IndexingIterator<Array<UInt8>> (%33 : $Array<UInt8>, %35 : $Int) // user: %37
  %37 = struct_extract %36 : $IndexingIterator<Array<UInt8>>, #IndexingIterator._elements // user: %38
  %38 = struct $IndexingIterator<Array<UInt8>> (%37 : $Array<UInt8>, %35 : $Int) // user: %39
  store %38 to %26 : $*IndexingIterator<Array<UInt8>> // id: %39
  dealloc_stack %31 : $*Array<UInt8>              // id: %40
  %41 = integer_literal $Builtin.Int64, 0         // users: %42, %99
  br bb8(%41 : $Builtin.Int64)                    // id: %42

bb7:                                              // Preds: bb4 bb13 bb5
  %43 = tuple ()                                  // user: %45
  dealloc_stack %2 : $*Array<UInt8>               // id: %44
  return %43 : $()                                // id: %45

// %46                                            // users: %86, %95
bb8(%46 : $Builtin.Int64):                        // Preds: bb6 bb12
  %47 = alloc_stack $Optional<UInt8>              // users: %78, %104, %83, %79
  %48 = alloc_stack $Optional<UInt8>              // users: %74, %65, %77, %76, %59
  %49 = struct_element_addr %26 : $*IndexingIterator<Array<UInt8>>, #IndexingIterator._position // users: %72, %50
  %50 = load %49 : $*Int                          // users: %63, %51
  %51 = struct_extract %50 : $Int, #Int._value    // user: %57
  %52 = struct_element_addr %26 : $*IndexingIterator<Array<UInt8>>, #IndexingIterator._elements // users: %69, %61, %53
  %53 = load %52 : $*Array<UInt8>                 // user: %55
  // function_ref specialized Array.endIndex.getter
  %54 = function_ref @$sSa8endIndexSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %55
  %55 = apply %54(%53) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %56
  %56 = struct_extract %55 : $Int, #Int._value    // user: %57
  %57 = builtin "cmp_eq_Int64"(%51 : $Builtin.Int64, %56 : $Builtin.Int64) : $Builtin.Int1 // user: %58
  cond_br %57, bb9, bb10                          // id: %58

bb9:                                              // Preds: bb8
  inject_enum_addr %48 : $*Optional<UInt8>, #Optional.none!enumelt // id: %59
  br bb11                                         // id: %60

bb10:                                             // Preds: bb8
  %61 = load %52 : $*Array<UInt8>                 // user: %63
  // function_ref specialized Array.subscript.read
  %62 = function_ref @$sSayxSicirs5UInt8V_Tg5 : $@yield_once @convention(method) (Int, @guaranteed Array<UInt8>) -> @yields @in_guaranteed UInt8 // user: %63
  (%63, %64) = begin_apply %62(%50, %61) : $@yield_once @convention(method) (Int, @guaranteed Array<UInt8>) -> @yields @in_guaranteed UInt8 // users: %66, %68
  %65 = init_enum_data_addr %48 : $*Optional<UInt8>, #Optional.some!enumelt // user: %67
  %66 = load %63 : $*UInt8                        // user: %67
  store %66 to %65 : $*UInt8                      // id: %67
  end_apply %64                                   // id: %68
  %69 = load %52 : $*Array<UInt8>                 // users: %73, %72, %70
  retain_value %69 : $Array<UInt8>                // id: %70
  // function_ref specialized Array.formIndex(after:)
  %71 = function_ref @$sSa9formIndex5afterySiz_tFs5UInt8V_Tg5 : $@convention(method) (@inout Int, @guaranteed Array<UInt8>) -> () // user: %72
  %72 = apply %71(%49, %69) : $@convention(method) (@inout Int, @guaranteed Array<UInt8>) -> ()
  release_value %69 : $Array<UInt8>               // id: %73
  inject_enum_addr %48 : $*Optional<UInt8>, #Optional.some!enumelt // id: %74
  br bb11                                         // id: %75

bb11:                                             // Preds: bb10 bb9
  %76 = load %48 : $*Optional<UInt8>              // user: %78
  dealloc_stack %48 : $*Optional<UInt8>           // id: %77
  store %76 to %47 : $*Optional<UInt8>            // id: %78
  %79 = load %47 : $*Optional<UInt8>              // users: %80, %82
  switch_enum %79 : $Optional<UInt8>, case #Optional.some!enumelt: bb12, case #Optional.none!enumelt: bb13 // id: %80

bb12(%81 : $UInt8):                               // Preds: bb11
  %82 = unchecked_enum_data %79 : $Optional<UInt8>, #Optional.some!enumelt // user: %92
  dealloc_stack %47 : $*Optional<UInt8>           // id: %83
  %84 = integer_literal $Builtin.Int64, 1         // user: %86
  %85 = integer_literal $Builtin.Int1, -1         // user: %86
  %86 = builtin "sadd_with_overflow_Int64"(%46 : $Builtin.Int64, %84 : $Builtin.Int64, %85 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %88, %87
  %87 = tuple_extract %86 : $(Builtin.Int64, Builtin.Int1), 0 // user: %103
  %88 = tuple_extract %86 : $(Builtin.Int64, Builtin.Int1), 1 // user: %89
  cond_fail %88 : $Builtin.Int1, "arithmetic overflow" // id: %89
  %90 = integer_literal $Builtin.Int1, 0          // user: %101
  %91 = alloc_stack $UInt8                        // users: %102, %93, %92
  store %82 to %91 : $*UInt8                      // id: %92
  %93 = address_to_pointer [stack_protection] %91 : $*UInt8 to $Builtin.RawPointer // user: %101
  %94 = struct_extract %6 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %96
  %95 = builtin "truncOrBitCast_Int64_Word"(%46 : $Builtin.Int64) : $Builtin.Word // user: %96
  %96 = index_raw_pointer %94 : $Builtin.RawPointer, %95 : $Builtin.Word // user: %101
  %97 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %98
  %98 = builtin "sextOrBitCast_Word_Int64"(%97 : $Builtin.Word) : $Builtin.Int64 // users: %101, %99
  %99 = builtin "cmp_slt_Int64"(%98 : $Builtin.Int64, %41 : $Builtin.Int64) : $Builtin.Int1 // user: %100
  cond_fail %99 : $Builtin.Int1, "Negative value is not representable" // id: %100
  %101 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%96 : $Builtin.RawPointer, %93 : $Builtin.RawPointer, %98 : $Builtin.Int64, %90 : $Builtin.Int1) : $()
  dealloc_stack %91 : $*UInt8                     // id: %102
  br bb8(%87 : $Builtin.Int64)                    // id: %103

bb13:                                             // Preds: bb11
  dealloc_stack %47 : $*Optional<UInt8>           // id: %104
  %105 = struct_element_addr %26 : $*IndexingIterator<Array<UInt8>>, #IndexingIterator._elements // user: %106
  %106 = struct_element_addr %105 : $*Array<UInt8>, #Array._buffer // user: %107
  %107 = struct_element_addr %106 : $*_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %108
  %108 = load %107 : $*__ContiguousArrayStorageBase // user: %109
  strong_release %108 : $__ContiguousArrayStorageBase // id: %109
  dealloc_stack %26 : $*IndexingIterator<Array<UInt8>> // id: %110
  dealloc_stack %7 : $*Optional<()>               // id: %111
  br bb7                                          // id: %112
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5892, stage HighLevel,Function+EarlyLoopOpt, pass 7: LowerAggregateInstrs (lower-aggregate-instrs)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // user: %3
// %1                                             // users: %9, %4
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = alloc_stack $Array<UInt8>                  // users: %12, %9, %27, %44, %10, %3
  store %0 to %2 : $*Array<UInt8>                 // id: %3
  %4 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %5
  switch_enum %4 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %5

// %6                                             // users: %9, %98
bb1(%6 : $UnsafeMutableRawPointer):               // Preds: bb0
  %7 = alloc_stack $Optional<()>                  // users: %16, %115, %24, %18
  // function_ref specialized closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %8 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFySRyADGXEfU_SayADG_TG5 : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // user: %9
  %9 = partial_apply [callee_guaranteed] [on_stack] %8(%2, %1, %6) : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // users: %10, %17
  %10 = mark_dependence %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) on %2 : $*Array<UInt8> // user: %11
  %11 = convert_function %10 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) to $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()> // user: %14
  %12 = load %2 : $*Array<UInt8>                  // user: %14
  // function_ref specialized Array.withContiguousStorageIfAvailable<A>(_:)
  %13 = function_ref @$sSa32withContiguousStorageIfAvailableyqd__Sgqd__SRyxGKXEKlFs5UInt8V_ytTg5 : $@convention(method) (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()>, @guaranteed Array<UInt8>) -> (Optional<()>, @error any Error) // user: %14
  try_apply %13(%11, %12) : $@convention(method) (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()>, @guaranteed Array<UInt8>) -> (Optional<()>, @error any Error), normal bb2, error bb3 // id: %14

// %15                                            // user: %16
bb2(%15 : $Optional<()>):                         // Preds: bb1
  store %15 to %7 : $*Optional<()>                // id: %16
  dealloc_stack %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) // id: %17
  %18 = load %7 : $*Optional<()>                  // user: %19
  switch_enum %18 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %19

bb3(%20 : $any Error):                            // Preds: bb1
  unreachable                                     // id: %21

bb4:                                              // Preds: bb0
  br bb7                                          // id: %22

bb5(%23 : $()):                                   // Preds: bb2
  dealloc_stack %7 : $*Optional<()>               // id: %24
  br bb7                                          // id: %25

bb6:                                              // Preds: bb2
  %26 = alloc_stack $IndexingIterator<Array<UInt8>> // users: %52, %49, %39, %109, %114
  %27 = load %2 : $*Array<UInt8>                  // users: %32, %28
  %28 = struct_extract %27 : $Array<UInt8>, #Array._buffer // user: %29
  %29 = struct_extract %28 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %30
  strong_retain %29 : $__ContiguousArrayStorageBase // id: %30
  %31 = alloc_stack $Array<UInt8>                 // users: %33, %32, %40
  store %27 to %31 : $*Array<UInt8>               // id: %32
  %33 = load %31 : $*Array<UInt8>                 // users: %36, %35
  // function_ref specialized Array.startIndex.getter
  %34 = function_ref @$sSa10startIndexSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %35
  %35 = apply %34(%33) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // users: %38, %36
  %36 = struct $IndexingIterator<Array<UInt8>> (%33 : $Array<UInt8>, %35 : $Int) // user: %37
  %37 = struct_extract %36 : $IndexingIterator<Array<UInt8>>, #IndexingIterator._elements // user: %38
  %38 = struct $IndexingIterator<Array<UInt8>> (%37 : $Array<UInt8>, %35 : $Int) // user: %39
  store %38 to %26 : $*IndexingIterator<Array<UInt8>> // id: %39
  dealloc_stack %31 : $*Array<UInt8>              // id: %40
  %41 = integer_literal $Builtin.Int64, 0         // users: %42, %103
  br bb8(%41 : $Builtin.Int64)                    // id: %42

bb7:                                              // Preds: bb4 bb13 bb5
  %43 = tuple ()                                  // user: %45
  dealloc_stack %2 : $*Array<UInt8>               // id: %44
  return %43 : $()                                // id: %45

// %46                                            // users: %90, %99
bb8(%46 : $Builtin.Int64):                        // Preds: bb6 bb12
  %47 = alloc_stack $Optional<UInt8>              // users: %82, %108, %87, %83
  %48 = alloc_stack $Optional<UInt8>              // users: %78, %65, %81, %80, %59
  %49 = struct_element_addr %26 : $*IndexingIterator<Array<UInt8>>, #IndexingIterator._position // users: %74, %50
  %50 = load %49 : $*Int                          // users: %63, %51
  %51 = struct_extract %50 : $Int, #Int._value    // user: %57
  %52 = struct_element_addr %26 : $*IndexingIterator<Array<UInt8>>, #IndexingIterator._elements // users: %69, %61, %53
  %53 = load %52 : $*Array<UInt8>                 // user: %55
  // function_ref specialized Array.endIndex.getter
  %54 = function_ref @$sSa8endIndexSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %55
  %55 = apply %54(%53) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %56
  %56 = struct_extract %55 : $Int, #Int._value    // user: %57
  %57 = builtin "cmp_eq_Int64"(%51 : $Builtin.Int64, %56 : $Builtin.Int64) : $Builtin.Int1 // user: %58
  cond_br %57, bb9, bb10                          // id: %58

bb9:                                              // Preds: bb8
  inject_enum_addr %48 : $*Optional<UInt8>, #Optional.none!enumelt // id: %59
  br bb11                                         // id: %60

bb10:                                             // Preds: bb8
  %61 = load %52 : $*Array<UInt8>                 // user: %63
  // function_ref specialized Array.subscript.read
  %62 = function_ref @$sSayxSicirs5UInt8V_Tg5 : $@yield_once @convention(method) (Int, @guaranteed Array<UInt8>) -> @yields @in_guaranteed UInt8 // user: %63
  (%63, %64) = begin_apply %62(%50, %61) : $@yield_once @convention(method) (Int, @guaranteed Array<UInt8>) -> @yields @in_guaranteed UInt8 // users: %66, %68
  %65 = init_enum_data_addr %48 : $*Optional<UInt8>, #Optional.some!enumelt // user: %67
  %66 = load %63 : $*UInt8                        // user: %67
  store %66 to %65 : $*UInt8                      // id: %67
  end_apply %64                                   // id: %68
  %69 = load %52 : $*Array<UInt8>                 // users: %75, %70, %74
  %70 = struct_extract %69 : $Array<UInt8>, #Array._buffer // user: %71
  %71 = struct_extract %70 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %72
  strong_retain %71 : $__ContiguousArrayStorageBase // id: %72
  // function_ref specialized Array.formIndex(after:)
  %73 = function_ref @$sSa9formIndex5afterySiz_tFs5UInt8V_Tg5 : $@convention(method) (@inout Int, @guaranteed Array<UInt8>) -> () // user: %74
  %74 = apply %73(%49, %69) : $@convention(method) (@inout Int, @guaranteed Array<UInt8>) -> ()
  %75 = struct_extract %69 : $Array<UInt8>, #Array._buffer // user: %76
  %76 = struct_extract %75 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %77
  strong_release %76 : $__ContiguousArrayStorageBase // id: %77
  inject_enum_addr %48 : $*Optional<UInt8>, #Optional.some!enumelt // id: %78
  br bb11                                         // id: %79

bb11:                                             // Preds: bb10 bb9
  %80 = load %48 : $*Optional<UInt8>              // user: %82
  dealloc_stack %48 : $*Optional<UInt8>           // id: %81
  store %80 to %47 : $*Optional<UInt8>            // id: %82
  %83 = load %47 : $*Optional<UInt8>              // users: %84, %86
  switch_enum %83 : $Optional<UInt8>, case #Optional.some!enumelt: bb12, case #Optional.none!enumelt: bb13 // id: %84

bb12(%85 : $UInt8):                               // Preds: bb11
  %86 = unchecked_enum_data %83 : $Optional<UInt8>, #Optional.some!enumelt // user: %96
  dealloc_stack %47 : $*Optional<UInt8>           // id: %87
  %88 = integer_literal $Builtin.Int64, 1         // user: %90
  %89 = integer_literal $Builtin.Int1, -1         // user: %90
  %90 = builtin "sadd_with_overflow_Int64"(%46 : $Builtin.Int64, %88 : $Builtin.Int64, %89 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %92, %91
  %91 = tuple_extract %90 : $(Builtin.Int64, Builtin.Int1), 0 // user: %107
  %92 = tuple_extract %90 : $(Builtin.Int64, Builtin.Int1), 1 // user: %93
  cond_fail %92 : $Builtin.Int1, "arithmetic overflow" // id: %93
  %94 = integer_literal $Builtin.Int1, 0          // user: %105
  %95 = alloc_stack $UInt8                        // users: %106, %97, %96
  store %86 to %95 : $*UInt8                      // id: %96
  %97 = address_to_pointer [stack_protection] %95 : $*UInt8 to $Builtin.RawPointer // user: %105
  %98 = struct_extract %6 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %100
  %99 = builtin "truncOrBitCast_Int64_Word"(%46 : $Builtin.Int64) : $Builtin.Word // user: %100
  %100 = index_raw_pointer %98 : $Builtin.RawPointer, %99 : $Builtin.Word // user: %105
  %101 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %102
  %102 = builtin "sextOrBitCast_Word_Int64"(%101 : $Builtin.Word) : $Builtin.Int64 // users: %105, %103
  %103 = builtin "cmp_slt_Int64"(%102 : $Builtin.Int64, %41 : $Builtin.Int64) : $Builtin.Int1 // user: %104
  cond_fail %103 : $Builtin.Int1, "Negative value is not representable" // id: %104
  %105 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%100 : $Builtin.RawPointer, %97 : $Builtin.RawPointer, %102 : $Builtin.Int64, %94 : $Builtin.Int1) : $()
  dealloc_stack %95 : $*UInt8                     // id: %106
  br bb8(%91 : $Builtin.Int64)                    // id: %107

bb13:                                             // Preds: bb11
  dealloc_stack %47 : $*Optional<UInt8>           // id: %108
  %109 = struct_element_addr %26 : $*IndexingIterator<Array<UInt8>>, #IndexingIterator._elements // user: %110
  %110 = struct_element_addr %109 : $*Array<UInt8>, #Array._buffer // user: %111
  %111 = struct_element_addr %110 : $*_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %112
  %112 = load %111 : $*__ContiguousArrayStorageBase // user: %113
  strong_release %112 : $__ContiguousArrayStorageBase // id: %113
  dealloc_stack %26 : $*IndexingIterator<Array<UInt8>> // id: %114
  dealloc_stack %7 : $*Optional<()>               // id: %115
  br bb7                                          // id: %116
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5893, stage HighLevel,Function+EarlyLoopOpt, pass 8: EarlySROA (early-sroa)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // user: %3
// %1                                             // users: %9, %4
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = alloc_stack $Array<UInt8>                  // users: %12, %9, %28, %50, %10, %3
  store %0 to %2 : $*Array<UInt8>                 // id: %3
  %4 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %5
  switch_enum %4 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %5

// %6                                             // users: %9, %108
bb1(%6 : $UnsafeMutableRawPointer):               // Preds: bb0
  %7 = alloc_stack $Optional<()>                  // users: %16, %123, %24, %18
  // function_ref specialized closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %8 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFySRyADGXEfU_SayADG_TG5 : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // user: %9
  %9 = partial_apply [callee_guaranteed] [on_stack] %8(%2, %1, %6) : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // users: %10, %17
  %10 = mark_dependence %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) on %2 : $*Array<UInt8> // user: %11
  %11 = convert_function %10 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) to $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()> // user: %14
  %12 = load %2 : $*Array<UInt8>                  // user: %14
  // function_ref specialized Array.withContiguousStorageIfAvailable<A>(_:)
  %13 = function_ref @$sSa32withContiguousStorageIfAvailableyqd__Sgqd__SRyxGKXEKlFs5UInt8V_ytTg5 : $@convention(method) (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()>, @guaranteed Array<UInt8>) -> (Optional<()>, @error any Error) // user: %14
  try_apply %13(%11, %12) : $@convention(method) (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()>, @guaranteed Array<UInt8>) -> (Optional<()>, @error any Error), normal bb2, error bb3 // id: %14

// %15                                            // user: %16
bb2(%15 : $Optional<()>):                         // Preds: bb1
  store %15 to %7 : $*Optional<()>                // id: %16
  dealloc_stack %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) // id: %17
  %18 = load %7 : $*Optional<()>                  // user: %19
  switch_enum %18 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %19

bb3(%20 : $any Error):                            // Preds: bb1
  unreachable                                     // id: %21

bb4:                                              // Preds: bb0
  br bb7                                          // id: %22

bb5(%23 : $()):                                   // Preds: bb2
  dealloc_stack %7 : $*Optional<()>               // id: %24
  br bb7                                          // id: %25

bb6:                                              // Preds: bb2
  %26 = alloc_stack $__ContiguousArrayStorageBase // users: %122, %119, %44, %57, %67, %77
  %27 = alloc_stack $Int                          // users: %121, %55, %84, %45
  %28 = load %2 : $*Array<UInt8>                  // users: %33, %29
  %29 = struct_extract %28 : $Array<UInt8>, #Array._buffer // user: %30
  %30 = struct_extract %29 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %31
  strong_retain %30 : $__ContiguousArrayStorageBase // id: %31
  %32 = alloc_stack $Array<UInt8>                 // users: %34, %33, %46
  store %28 to %32 : $*Array<UInt8>               // id: %33
  %34 = load %32 : $*Array<UInt8>                 // users: %37, %36
  // function_ref specialized Array.startIndex.getter
  %35 = function_ref @$sSa10startIndexSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %36
  %36 = apply %35(%34) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // users: %39, %37
  %37 = struct $IndexingIterator<Array<UInt8>> (%34 : $Array<UInt8>, %36 : $Int) // user: %38
  %38 = struct_extract %37 : $IndexingIterator<Array<UInt8>>, #IndexingIterator._elements // user: %39
  %39 = struct $IndexingIterator<Array<UInt8>> (%38 : $Array<UInt8>, %36 : $Int) // users: %41, %40
  %40 = struct_extract %39 : $IndexingIterator<Array<UInt8>>, #IndexingIterator._elements // user: %42
  %41 = struct_extract %39 : $IndexingIterator<Array<UInt8>>, #IndexingIterator._position // user: %45
  %42 = struct_extract %40 : $Array<UInt8>, #Array._buffer // user: %43
  %43 = struct_extract %42 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %44
  store %43 to %26 : $*__ContiguousArrayStorageBase // id: %44
  store %41 to %27 : $*Int                        // id: %45
  dealloc_stack %32 : $*Array<UInt8>              // id: %46
  %47 = integer_literal $Builtin.Int64, 0         // users: %48, %113
  br bb8(%47 : $Builtin.Int64)                    // id: %48

bb7:                                              // Preds: bb4 bb13 bb5
  %49 = tuple ()                                  // user: %51
  dealloc_stack %2 : $*Array<UInt8>               // id: %50
  return %49 : $()                                // id: %51

// %52                                            // users: %100, %109
bb8(%52 : $Builtin.Int64):                        // Preds: bb6 bb12
  %53 = alloc_stack $Optional<UInt8>              // users: %92, %118, %97, %93
  %54 = alloc_stack $Optional<UInt8>              // users: %88, %73, %91, %90, %65
  %55 = load %27 : $*Int                          // users: %71, %56
  %56 = struct_extract %55 : $Int, #Int._value    // user: %63
  %57 = load %26 : $*__ContiguousArrayStorageBase // user: %58
  %58 = struct $_ContiguousArrayBuffer<UInt8> (%57 : $__ContiguousArrayStorageBase) // user: %59
  %59 = struct $Array<UInt8> (%58 : $_ContiguousArrayBuffer<UInt8>) // user: %61
  // function_ref specialized Array.endIndex.getter
  %60 = function_ref @$sSa8endIndexSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %61
  %61 = apply %60(%59) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %62
  %62 = struct_extract %61 : $Int, #Int._value    // user: %63
  %63 = builtin "cmp_eq_Int64"(%56 : $Builtin.Int64, %62 : $Builtin.Int64) : $Builtin.Int1 // user: %64
  cond_br %63, bb9, bb10                          // id: %64

bb9:                                              // Preds: bb8
  inject_enum_addr %54 : $*Optional<UInt8>, #Optional.none!enumelt // id: %65
  br bb11                                         // id: %66

bb10:                                             // Preds: bb8
  %67 = load %26 : $*__ContiguousArrayStorageBase // user: %68
  %68 = struct $_ContiguousArrayBuffer<UInt8> (%67 : $__ContiguousArrayStorageBase) // user: %69
  %69 = struct $Array<UInt8> (%68 : $_ContiguousArrayBuffer<UInt8>) // user: %71
  // function_ref specialized Array.subscript.read
  %70 = function_ref @$sSayxSicirs5UInt8V_Tg5 : $@yield_once @convention(method) (Int, @guaranteed Array<UInt8>) -> @yields @in_guaranteed UInt8 // user: %71
  (%71, %72) = begin_apply %70(%55, %69) : $@yield_once @convention(method) (Int, @guaranteed Array<UInt8>) -> @yields @in_guaranteed UInt8 // users: %74, %76
  %73 = init_enum_data_addr %54 : $*Optional<UInt8>, #Optional.some!enumelt // user: %75
  %74 = load %71 : $*UInt8                        // user: %75
  store %74 to %73 : $*UInt8                      // id: %75
  end_apply %72                                   // id: %76
  %77 = load %26 : $*__ContiguousArrayStorageBase // user: %78
  %78 = struct $_ContiguousArrayBuffer<UInt8> (%77 : $__ContiguousArrayStorageBase) // user: %79
  %79 = struct $Array<UInt8> (%78 : $_ContiguousArrayBuffer<UInt8>) // users: %84, %80, %85
  %80 = struct_extract %79 : $Array<UInt8>, #Array._buffer // user: %81
  %81 = struct_extract %80 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %82
  strong_retain %81 : $__ContiguousArrayStorageBase // id: %82
  // function_ref specialized Array.formIndex(after:)
  %83 = function_ref @$sSa9formIndex5afterySiz_tFs5UInt8V_Tg5 : $@convention(method) (@inout Int, @guaranteed Array<UInt8>) -> () // user: %84
  %84 = apply %83(%27, %79) : $@convention(method) (@inout Int, @guaranteed Array<UInt8>) -> ()
  %85 = struct_extract %79 : $Array<UInt8>, #Array._buffer // user: %86
  %86 = struct_extract %85 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %87
  strong_release %86 : $__ContiguousArrayStorageBase // id: %87
  inject_enum_addr %54 : $*Optional<UInt8>, #Optional.some!enumelt // id: %88
  br bb11                                         // id: %89

bb11:                                             // Preds: bb10 bb9
  %90 = load %54 : $*Optional<UInt8>              // user: %92
  dealloc_stack %54 : $*Optional<UInt8>           // id: %91
  store %90 to %53 : $*Optional<UInt8>            // id: %92
  %93 = load %53 : $*Optional<UInt8>              // users: %94, %96
  switch_enum %93 : $Optional<UInt8>, case #Optional.some!enumelt: bb12, case #Optional.none!enumelt: bb13 // id: %94

bb12(%95 : $UInt8):                               // Preds: bb11
  %96 = unchecked_enum_data %93 : $Optional<UInt8>, #Optional.some!enumelt // user: %106
  dealloc_stack %53 : $*Optional<UInt8>           // id: %97
  %98 = integer_literal $Builtin.Int64, 1         // user: %100
  %99 = integer_literal $Builtin.Int1, -1         // user: %100
  %100 = builtin "sadd_with_overflow_Int64"(%52 : $Builtin.Int64, %98 : $Builtin.Int64, %99 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %102, %101
  %101 = tuple_extract %100 : $(Builtin.Int64, Builtin.Int1), 0 // user: %117
  %102 = tuple_extract %100 : $(Builtin.Int64, Builtin.Int1), 1 // user: %103
  cond_fail %102 : $Builtin.Int1, "arithmetic overflow" // id: %103
  %104 = integer_literal $Builtin.Int1, 0         // user: %115
  %105 = alloc_stack $UInt8                       // users: %116, %107, %106
  store %96 to %105 : $*UInt8                     // id: %106
  %107 = address_to_pointer [stack_protection] %105 : $*UInt8 to $Builtin.RawPointer // user: %115
  %108 = struct_extract %6 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %110
  %109 = builtin "truncOrBitCast_Int64_Word"(%52 : $Builtin.Int64) : $Builtin.Word // user: %110
  %110 = index_raw_pointer %108 : $Builtin.RawPointer, %109 : $Builtin.Word // user: %115
  %111 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %112
  %112 = builtin "sextOrBitCast_Word_Int64"(%111 : $Builtin.Word) : $Builtin.Int64 // users: %115, %113
  %113 = builtin "cmp_slt_Int64"(%112 : $Builtin.Int64, %47 : $Builtin.Int64) : $Builtin.Int1 // user: %114
  cond_fail %113 : $Builtin.Int1, "Negative value is not representable" // id: %114
  %115 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%110 : $Builtin.RawPointer, %107 : $Builtin.RawPointer, %112 : $Builtin.Int64, %104 : $Builtin.Int1) : $()
  dealloc_stack %105 : $*UInt8                    // id: %116
  br bb8(%101 : $Builtin.Int64)                   // id: %117

bb13:                                             // Preds: bb11
  dealloc_stack %53 : $*Optional<UInt8>           // id: %118
  %119 = load %26 : $*__ContiguousArrayStorageBase // user: %120
  strong_release %119 : $__ContiguousArrayStorageBase // id: %120
  dealloc_stack %27 : $*Int                       // id: %121
  dealloc_stack %26 : $*__ContiguousArrayStorageBase // id: %122
  dealloc_stack %7 : $*Optional<()>               // id: %123
  br bb7                                          // id: %124
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5894, stage HighLevel,Function+EarlyLoopOpt, pass 9: Mem2Reg (mem2reg)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // user: %3
// %1                                             // users: %8, %4
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = alloc_stack $Array<UInt8>                  // users: %11, %8, %23, %40, %9, %3
  store %0 to %2 : $*Array<UInt8>                 // id: %3
  %4 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %5
  switch_enum %4 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %5

// %6                                             // users: %8, %92
bb1(%6 : $UnsafeMutableRawPointer):               // Preds: bb0
  // function_ref specialized closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %7 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFySRyADGXEfU_SayADG_TG5 : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // user: %8
  %8 = partial_apply [callee_guaranteed] [on_stack] %7(%2, %1, %6) : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // users: %9, %15
  %9 = mark_dependence %8 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) on %2 : $*Array<UInt8> // user: %10
  %10 = convert_function %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) to $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()> // user: %13
  %11 = load %2 : $*Array<UInt8>                  // user: %13
  // function_ref specialized Array.withContiguousStorageIfAvailable<A>(_:)
  %12 = function_ref @$sSa32withContiguousStorageIfAvailableyqd__Sgqd__SRyxGKXEKlFs5UInt8V_ytTg5 : $@convention(method) (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()>, @guaranteed Array<UInt8>) -> (Optional<()>, @error any Error) // user: %13
  try_apply %12(%10, %11) : $@convention(method) (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()>, @guaranteed Array<UInt8>) -> (Optional<()>, @error any Error), normal bb2, error bb3 // id: %13

// %14                                            // user: %16
bb2(%14 : $Optional<()>):                         // Preds: bb1
  dealloc_stack %8 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) // id: %15
  switch_enum %14 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %16

bb3(%17 : $any Error):                            // Preds: bb1
  unreachable                                     // id: %18

bb4:                                              // Preds: bb0
  br bb7                                          // id: %19

bb5(%20 : $()):                                   // Preds: bb2
  br bb7                                          // id: %21

bb6:                                              // Preds: bb2
  %22 = alloc_stack $Int                          // users: %103, %45, %71, %36
  %23 = load %2 : $*Array<UInt8>                  // users: %28, %29, %24
  %24 = struct_extract %23 : $Array<UInt8>, #Array._buffer // user: %25
  %25 = struct_extract %24 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %26
  strong_retain %25 : $__ContiguousArrayStorageBase // id: %26
  // function_ref specialized Array.startIndex.getter
  %27 = function_ref @$sSa10startIndexSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %28
  %28 = apply %27(%23) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // users: %31, %29
  %29 = struct $IndexingIterator<Array<UInt8>> (%23 : $Array<UInt8>, %28 : $Int) // user: %30
  %30 = struct_extract %29 : $IndexingIterator<Array<UInt8>>, #IndexingIterator._elements // user: %31
  %31 = struct $IndexingIterator<Array<UInt8>> (%30 : $Array<UInt8>, %28 : $Int) // users: %33, %32
  %32 = struct_extract %31 : $IndexingIterator<Array<UInt8>>, #IndexingIterator._elements // user: %34
  %33 = struct_extract %31 : $IndexingIterator<Array<UInt8>>, #IndexingIterator._position // user: %36
  %34 = struct_extract %32 : $Array<UInt8>, #Array._buffer // user: %35
  %35 = struct_extract %34 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %56, %65, %47, %102
  store %33 to %22 : $*Int                        // id: %36
  %37 = integer_literal $Builtin.Int64, 0         // users: %38, %97
  br bb8(%37 : $Builtin.Int64, undef : $Optional<UInt8>) // id: %38

bb7:                                              // Preds: bb4 bb13 bb5
  %39 = tuple ()                                  // user: %41
  dealloc_stack %2 : $*Array<UInt8>               // id: %40
  return %39 : $()                                // id: %41

// %42                                            // users: %84, %93
bb8(%42 : $Builtin.Int64, %43 : $Optional<UInt8>): // Preds: bb12 bb6
  %44 = alloc_stack $Optional<UInt8>              // users: %75, %61, %78, %77, %54
  %45 = load %22 : $*Int                          // users: %59, %46
  %46 = struct_extract %45 : $Int, #Int._value    // user: %52
  %47 = struct $_ContiguousArrayBuffer<UInt8> (%35 : $__ContiguousArrayStorageBase) // user: %48
  %48 = struct $Array<UInt8> (%47 : $_ContiguousArrayBuffer<UInt8>) // user: %50
  // function_ref specialized Array.endIndex.getter
  %49 = function_ref @$sSa8endIndexSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %50
  %50 = apply %49(%48) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %51
  %51 = struct_extract %50 : $Int, #Int._value    // user: %52
  %52 = builtin "cmp_eq_Int64"(%46 : $Builtin.Int64, %51 : $Builtin.Int64) : $Builtin.Int1 // user: %53
  cond_br %52, bb9, bb10                          // id: %53

bb9:                                              // Preds: bb8
  inject_enum_addr %44 : $*Optional<UInt8>, #Optional.none!enumelt // id: %54
  br bb11                                         // id: %55

bb10:                                             // Preds: bb8
  %56 = struct $_ContiguousArrayBuffer<UInt8> (%35 : $__ContiguousArrayStorageBase) // user: %57
  %57 = struct $Array<UInt8> (%56 : $_ContiguousArrayBuffer<UInt8>) // user: %59
  // function_ref specialized Array.subscript.read
  %58 = function_ref @$sSayxSicirs5UInt8V_Tg5 : $@yield_once @convention(method) (Int, @guaranteed Array<UInt8>) -> @yields @in_guaranteed UInt8 // user: %59
  (%59, %60) = begin_apply %58(%45, %57) : $@yield_once @convention(method) (Int, @guaranteed Array<UInt8>) -> @yields @in_guaranteed UInt8 // users: %62, %64
  %61 = init_enum_data_addr %44 : $*Optional<UInt8>, #Optional.some!enumelt // user: %63
  %62 = load %59 : $*UInt8                        // user: %63
  store %62 to %61 : $*UInt8                      // id: %63
  end_apply %60                                   // id: %64
  %65 = struct $_ContiguousArrayBuffer<UInt8> (%35 : $__ContiguousArrayStorageBase) // user: %66
  %66 = struct $Array<UInt8> (%65 : $_ContiguousArrayBuffer<UInt8>) // users: %71, %67, %72
  %67 = struct_extract %66 : $Array<UInt8>, #Array._buffer // user: %68
  %68 = struct_extract %67 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %69
  strong_retain %68 : $__ContiguousArrayStorageBase // id: %69
  // function_ref specialized Array.formIndex(after:)
  %70 = function_ref @$sSa9formIndex5afterySiz_tFs5UInt8V_Tg5 : $@convention(method) (@inout Int, @guaranteed Array<UInt8>) -> () // user: %71
  %71 = apply %70(%22, %66) : $@convention(method) (@inout Int, @guaranteed Array<UInt8>) -> ()
  %72 = struct_extract %66 : $Array<UInt8>, #Array._buffer // user: %73
  %73 = struct_extract %72 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %74
  strong_release %73 : $__ContiguousArrayStorageBase // id: %74
  inject_enum_addr %44 : $*Optional<UInt8>, #Optional.some!enumelt // id: %75
  br bb11                                         // id: %76

bb11:                                             // Preds: bb10 bb9
  %77 = load %44 : $*Optional<UInt8>              // users: %101, %81, %79
  dealloc_stack %44 : $*Optional<UInt8>           // id: %78
  switch_enum %77 : $Optional<UInt8>, case #Optional.some!enumelt: bb12, case #Optional.none!enumelt: bb13 // id: %79

bb12(%80 : $UInt8):                               // Preds: bb11
  %81 = unchecked_enum_data %77 : $Optional<UInt8>, #Optional.some!enumelt // user: %90
  %82 = integer_literal $Builtin.Int64, 1         // user: %84
  %83 = integer_literal $Builtin.Int1, -1         // user: %84
  %84 = builtin "sadd_with_overflow_Int64"(%42 : $Builtin.Int64, %82 : $Builtin.Int64, %83 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %86, %85
  %85 = tuple_extract %84 : $(Builtin.Int64, Builtin.Int1), 0 // user: %101
  %86 = tuple_extract %84 : $(Builtin.Int64, Builtin.Int1), 1 // user: %87
  cond_fail %86 : $Builtin.Int1, "arithmetic overflow" // id: %87
  %88 = integer_literal $Builtin.Int1, 0          // user: %99
  %89 = alloc_stack $UInt8                        // users: %100, %91, %90
  store %81 to %89 : $*UInt8                      // id: %90
  %91 = address_to_pointer [stack_protection] %89 : $*UInt8 to $Builtin.RawPointer // user: %99
  %92 = struct_extract %6 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %94
  %93 = builtin "truncOrBitCast_Int64_Word"(%42 : $Builtin.Int64) : $Builtin.Word // user: %94
  %94 = index_raw_pointer %92 : $Builtin.RawPointer, %93 : $Builtin.Word // user: %99
  %95 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %96
  %96 = builtin "sextOrBitCast_Word_Int64"(%95 : $Builtin.Word) : $Builtin.Int64 // users: %99, %97
  %97 = builtin "cmp_slt_Int64"(%96 : $Builtin.Int64, %37 : $Builtin.Int64) : $Builtin.Int1 // user: %98
  cond_fail %97 : $Builtin.Int1, "Negative value is not representable" // id: %98
  %99 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%94 : $Builtin.RawPointer, %91 : $Builtin.RawPointer, %96 : $Builtin.Int64, %88 : $Builtin.Int1) : $()
  dealloc_stack %89 : $*UInt8                     // id: %100
  br bb8(%85 : $Builtin.Int64, %77 : $Optional<UInt8>) // id: %101

bb13:                                             // Preds: bb11
  strong_release %35 : $__ContiguousArrayStorageBase // id: %102
  dealloc_stack %22 : $*Int                       // id: %103
  br bb7                                          // id: %104
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5896, stage HighLevel,Function+EarlyLoopOpt, pass 11: PerformanceConstantPropagation (performance-constant-propagation)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // user: %3
// %1                                             // users: %8, %4
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = alloc_stack $Array<UInt8>                  // users: %11, %8, %23, %35, %9, %3
  store %0 to %2 : $*Array<UInt8>                 // id: %3
  %4 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %5
  switch_enum %4 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %5

// %6                                             // users: %8, %83
bb1(%6 : $UnsafeMutableRawPointer):               // Preds: bb0
  // function_ref specialized closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %7 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFySRyADGXEfU_SayADG_TG5 : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // user: %8
  %8 = partial_apply [callee_guaranteed] [on_stack] %7(%2, %1, %6) : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // users: %9, %15
  %9 = mark_dependence %8 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) on %2 : $*Array<UInt8> // user: %10
  %10 = convert_function %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) to $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()> // user: %13
  %11 = load %2 : $*Array<UInt8>                  // user: %13
  // function_ref specialized Array.withContiguousStorageIfAvailable<A>(_:)
  %12 = function_ref @$sSa32withContiguousStorageIfAvailableyqd__Sgqd__SRyxGKXEKlFs5UInt8V_ytTg5 : $@convention(method) (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()>, @guaranteed Array<UInt8>) -> (Optional<()>, @error any Error) // user: %13
  try_apply %12(%10, %11) : $@convention(method) (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()>, @guaranteed Array<UInt8>) -> (Optional<()>, @error any Error), normal bb2, error bb3 // id: %13

// %14                                            // user: %16
bb2(%14 : $Optional<()>):                         // Preds: bb1
  dealloc_stack %8 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) // id: %15
  switch_enum %14 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %16

bb3(%17 : $any Error):                            // Preds: bb1
  unreachable                                     // id: %18

bb4:                                              // Preds: bb0
  br bb7                                          // id: %19

bb5(%20 : $()):                                   // Preds: bb2
  br bb7                                          // id: %21

bb6:                                              // Preds: bb2
  %22 = alloc_stack $Int                          // users: %94, %40, %64, %31
  %23 = load %2 : $*Array<UInt8>                  // users: %29, %28, %24
  %24 = struct_extract %23 : $Array<UInt8>, #Array._buffer // user: %25
  %25 = struct_extract %24 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %26
  strong_retain %25 : $__ContiguousArrayStorageBase // id: %26
  // function_ref specialized Array.startIndex.getter
  %27 = function_ref @$sSa10startIndexSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %28
  %28 = apply %27(%23) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %31
  %29 = struct_extract %23 : $Array<UInt8>, #Array._buffer // user: %30
  %30 = struct_extract %29 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %62, %65, %51, %60, %42, %93
  store %28 to %22 : $*Int                        // id: %31
  %32 = integer_literal $Builtin.Int64, 0         // users: %33, %88
  br bb8(%32 : $Builtin.Int64, undef : $Optional<UInt8>) // id: %33

bb7:                                              // Preds: bb4 bb13 bb5
  %34 = tuple ()                                  // user: %36
  dealloc_stack %2 : $*Array<UInt8>               // id: %35
  return %34 : $()                                // id: %36

// %37                                            // users: %75, %84
bb8(%37 : $Builtin.Int64, %38 : $Optional<UInt8>): // Preds: bb12 bb6
  %39 = alloc_stack $Optional<UInt8>              // users: %66, %56, %69, %68, %49
  %40 = load %22 : $*Int                          // users: %54, %41
  %41 = struct_extract %40 : $Int, #Int._value    // user: %47
  %42 = struct $_ContiguousArrayBuffer<UInt8> (%30 : $__ContiguousArrayStorageBase) // user: %43
  %43 = struct $Array<UInt8> (%42 : $_ContiguousArrayBuffer<UInt8>) // user: %45
  // function_ref specialized Array.endIndex.getter
  %44 = function_ref @$sSa8endIndexSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %45
  %45 = apply %44(%43) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %46
  %46 = struct_extract %45 : $Int, #Int._value    // user: %47
  %47 = builtin "cmp_eq_Int64"(%41 : $Builtin.Int64, %46 : $Builtin.Int64) : $Builtin.Int1 // user: %48
  cond_br %47, bb9, bb10                          // id: %48

bb9:                                              // Preds: bb8
  inject_enum_addr %39 : $*Optional<UInt8>, #Optional.none!enumelt // id: %49
  br bb11                                         // id: %50

bb10:                                             // Preds: bb8
  %51 = struct $_ContiguousArrayBuffer<UInt8> (%30 : $__ContiguousArrayStorageBase) // user: %52
  %52 = struct $Array<UInt8> (%51 : $_ContiguousArrayBuffer<UInt8>) // user: %54
  // function_ref specialized Array.subscript.read
  %53 = function_ref @$sSayxSicirs5UInt8V_Tg5 : $@yield_once @convention(method) (Int, @guaranteed Array<UInt8>) -> @yields @in_guaranteed UInt8 // user: %54
  (%54, %55) = begin_apply %53(%40, %52) : $@yield_once @convention(method) (Int, @guaranteed Array<UInt8>) -> @yields @in_guaranteed UInt8 // users: %57, %59
  %56 = init_enum_data_addr %39 : $*Optional<UInt8>, #Optional.some!enumelt // user: %58
  %57 = load %54 : $*UInt8                        // user: %58
  store %57 to %56 : $*UInt8                      // id: %58
  end_apply %55                                   // id: %59
  %60 = struct $_ContiguousArrayBuffer<UInt8> (%30 : $__ContiguousArrayStorageBase) // user: %61
  %61 = struct $Array<UInt8> (%60 : $_ContiguousArrayBuffer<UInt8>) // user: %64
  strong_retain %30 : $__ContiguousArrayStorageBase // id: %62
  // function_ref specialized Array.formIndex(after:)
  %63 = function_ref @$sSa9formIndex5afterySiz_tFs5UInt8V_Tg5 : $@convention(method) (@inout Int, @guaranteed Array<UInt8>) -> () // user: %64
  %64 = apply %63(%22, %61) : $@convention(method) (@inout Int, @guaranteed Array<UInt8>) -> ()
  strong_release %30 : $__ContiguousArrayStorageBase // id: %65
  inject_enum_addr %39 : $*Optional<UInt8>, #Optional.some!enumelt // id: %66
  br bb11                                         // id: %67

bb11:                                             // Preds: bb10 bb9
  %68 = load %39 : $*Optional<UInt8>              // users: %92, %72, %70
  dealloc_stack %39 : $*Optional<UInt8>           // id: %69
  switch_enum %68 : $Optional<UInt8>, case #Optional.some!enumelt: bb12, case #Optional.none!enumelt: bb13 // id: %70

bb12(%71 : $UInt8):                               // Preds: bb11
  %72 = unchecked_enum_data %68 : $Optional<UInt8>, #Optional.some!enumelt // user: %81
  %73 = integer_literal $Builtin.Int64, 1         // user: %75
  %74 = integer_literal $Builtin.Int1, -1         // user: %75
  %75 = builtin "sadd_with_overflow_Int64"(%37 : $Builtin.Int64, %73 : $Builtin.Int64, %74 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %77, %76
  %76 = tuple_extract %75 : $(Builtin.Int64, Builtin.Int1), 0 // user: %92
  %77 = tuple_extract %75 : $(Builtin.Int64, Builtin.Int1), 1 // user: %78
  cond_fail %77 : $Builtin.Int1, "arithmetic overflow" // id: %78
  %79 = integer_literal $Builtin.Int1, 0          // user: %90
  %80 = alloc_stack $UInt8                        // users: %91, %82, %81
  store %72 to %80 : $*UInt8                      // id: %81
  %82 = address_to_pointer [stack_protection] %80 : $*UInt8 to $Builtin.RawPointer // user: %90
  %83 = struct_extract %6 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %85
  %84 = builtin "truncOrBitCast_Int64_Word"(%37 : $Builtin.Int64) : $Builtin.Word // user: %85
  %85 = index_raw_pointer %83 : $Builtin.RawPointer, %84 : $Builtin.Word // user: %90
  %86 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %87
  %87 = builtin "sextOrBitCast_Word_Int64"(%86 : $Builtin.Word) : $Builtin.Int64 // users: %90, %88
  %88 = builtin "cmp_slt_Int64"(%87 : $Builtin.Int64, %32 : $Builtin.Int64) : $Builtin.Int1 // user: %89
  cond_fail %88 : $Builtin.Int1, "Negative value is not representable" // id: %89
  %90 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%85 : $Builtin.RawPointer, %82 : $Builtin.RawPointer, %87 : $Builtin.Int64, %79 : $Builtin.Int1) : $()
  dealloc_stack %80 : $*UInt8                     // id: %91
  br bb8(%76 : $Builtin.Int64, %68 : $Optional<UInt8>) // id: %92

bb13:                                             // Preds: bb11
  strong_release %30 : $__ContiguousArrayStorageBase // id: %93
  dealloc_stack %22 : $*Int                       // id: %94
  br bb7                                          // id: %95
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5897, stage HighLevel,Function+EarlyLoopOpt, pass 12: SimplifyCFG (simplify-cfg)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // user: %3
// %1                                             // users: %8, %4
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = alloc_stack $Array<UInt8>                  // users: %11, %8, %20, %32, %9, %3
  store %0 to %2 : $*Array<UInt8>                 // id: %3
  %4 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %5
  switch_enum %4 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb2 // id: %5

// %6                                             // users: %8, %79
bb1(%6 : $UnsafeMutableRawPointer):               // Preds: bb0
  // function_ref specialized closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %7 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFySRyADGXEfU_SayADG_TG5 : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // user: %8
  %8 = partial_apply [callee_guaranteed] [on_stack] %7(%2, %1, %6) : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // users: %9, %14
  %9 = mark_dependence %8 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) on %2 : $*Array<UInt8> // user: %10
  %10 = convert_function %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) to $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()> // user: %13
  %11 = load %2 : $*Array<UInt8>                  // user: %13
  // function_ref specialized Array.withContiguousStorageIfAvailable<A>(_:)
  %12 = function_ref @$sSa32withContiguousStorageIfAvailableyqd__Sgqd__SRyxGKXEKlFs5UInt8V_ytTg5 : $@convention(method) (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()>, @guaranteed Array<UInt8>) -> (Optional<()>, @error any Error) // user: %13
  %13 = apply [nothrow] %12(%10, %11) : $@convention(method) (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()>, @guaranteed Array<UInt8>) -> (Optional<()>, @error any Error) // user: %15
  dealloc_stack %8 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) // id: %14
  switch_enum %13 : $Optional<()>, case #Optional.some!enumelt: bb3, case #Optional.none!enumelt: bb4 // id: %15

bb2:                                              // Preds: bb0
  br bb5                                          // id: %16

bb3(%17 : $()):                                   // Preds: bb1
  br bb5                                          // id: %18

bb4:                                              // Preds: bb1
  %19 = alloc_stack $Int                          // users: %90, %36, %60, %28
  %20 = load %2 : $*Array<UInt8>                  // users: %26, %25, %21
  %21 = struct_extract %20 : $Array<UInt8>, #Array._buffer // user: %22
  %22 = struct_extract %21 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %23
  strong_retain %22 : $__ContiguousArrayStorageBase // id: %23
  // function_ref specialized Array.startIndex.getter
  %24 = function_ref @$sSa10startIndexSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %25
  %25 = apply %24(%20) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %28
  %26 = struct_extract %20 : $Array<UInt8>, #Array._buffer // user: %27
  %27 = struct_extract %26 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %58, %61, %47, %56, %38, %89
  store %25 to %19 : $*Int                        // id: %28
  %29 = integer_literal $Builtin.Int64, 0         // users: %30, %84
  br bb6(%29 : $Builtin.Int64)                    // id: %30

bb5:                                              // Preds: bb2 bb11 bb3
  %31 = tuple ()                                  // user: %33
  dealloc_stack %2 : $*Array<UInt8>               // id: %32
  return %31 : $()                                // id: %33

// %34                                            // users: %71, %80
bb6(%34 : $Builtin.Int64):                        // Preds: bb4 bb10
  %35 = alloc_stack $Optional<UInt8>              // users: %62, %52, %65, %64, %45
  %36 = load %19 : $*Int                          // users: %50, %37
  %37 = struct_extract %36 : $Int, #Int._value    // user: %43
  %38 = struct $_ContiguousArrayBuffer<UInt8> (%27 : $__ContiguousArrayStorageBase) // user: %39
  %39 = struct $Array<UInt8> (%38 : $_ContiguousArrayBuffer<UInt8>) // user: %41
  // function_ref specialized Array.endIndex.getter
  %40 = function_ref @$sSa8endIndexSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %41
  %41 = apply %40(%39) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %42
  %42 = struct_extract %41 : $Int, #Int._value    // user: %43
  %43 = builtin "cmp_eq_Int64"(%37 : $Builtin.Int64, %42 : $Builtin.Int64) : $Builtin.Int1 // user: %44
  cond_br %43, bb7, bb8                           // id: %44

bb7:                                              // Preds: bb6
  inject_enum_addr %35 : $*Optional<UInt8>, #Optional.none!enumelt // id: %45
  br bb9                                          // id: %46

bb8:                                              // Preds: bb6
  %47 = struct $_ContiguousArrayBuffer<UInt8> (%27 : $__ContiguousArrayStorageBase) // user: %48
  %48 = struct $Array<UInt8> (%47 : $_ContiguousArrayBuffer<UInt8>) // user: %50
  // function_ref specialized Array.subscript.read
  %49 = function_ref @$sSayxSicirs5UInt8V_Tg5 : $@yield_once @convention(method) (Int, @guaranteed Array<UInt8>) -> @yields @in_guaranteed UInt8 // user: %50
  (%50, %51) = begin_apply %49(%36, %48) : $@yield_once @convention(method) (Int, @guaranteed Array<UInt8>) -> @yields @in_guaranteed UInt8 // users: %53, %55
  %52 = init_enum_data_addr %35 : $*Optional<UInt8>, #Optional.some!enumelt // user: %54
  %53 = load %50 : $*UInt8                        // user: %54
  store %53 to %52 : $*UInt8                      // id: %54
  end_apply %51                                   // id: %55
  %56 = struct $_ContiguousArrayBuffer<UInt8> (%27 : $__ContiguousArrayStorageBase) // user: %57
  %57 = struct $Array<UInt8> (%56 : $_ContiguousArrayBuffer<UInt8>) // user: %60
  strong_retain %27 : $__ContiguousArrayStorageBase // id: %58
  // function_ref specialized Array.formIndex(after:)
  %59 = function_ref @$sSa9formIndex5afterySiz_tFs5UInt8V_Tg5 : $@convention(method) (@inout Int, @guaranteed Array<UInt8>) -> () // user: %60
  %60 = apply %59(%19, %57) : $@convention(method) (@inout Int, @guaranteed Array<UInt8>) -> ()
  strong_release %27 : $__ContiguousArrayStorageBase // id: %61
  inject_enum_addr %35 : $*Optional<UInt8>, #Optional.some!enumelt // id: %62
  br bb9                                          // id: %63

bb9:                                              // Preds: bb8 bb7
  %64 = load %35 : $*Optional<UInt8>              // users: %68, %66
  dealloc_stack %35 : $*Optional<UInt8>           // id: %65
  switch_enum %64 : $Optional<UInt8>, case #Optional.some!enumelt: bb10, case #Optional.none!enumelt: bb11 // id: %66

bb10(%67 : $UInt8):                               // Preds: bb9
  %68 = unchecked_enum_data %64 : $Optional<UInt8>, #Optional.some!enumelt // user: %77
  %69 = integer_literal $Builtin.Int64, 1         // user: %71
  %70 = integer_literal $Builtin.Int1, -1         // user: %71
  %71 = builtin "sadd_with_overflow_Int64"(%34 : $Builtin.Int64, %69 : $Builtin.Int64, %70 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %73, %72
  %72 = tuple_extract %71 : $(Builtin.Int64, Builtin.Int1), 0 // user: %88
  %73 = tuple_extract %71 : $(Builtin.Int64, Builtin.Int1), 1 // user: %74
  cond_fail %73 : $Builtin.Int1, "arithmetic overflow" // id: %74
  %75 = integer_literal $Builtin.Int1, 0          // user: %86
  %76 = alloc_stack $UInt8                        // users: %87, %78, %77
  store %68 to %76 : $*UInt8                      // id: %77
  %78 = address_to_pointer [stack_protection] %76 : $*UInt8 to $Builtin.RawPointer // user: %86
  %79 = struct_extract %6 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %81
  %80 = builtin "truncOrBitCast_Int64_Word"(%34 : $Builtin.Int64) : $Builtin.Word // user: %81
  %81 = index_raw_pointer %79 : $Builtin.RawPointer, %80 : $Builtin.Word // user: %86
  %82 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %83
  %83 = builtin "sextOrBitCast_Word_Int64"(%82 : $Builtin.Word) : $Builtin.Int64 // users: %86, %84
  %84 = builtin "cmp_slt_Int64"(%83 : $Builtin.Int64, %29 : $Builtin.Int64) : $Builtin.Int1 // user: %85
  cond_fail %84 : $Builtin.Int1, "Negative value is not representable" // id: %85
  %86 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%81 : $Builtin.RawPointer, %78 : $Builtin.RawPointer, %83 : $Builtin.Int64, %75 : $Builtin.Int1) : $()
  dealloc_stack %76 : $*UInt8                     // id: %87
  br bb6(%72 : $Builtin.Int64)                    // id: %88

bb11:                                             // Preds: bb9
  strong_release %27 : $__ContiguousArrayStorageBase // id: %89
  dealloc_stack %19 : $*Int                       // id: %90
  br bb5                                          // id: %91
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5899, stage HighLevel,Function+EarlyLoopOpt, pass 14: SILCombine (sil-combine)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // user: %3
// %1                                             // users: %8, %4
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = alloc_stack $Array<UInt8>                  // users: %11, %8, %20, %32, %9, %3
  store %0 to %2 : $*Array<UInt8>                 // id: %3
  %4 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %5
  switch_enum %4 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb2 // id: %5

// %6                                             // users: %8, %73
bb1(%6 : $UnsafeMutableRawPointer):               // Preds: bb0
  // function_ref specialized closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %7 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFySRyADGXEfU_SayADG_TG5 : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // user: %8
  %8 = partial_apply [callee_guaranteed] [on_stack] %7(%2, %1, %6) : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // users: %9, %14
  %9 = mark_dependence %8 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) on %2 : $*Array<UInt8> // user: %10
  %10 = convert_function %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) to $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()> // user: %13
  %11 = load %2 : $*Array<UInt8>                  // user: %13
  // function_ref specialized Array.withContiguousStorageIfAvailable<A>(_:)
  %12 = function_ref @$sSa32withContiguousStorageIfAvailableyqd__Sgqd__SRyxGKXEKlFs5UInt8V_ytTg5 : $@convention(method) (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()>, @guaranteed Array<UInt8>) -> (Optional<()>, @error any Error) // user: %13
  %13 = apply [nothrow] %12(%10, %11) : $@convention(method) (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()>, @guaranteed Array<UInt8>) -> (Optional<()>, @error any Error) // user: %15
  dealloc_stack %8 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) // id: %14
  switch_enum %13 : $Optional<()>, case #Optional.some!enumelt: bb3, case #Optional.none!enumelt: bb4 // id: %15

bb2:                                              // Preds: bb0
  br bb5                                          // id: %16

bb3(%17 : $()):                                   // Preds: bb1
  br bb5                                          // id: %18

bb4:                                              // Preds: bb1
  %19 = alloc_stack $Int                          // users: %84, %36, %53, %28
  %20 = load %2 : $*Array<UInt8>                  // users: %53, %47, %39, %26, %25, %21
  %21 = struct_extract %20 : $Array<UInt8>, #Array._buffer // user: %22
  %22 = struct_extract %21 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %23
  strong_retain %22 : $__ContiguousArrayStorageBase // id: %23
  // function_ref specialized Array.startIndex.getter
  %24 = function_ref @$sSa10startIndexSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %25
  %25 = apply %24(%20) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %28
  %26 = struct_extract %20 : $Array<UInt8>, #Array._buffer // user: %27
  %27 = struct_extract %26 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %51, %54, %83
  store %25 to %19 : $*Int                        // id: %28
  %29 = integer_literal $Builtin.Int64, 0         // users: %30, %78
  br bb6(%29 : $Builtin.Int64)                    // id: %30

bb5:                                              // Preds: bb2 bb11 bb3
  %31 = tuple ()                                  // user: %33
  dealloc_stack %2 : $*Array<UInt8>               // id: %32
  return %31 : $()                                // id: %33

// %34                                            // users: %65, %74
bb6(%34 : $Builtin.Int64):                        // Preds: bb4 bb10
  %35 = alloc_stack $Optional<UInt8>              // users: %56, %44, %59, %58
  %36 = load %19 : $*Int                          // users: %47, %37
  %37 = struct_extract %36 : $Int, #Int._value    // user: %41
  // function_ref specialized Array.endIndex.getter
  %38 = function_ref @$sSa8endIndexSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %39
  %39 = apply %38(%20) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %40
  %40 = struct_extract %39 : $Int, #Int._value    // user: %41
  %41 = builtin "cmp_eq_Int64"(%37 : $Builtin.Int64, %40 : $Builtin.Int64) : $Builtin.Int1 // user: %42
  cond_br %41, bb7, bb8                           // id: %42

bb7:                                              // Preds: bb6
  %43 = enum $Optional<UInt8>, #Optional.none!enumelt // user: %44
  store %43 to %35 : $*Optional<UInt8>            // id: %44
  br bb9                                          // id: %45

bb8:                                              // Preds: bb6
  // function_ref specialized Array.subscript.read
  %46 = function_ref @$sSayxSicirs5UInt8V_Tg5 : $@yield_once @convention(method) (Int, @guaranteed Array<UInt8>) -> @yields @in_guaranteed UInt8 // user: %47
  (%47, %48) = begin_apply %46(%36, %20) : $@yield_once @convention(method) (Int, @guaranteed Array<UInt8>) -> @yields @in_guaranteed UInt8 // users: %49, %50
  %49 = load %47 : $*UInt8                        // user: %55
  end_apply %48                                   // id: %50
  strong_retain %27 : $__ContiguousArrayStorageBase // id: %51
  // function_ref specialized Array.formIndex(after:)
  %52 = function_ref @$sSa9formIndex5afterySiz_tFs5UInt8V_Tg5 : $@convention(method) (@inout Int, @guaranteed Array<UInt8>) -> () // user: %53
  %53 = apply %52(%19, %20) : $@convention(method) (@inout Int, @guaranteed Array<UInt8>) -> ()
  strong_release %27 : $__ContiguousArrayStorageBase // id: %54
  %55 = enum $Optional<UInt8>, #Optional.some!enumelt, %49 : $UInt8 // user: %56
  store %55 to %35 : $*Optional<UInt8>            // id: %56
  br bb9                                          // id: %57

bb9:                                              // Preds: bb8 bb7
  %58 = load %35 : $*Optional<UInt8>              // users: %62, %60
  dealloc_stack %35 : $*Optional<UInt8>           // id: %59
  switch_enum %58 : $Optional<UInt8>, case #Optional.some!enumelt: bb10, case #Optional.none!enumelt: bb11 // id: %60

bb10(%61 : $UInt8):                               // Preds: bb9
  %62 = unchecked_enum_data %58 : $Optional<UInt8>, #Optional.some!enumelt // user: %71
  %63 = integer_literal $Builtin.Int64, 1         // user: %65
  %64 = integer_literal $Builtin.Int1, -1         // user: %65
  %65 = builtin "sadd_with_overflow_Int64"(%34 : $Builtin.Int64, %63 : $Builtin.Int64, %64 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %67, %66
  %66 = tuple_extract %65 : $(Builtin.Int64, Builtin.Int1), 0 // user: %82
  %67 = tuple_extract %65 : $(Builtin.Int64, Builtin.Int1), 1 // user: %68
  cond_fail %67 : $Builtin.Int1, "arithmetic overflow" // id: %68
  %69 = integer_literal $Builtin.Int1, 0          // user: %80
  %70 = alloc_stack $UInt8                        // users: %81, %72, %71
  store %62 to %70 : $*UInt8                      // id: %71
  %72 = address_to_pointer [stack_protection] %70 : $*UInt8 to $Builtin.RawPointer // user: %80
  %73 = struct_extract %6 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %75
  %74 = builtin "truncOrBitCast_Int64_Word"(%34 : $Builtin.Int64) : $Builtin.Word // user: %75
  %75 = index_raw_pointer %73 : $Builtin.RawPointer, %74 : $Builtin.Word // user: %80
  %76 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %77
  %77 = builtin "sextOrBitCast_Word_Int64"(%76 : $Builtin.Word) : $Builtin.Int64 // users: %80, %78
  %78 = builtin "cmp_slt_Int64"(%77 : $Builtin.Int64, %29 : $Builtin.Int64) : $Builtin.Int1 // user: %79
  cond_fail %78 : $Builtin.Int1, "Negative value is not representable" // id: %79
  %80 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%75 : $Builtin.RawPointer, %72 : $Builtin.RawPointer, %77 : $Builtin.Int64, %69 : $Builtin.Int1) : $()
  dealloc_stack %70 : $*UInt8                     // id: %81
  br bb6(%66 : $Builtin.Int64)                    // id: %82

bb11:                                             // Preds: bb9
  strong_release %27 : $__ContiguousArrayStorageBase // id: %83
  dealloc_stack %19 : $*Int                       // id: %84
  br bb5                                          // id: %85
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5904, stage HighLevel,Function+EarlyLoopOpt, pass 20: ARCSequenceOpts (arc-sequence-opts)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // user: %3
// %1                                             // users: %8, %4
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = alloc_stack $Array<UInt8>                  // users: %11, %8, %20, %32, %9, %3
  store %0 to %2 : $*Array<UInt8>                 // id: %3
  %4 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %5
  switch_enum %4 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb2 // id: %5

// %6                                             // users: %8, %71
bb1(%6 : $UnsafeMutableRawPointer):               // Preds: bb0
  // function_ref specialized closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %7 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFySRyADGXEfU_SayADG_TG5 : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // user: %8
  %8 = partial_apply [callee_guaranteed] [on_stack] %7(%2, %1, %6) : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // users: %9, %14
  %9 = mark_dependence %8 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) on %2 : $*Array<UInt8> // user: %10
  %10 = convert_function %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) to $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()> // user: %13
  %11 = load %2 : $*Array<UInt8>                  // user: %13
  // function_ref specialized Array.withContiguousStorageIfAvailable<A>(_:)
  %12 = function_ref @$sSa32withContiguousStorageIfAvailableyqd__Sgqd__SRyxGKXEKlFs5UInt8V_ytTg5 : $@convention(method) (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()>, @guaranteed Array<UInt8>) -> (Optional<()>, @error any Error) // user: %13
  %13 = apply [nothrow] %12(%10, %11) : $@convention(method) (@guaranteed @noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()>, @guaranteed Array<UInt8>) -> (Optional<()>, @error any Error) // user: %15
  dealloc_stack %8 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) // id: %14
  switch_enum %13 : $Optional<()>, case #Optional.some!enumelt: bb3, case #Optional.none!enumelt: bb4 // id: %15

bb2:                                              // Preds: bb0
  br bb5                                          // id: %16

bb3(%17 : $()):                                   // Preds: bb1
  br bb5                                          // id: %18

bb4:                                              // Preds: bb1
  %19 = alloc_stack $Int                          // users: %82, %36, %52, %28
  %20 = load %2 : $*Array<UInt8>                  // users: %52, %47, %39, %26, %25, %21
  %21 = struct_extract %20 : $Array<UInt8>, #Array._buffer // user: %22
  %22 = struct_extract %21 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %23
  strong_retain %22 : $__ContiguousArrayStorageBase // id: %23
  // function_ref specialized Array.startIndex.getter
  %24 = function_ref @$sSa10startIndexSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %25
  %25 = apply %24(%20) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %28
  %26 = struct_extract %20 : $Array<UInt8>, #Array._buffer // user: %27
  %27 = struct_extract %26 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %81
  store %25 to %19 : $*Int                        // id: %28
  %29 = integer_literal $Builtin.Int64, 0         // users: %30, %76
  br bb6(%29 : $Builtin.Int64)                    // id: %30

bb5:                                              // Preds: bb2 bb11 bb3
  %31 = tuple ()                                  // user: %33
  dealloc_stack %2 : $*Array<UInt8>               // id: %32
  return %31 : $()                                // id: %33

// %34                                            // users: %63, %72
bb6(%34 : $Builtin.Int64):                        // Preds: bb4 bb10
  %35 = alloc_stack $Optional<UInt8>              // users: %54, %44, %57, %56
  %36 = load %19 : $*Int                          // users: %47, %37
  %37 = struct_extract %36 : $Int, #Int._value    // user: %41
  // function_ref specialized Array.endIndex.getter
  %38 = function_ref @$sSa8endIndexSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %39
  %39 = apply %38(%20) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %40
  %40 = struct_extract %39 : $Int, #Int._value    // user: %41
  %41 = builtin "cmp_eq_Int64"(%37 : $Builtin.Int64, %40 : $Builtin.Int64) : $Builtin.Int1 // user: %42
  cond_br %41, bb7, bb8                           // id: %42

bb7:                                              // Preds: bb6
  %43 = enum $Optional<UInt8>, #Optional.none!enumelt // user: %44
  store %43 to %35 : $*Optional<UInt8>            // id: %44
  br bb9                                          // id: %45

bb8:                                              // Preds: bb6
  // function_ref specialized Array.subscript.read
  %46 = function_ref @$sSayxSicirs5UInt8V_Tg5 : $@yield_once @convention(method) (Int, @guaranteed Array<UInt8>) -> @yields @in_guaranteed UInt8 // user: %47
  (%47, %48) = begin_apply %46(%36, %20) : $@yield_once @convention(method) (Int, @guaranteed Array<UInt8>) -> @yields @in_guaranteed UInt8 // users: %49, %50
  %49 = load %47 : $*UInt8                        // user: %53
  end_apply %48                                   // id: %50
  // function_ref specialized Array.formIndex(after:)
  %51 = function_ref @$sSa9formIndex5afterySiz_tFs5UInt8V_Tg5 : $@convention(method) (@inout Int, @guaranteed Array<UInt8>) -> () // user: %52
  %52 = apply %51(%19, %20) : $@convention(method) (@inout Int, @guaranteed Array<UInt8>) -> ()
  %53 = enum $Optional<UInt8>, #Optional.some!enumelt, %49 : $UInt8 // user: %54
  store %53 to %35 : $*Optional<UInt8>            // id: %54
  br bb9                                          // id: %55

bb9:                                              // Preds: bb8 bb7
  %56 = load %35 : $*Optional<UInt8>              // users: %60, %58
  dealloc_stack %35 : $*Optional<UInt8>           // id: %57
  switch_enum %56 : $Optional<UInt8>, case #Optional.some!enumelt: bb10, case #Optional.none!enumelt: bb11 // id: %58

bb10(%59 : $UInt8):                               // Preds: bb9
  %60 = unchecked_enum_data %56 : $Optional<UInt8>, #Optional.some!enumelt // user: %69
  %61 = integer_literal $Builtin.Int64, 1         // user: %63
  %62 = integer_literal $Builtin.Int1, -1         // user: %63
  %63 = builtin "sadd_with_overflow_Int64"(%34 : $Builtin.Int64, %61 : $Builtin.Int64, %62 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %65, %64
  %64 = tuple_extract %63 : $(Builtin.Int64, Builtin.Int1), 0 // user: %80
  %65 = tuple_extract %63 : $(Builtin.Int64, Builtin.Int1), 1 // user: %66
  cond_fail %65 : $Builtin.Int1, "arithmetic overflow" // id: %66
  %67 = integer_literal $Builtin.Int1, 0          // user: %78
  %68 = alloc_stack $UInt8                        // users: %79, %70, %69
  store %60 to %68 : $*UInt8                      // id: %69
  %70 = address_to_pointer [stack_protection] %68 : $*UInt8 to $Builtin.RawPointer // user: %78
  %71 = struct_extract %6 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %73
  %72 = builtin "truncOrBitCast_Int64_Word"(%34 : $Builtin.Int64) : $Builtin.Word // user: %73
  %73 = index_raw_pointer %71 : $Builtin.RawPointer, %72 : $Builtin.Word // user: %78
  %74 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %75
  %75 = builtin "sextOrBitCast_Word_Int64"(%74 : $Builtin.Word) : $Builtin.Int64 // users: %78, %76
  %76 = builtin "cmp_slt_Int64"(%75 : $Builtin.Int64, %29 : $Builtin.Int64) : $Builtin.Int1 // user: %77
  cond_fail %76 : $Builtin.Int1, "Negative value is not representable" // id: %77
  %78 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%73 : $Builtin.RawPointer, %70 : $Builtin.RawPointer, %75 : $Builtin.Int64, %67 : $Builtin.Int1) : $()
  dealloc_stack %68 : $*UInt8                     // id: %79
  br bb6(%64 : $Builtin.Int64)                    // id: %80

bb11:                                             // Preds: bb9
  strong_release %27 : $__ContiguousArrayStorageBase // id: %81
  dealloc_stack %19 : $*Int                       // id: %82
  br bb5                                          // id: %83
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5909, stage HighLevel,Function+EarlyLoopOpt, pass 25: EarlyPerfInliner (early-inline)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // user: %3
// %1                                             // users: %8, %4
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = alloc_stack $Array<UInt8>                  // users: %11, %8, %70, %82, %9, %3
  store %0 to %2 : $*Array<UInt8>                 // id: %3
  %4 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %5
  switch_enum %4 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb6 // id: %5

// %6                                             // users: %8, %138
bb1(%6 : $UnsafeMutableRawPointer):               // Preds: bb0
  // function_ref specialized closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %7 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFySRyADGXEfU_SayADG_TG5 : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // user: %8
  %8 = partial_apply [callee_guaranteed] [on_stack] %7(%2, %1, %6) : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // users: %9, %60
  %9 = mark_dependence %8 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) on %2 : $*Array<UInt8> // user: %10
  %10 = convert_function %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) to $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()> // user: %54
  %11 = load %2 : $*Array<UInt8>                  // user: %14
  %12 = alloc_stack $Optional<()>                 // users: %64, %59, %58, %57, %13
  %13 = init_enum_data_addr %12 : $*Optional<()>, #Optional.some!enumelt // user: %54
  %14 = struct_extract %11 : $Array<UInt8>, #Array._buffer // users: %63, %56, %15
  %15 = struct_extract %14 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %20, %16
  %16 = ref_tail_addr %15 : $__ContiguousArrayStorageBase, $UInt8 // user: %17
  %17 = address_to_pointer %16 : $*UInt8 to $Builtin.RawPointer // user: %18
  %18 = struct $UnsafePointer<UInt8> (%17 : $Builtin.RawPointer) // user: %19
  %19 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt, %18 : $UnsafePointer<UInt8> // user: %53
  %20 = ref_element_addr %15 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %21
  %21 = struct_element_addr %20 : $*_ArrayBody, #_ArrayBody._storage // user: %22
  %22 = struct_element_addr %21 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %23
  %23 = struct_element_addr %22 : $*Int, #Int._value // user: %24
  %24 = load %23 : $*Builtin.Int64                // users: %50, %37
  %25 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %27
  %26 = integer_literal $Builtin.Word, 24         // user: %29
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %29
  %28 = integer_literal $Builtin.Int8, 2          // users: %44, %35, %29
  %29 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %28 : $Builtin.Int8) // user: %48
  %30 = integer_literal $Builtin.Int64, 15505     // user: %31
  %31 = struct $UInt (%30 : $Builtin.Int64)       // user: %48
  %32 = string_literal utf8 ""                    // user: %34
  %33 = integer_literal $Builtin.Word, 0          // user: %35
  %34 = builtin "ptrtoint_Word"(%32 : $Builtin.RawPointer) : $Builtin.Word // user: %35
  %35 = struct $StaticString (%34 : $Builtin.Word, %33 : $Builtin.Word, %28 : $Builtin.Int8) // user: %48
  %36 = integer_literal $Builtin.Int64, 0         // user: %37
  %37 = builtin "cmp_slt_Int64"(%24 : $Builtin.Int64, %36 : $Builtin.Int64) : $Builtin.Int1 // user: %39
  %38 = integer_literal $Builtin.Int1, 0          // user: %39
  %39 = builtin "int_expect_Int1"(%37 : $Builtin.Int1, %38 : $Builtin.Int1) : $Builtin.Int1 // user: %40
  cond_br %39, bb2, bb3                           // id: %40

bb2:                                              // Preds: bb1
  %41 = string_literal utf8 "Fatal error"         // user: %43
  %42 = integer_literal $Builtin.Word, 11         // user: %44
  %43 = builtin "ptrtoint_Word"(%41 : $Builtin.RawPointer) : $Builtin.Word // user: %44
  %44 = struct $StaticString (%43 : $Builtin.Word, %42 : $Builtin.Word, %28 : $Builtin.Int8) // user: %48
  %45 = integer_literal $Builtin.Int32, 0         // user: %46
  %46 = struct $UInt32 (%45 : $Builtin.Int32)     // user: %48
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %47 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %48
  %48 = apply %47(%44, %35, %29, %31, %46) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %49

bb3:                                              // Preds: bb1
  %50 = builtin "assumeNonNegative_Int64"(%24 : $Builtin.Int64) : $Builtin.Int64 // user: %51
  %51 = builtin "assumeNonNegative_Int64"(%50 : $Builtin.Int64) : $Builtin.Int64 // user: %52
  %52 = struct $Int (%51 : $Builtin.Int64)        // user: %53
  %53 = struct $UnsafeBufferPointer<UInt8> (%19 : $Optional<UnsafePointer<UInt8>>, %52 : $Int) // user: %54
  try_apply %10(%13, %53) : $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()>, normal bb4, error bb5 // id: %54

bb4(%55 : $()):                                   // Preds: bb3
  fix_lifetime %14 : $_ContiguousArrayBuffer<UInt8> // id: %56
  inject_enum_addr %12 : $*Optional<()>, #Optional.some!enumelt // id: %57
  %58 = load %12 : $*Optional<()>                 // user: %61
  dealloc_stack %12 : $*Optional<()>              // id: %59
  dealloc_stack %8 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) // id: %60
  switch_enum %58 : $Optional<()>, case #Optional.some!enumelt: bb7, case #Optional.none!enumelt: bb8 // id: %61

bb5(%62 : $any Error):                            // Preds: bb3
  fix_lifetime %14 : $_ContiguousArrayBuffer<UInt8> // id: %63
  dealloc_stack %12 : $*Optional<()>              // id: %64
  unreachable                                     // id: %65

bb6:                                              // Preds: bb0
  br bb9                                          // id: %66

bb7(%67 : $()):                                   // Preds: bb4
  br bb9                                          // id: %68

bb8:                                              // Preds: bb4
  %69 = alloc_stack $Int                          // users: %116, %108, %149, %86, %78
  %70 = load %2 : $*Array<UInt8>                  // users: %89, %102, %100, %98, %76, %71
  %71 = struct_extract %70 : $Array<UInt8>, #Array._buffer // user: %72
  %72 = struct_extract %71 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %73
  strong_retain %72 : $__ContiguousArrayStorageBase // id: %73
  %74 = integer_literal $Builtin.Int64, 0         // user: %75
  %75 = struct $Int (%74 : $Builtin.Int64)        // user: %78
  %76 = struct_extract %70 : $Array<UInt8>, #Array._buffer // user: %77
  %77 = struct_extract %76 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %148
  store %75 to %69 : $*Int                        // id: %78
  %79 = integer_literal $Builtin.Int64, 0         // users: %80, %143
  br bb10(%79 : $Builtin.Int64)                   // id: %80

bb9:                                              // Preds: bb6 bb16 bb7
  %81 = tuple ()                                  // user: %83
  dealloc_stack %2 : $*Array<UInt8>               // id: %82
  return %81 : $()                                // id: %83

// %84                                            // users: %130, %139
bb10(%84 : $Builtin.Int64):                       // Preds: bb8 bb15
  %85 = alloc_stack $Optional<UInt8>              // users: %119, %94, %124, %123
  %86 = load %69 : $*Int                          // users: %102, %100, %87
  %87 = struct_extract %86 : $Int, #Int._value    // user: %91
  // function_ref specialized Array._getCount()
  %88 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %89
  %89 = apply %88(%70) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %90
  %90 = struct_extract %89 : $Int, #Int._value    // user: %91
  %91 = builtin "cmp_eq_Int64"(%87 : $Builtin.Int64, %90 : $Builtin.Int64) : $Builtin.Int1 // user: %92
  cond_br %91, bb11, bb12                         // id: %92

bb11:                                             // Preds: bb10
  %93 = enum $Optional<UInt8>, #Optional.none!enumelt // user: %94
  store %93 to %85 : $*Optional<UInt8>            // id: %94
  br bb14                                         // id: %95

bb12:                                             // Preds: bb10
  %96 = alloc_stack $UInt8                        // users: %104, %121, %105, %103
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %97 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %98
  %98 = apply %97(%70) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %102, %100
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %99 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %100
  %100 = apply %99(%86, %98, %70) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %102
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %101 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %102
  %102 = apply %101(%86, %98, %100, %70) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %103
  store %102 to %96 : $*UInt8                     // id: %103
  %104 = load %96 : $*UInt8                       // user: %118
  dealloc_stack %96 : $*UInt8                     // id: %105
  %106 = tuple ()
  %107 = integer_literal $Builtin.Int64, 1        // user: %111
  %108 = struct_element_addr %69 : $*Int, #Int._value // user: %109
  %109 = load %108 : $*Builtin.Int64              // user: %111
  %110 = integer_literal $Builtin.Int1, -1        // user: %111
  %111 = builtin "sadd_with_overflow_Int64"(%109 : $Builtin.Int64, %107 : $Builtin.Int64, %110 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %113, %112
  %112 = tuple_extract %111 : $(Builtin.Int64, Builtin.Int1), 0 // user: %115
  %113 = tuple_extract %111 : $(Builtin.Int64, Builtin.Int1), 1 // user: %114
  cond_fail %113 : $Builtin.Int1, "arithmetic overflow" // id: %114
  %115 = struct $Int (%112 : $Builtin.Int64)      // user: %116
  store %115 to %69 : $*Int                       // id: %116
  %117 = tuple ()
  %118 = enum $Optional<UInt8>, #Optional.some!enumelt, %104 : $UInt8 // user: %119
  store %118 to %85 : $*Optional<UInt8>           // id: %119
  br bb14                                         // id: %120

bb13:
  dealloc_stack %96 : $*UInt8                     // id: %121
  unreachable                                     // id: %122

bb14:                                             // Preds: bb12 bb11
  %123 = load %85 : $*Optional<UInt8>             // users: %127, %125
  dealloc_stack %85 : $*Optional<UInt8>           // id: %124
  switch_enum %123 : $Optional<UInt8>, case #Optional.some!enumelt: bb15, case #Optional.none!enumelt: bb16 // id: %125

bb15(%126 : $UInt8):                              // Preds: bb14
  %127 = unchecked_enum_data %123 : $Optional<UInt8>, #Optional.some!enumelt // user: %136
  %128 = integer_literal $Builtin.Int64, 1        // user: %130
  %129 = integer_literal $Builtin.Int1, -1        // user: %130
  %130 = builtin "sadd_with_overflow_Int64"(%84 : $Builtin.Int64, %128 : $Builtin.Int64, %129 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %132, %131
  %131 = tuple_extract %130 : $(Builtin.Int64, Builtin.Int1), 0 // user: %147
  %132 = tuple_extract %130 : $(Builtin.Int64, Builtin.Int1), 1 // user: %133
  cond_fail %132 : $Builtin.Int1, "arithmetic overflow" // id: %133
  %134 = integer_literal $Builtin.Int1, 0         // user: %145
  %135 = alloc_stack $UInt8                       // users: %146, %137, %136
  store %127 to %135 : $*UInt8                    // id: %136
  %137 = address_to_pointer [stack_protection] %135 : $*UInt8 to $Builtin.RawPointer // user: %145
  %138 = struct_extract %6 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %140
  %139 = builtin "truncOrBitCast_Int64_Word"(%84 : $Builtin.Int64) : $Builtin.Word // user: %140
  %140 = index_raw_pointer %138 : $Builtin.RawPointer, %139 : $Builtin.Word // user: %145
  %141 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %142
  %142 = builtin "sextOrBitCast_Word_Int64"(%141 : $Builtin.Word) : $Builtin.Int64 // users: %145, %143
  %143 = builtin "cmp_slt_Int64"(%142 : $Builtin.Int64, %79 : $Builtin.Int64) : $Builtin.Int1 // user: %144
  cond_fail %143 : $Builtin.Int1, "Negative value is not representable" // id: %144
  %145 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%140 : $Builtin.RawPointer, %137 : $Builtin.RawPointer, %142 : $Builtin.Int64, %134 : $Builtin.Int1) : $()
  dealloc_stack %135 : $*UInt8                    // id: %146
  br bb10(%131 : $Builtin.Int64)                  // id: %147

bb16:                                             // Preds: bb14
  strong_release %77 : $__ContiguousArrayStorageBase // id: %148
  dealloc_stack %69 : $*Int                       // id: %149
  br bb9                                          // id: %150
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5915, stage HighLevel,Function+EarlyLoopOpt, pass 5: DCE (dce)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // user: %3
// %1                                             // users: %8, %4
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = alloc_stack $Array<UInt8>                  // users: %11, %8, %70, %82, %9, %3
  store %0 to %2 : $*Array<UInt8>                 // id: %3
  %4 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %5
  switch_enum %4 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb6 // id: %5

// %6                                             // users: %8, %134
bb1(%6 : $UnsafeMutableRawPointer):               // Preds: bb0
  // function_ref specialized closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %7 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFySRyADGXEfU_SayADG_TG5 : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // user: %8
  %8 = partial_apply [callee_guaranteed] [on_stack] %7(%2, %1, %6) : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // users: %9, %60
  %9 = mark_dependence %8 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) on %2 : $*Array<UInt8> // user: %10
  %10 = convert_function %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) to $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()> // user: %54
  %11 = load %2 : $*Array<UInt8>                  // user: %14
  %12 = alloc_stack $Optional<()>                 // users: %64, %59, %58, %57, %13
  %13 = init_enum_data_addr %12 : $*Optional<()>, #Optional.some!enumelt // user: %54
  %14 = struct_extract %11 : $Array<UInt8>, #Array._buffer // users: %63, %56, %15
  %15 = struct_extract %14 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %20, %16
  %16 = ref_tail_addr %15 : $__ContiguousArrayStorageBase, $UInt8 // user: %17
  %17 = address_to_pointer %16 : $*UInt8 to $Builtin.RawPointer // user: %18
  %18 = struct $UnsafePointer<UInt8> (%17 : $Builtin.RawPointer) // user: %19
  %19 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt, %18 : $UnsafePointer<UInt8> // user: %53
  %20 = ref_element_addr %15 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %21
  %21 = struct_element_addr %20 : $*_ArrayBody, #_ArrayBody._storage // user: %22
  %22 = struct_element_addr %21 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %23
  %23 = struct_element_addr %22 : $*Int, #Int._value // user: %24
  %24 = load %23 : $*Builtin.Int64                // users: %50, %37
  %25 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %27
  %26 = integer_literal $Builtin.Word, 24         // user: %29
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %29
  %28 = integer_literal $Builtin.Int8, 2          // users: %44, %35, %29
  %29 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %28 : $Builtin.Int8) // user: %48
  %30 = integer_literal $Builtin.Int64, 15505     // user: %31
  %31 = struct $UInt (%30 : $Builtin.Int64)       // user: %48
  %32 = string_literal utf8 ""                    // user: %34
  %33 = integer_literal $Builtin.Word, 0          // user: %35
  %34 = builtin "ptrtoint_Word"(%32 : $Builtin.RawPointer) : $Builtin.Word // user: %35
  %35 = struct $StaticString (%34 : $Builtin.Word, %33 : $Builtin.Word, %28 : $Builtin.Int8) // user: %48
  %36 = integer_literal $Builtin.Int64, 0         // user: %37
  %37 = builtin "cmp_slt_Int64"(%24 : $Builtin.Int64, %36 : $Builtin.Int64) : $Builtin.Int1 // user: %39
  %38 = integer_literal $Builtin.Int1, 0          // user: %39
  %39 = builtin "int_expect_Int1"(%37 : $Builtin.Int1, %38 : $Builtin.Int1) : $Builtin.Int1 // user: %40
  cond_br %39, bb2, bb3                           // id: %40

bb2:                                              // Preds: bb1
  %41 = string_literal utf8 "Fatal error"         // user: %43
  %42 = integer_literal $Builtin.Word, 11         // user: %44
  %43 = builtin "ptrtoint_Word"(%41 : $Builtin.RawPointer) : $Builtin.Word // user: %44
  %44 = struct $StaticString (%43 : $Builtin.Word, %42 : $Builtin.Word, %28 : $Builtin.Int8) // user: %48
  %45 = integer_literal $Builtin.Int32, 0         // user: %46
  %46 = struct $UInt32 (%45 : $Builtin.Int32)     // user: %48
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %47 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %48
  %48 = apply %47(%44, %35, %29, %31, %46) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %49

bb3:                                              // Preds: bb1
  %50 = builtin "assumeNonNegative_Int64"(%24 : $Builtin.Int64) : $Builtin.Int64 // user: %51
  %51 = builtin "assumeNonNegative_Int64"(%50 : $Builtin.Int64) : $Builtin.Int64 // user: %52
  %52 = struct $Int (%51 : $Builtin.Int64)        // user: %53
  %53 = struct $UnsafeBufferPointer<UInt8> (%19 : $Optional<UnsafePointer<UInt8>>, %52 : $Int) // user: %54
  try_apply %10(%13, %53) : $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()>, normal bb4, error bb5 // id: %54

bb4(%55 : $()):                                   // Preds: bb3
  fix_lifetime %14 : $_ContiguousArrayBuffer<UInt8> // id: %56
  inject_enum_addr %12 : $*Optional<()>, #Optional.some!enumelt // id: %57
  %58 = load %12 : $*Optional<()>                 // user: %61
  dealloc_stack %12 : $*Optional<()>              // id: %59
  dealloc_stack %8 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) // id: %60
  switch_enum %58 : $Optional<()>, case #Optional.some!enumelt: bb7, case #Optional.none!enumelt: bb8 // id: %61

bb5(%62 : $any Error):                            // Preds: bb3
  fix_lifetime %14 : $_ContiguousArrayBuffer<UInt8> // id: %63
  dealloc_stack %12 : $*Optional<()>              // id: %64
  unreachable                                     // id: %65

bb6:                                              // Preds: bb0
  br bb9                                          // id: %66

bb7(%67 : $()):                                   // Preds: bb4
  br bb9                                          // id: %68

bb8:                                              // Preds: bb4
  %69 = alloc_stack $Int                          // users: %115, %107, %145, %86, %78
  %70 = load %2 : $*Array<UInt8>                  // users: %89, %102, %100, %98, %76, %71
  %71 = struct_extract %70 : $Array<UInt8>, #Array._buffer // user: %72
  %72 = struct_extract %71 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %73
  strong_retain %72 : $__ContiguousArrayStorageBase // id: %73
  %74 = integer_literal $Builtin.Int64, 0         // user: %75
  %75 = struct $Int (%74 : $Builtin.Int64)        // user: %78
  %76 = struct_extract %70 : $Array<UInt8>, #Array._buffer // user: %77
  %77 = struct_extract %76 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %144
  store %75 to %69 : $*Int                        // id: %78
  %79 = integer_literal $Builtin.Int64, 0         // users: %80, %139
  br bb10(%79 : $Builtin.Int64)                   // id: %80

bb9:                                              // Preds: bb6 bb15 bb7
  %81 = tuple ()                                  // user: %83
  dealloc_stack %2 : $*Array<UInt8>               // id: %82
  return %81 : $()                                // id: %83

// %84                                            // users: %126, %135
bb10(%84 : $Builtin.Int64):                       // Preds: bb8 bb14
  %85 = alloc_stack $Optional<UInt8>              // users: %117, %94, %120, %119
  %86 = load %69 : $*Int                          // users: %102, %100, %87
  %87 = struct_extract %86 : $Int, #Int._value    // user: %91
  // function_ref specialized Array._getCount()
  %88 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %89
  %89 = apply %88(%70) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %90
  %90 = struct_extract %89 : $Int, #Int._value    // user: %91
  %91 = builtin "cmp_eq_Int64"(%87 : $Builtin.Int64, %90 : $Builtin.Int64) : $Builtin.Int1 // user: %92
  cond_br %91, bb11, bb12                         // id: %92

bb11:                                             // Preds: bb10
  %93 = enum $Optional<UInt8>, #Optional.none!enumelt // user: %94
  store %93 to %85 : $*Optional<UInt8>            // id: %94
  br bb13                                         // id: %95

bb12:                                             // Preds: bb10
  %96 = alloc_stack $UInt8                        // users: %104, %105, %103
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %97 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %98
  %98 = apply %97(%70) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %102, %100
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %99 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %100
  %100 = apply %99(%86, %98, %70) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %102
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %101 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %102
  %102 = apply %101(%86, %98, %100, %70) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %103
  store %102 to %96 : $*UInt8                     // id: %103
  %104 = load %96 : $*UInt8                       // user: %116
  dealloc_stack %96 : $*UInt8                     // id: %105
  %106 = integer_literal $Builtin.Int64, 1        // user: %110
  %107 = struct_element_addr %69 : $*Int, #Int._value // user: %108
  %108 = load %107 : $*Builtin.Int64              // user: %110
  %109 = integer_literal $Builtin.Int1, -1        // user: %110
  %110 = builtin "sadd_with_overflow_Int64"(%108 : $Builtin.Int64, %106 : $Builtin.Int64, %109 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %112, %111
  %111 = tuple_extract %110 : $(Builtin.Int64, Builtin.Int1), 0 // user: %114
  %112 = tuple_extract %110 : $(Builtin.Int64, Builtin.Int1), 1 // user: %113
  cond_fail %112 : $Builtin.Int1, "arithmetic overflow" // id: %113
  %114 = struct $Int (%111 : $Builtin.Int64)      // user: %115
  store %114 to %69 : $*Int                       // id: %115
  %116 = enum $Optional<UInt8>, #Optional.some!enumelt, %104 : $UInt8 // user: %117
  store %116 to %85 : $*Optional<UInt8>           // id: %117
  br bb13                                         // id: %118

bb13:                                             // Preds: bb12 bb11
  %119 = load %85 : $*Optional<UInt8>             // users: %123, %121
  dealloc_stack %85 : $*Optional<UInt8>           // id: %120
  switch_enum %119 : $Optional<UInt8>, case #Optional.some!enumelt: bb14, case #Optional.none!enumelt: bb15 // id: %121

bb14(%122 : $UInt8):                              // Preds: bb13
  %123 = unchecked_enum_data %119 : $Optional<UInt8>, #Optional.some!enumelt // user: %132
  %124 = integer_literal $Builtin.Int64, 1        // user: %126
  %125 = integer_literal $Builtin.Int1, -1        // user: %126
  %126 = builtin "sadd_with_overflow_Int64"(%84 : $Builtin.Int64, %124 : $Builtin.Int64, %125 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %128, %127
  %127 = tuple_extract %126 : $(Builtin.Int64, Builtin.Int1), 0 // user: %143
  %128 = tuple_extract %126 : $(Builtin.Int64, Builtin.Int1), 1 // user: %129
  cond_fail %128 : $Builtin.Int1, "arithmetic overflow" // id: %129
  %130 = integer_literal $Builtin.Int1, 0         // user: %141
  %131 = alloc_stack $UInt8                       // users: %142, %133, %132
  store %123 to %131 : $*UInt8                    // id: %132
  %133 = address_to_pointer [stack_protection] %131 : $*UInt8 to $Builtin.RawPointer // user: %141
  %134 = struct_extract %6 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %136
  %135 = builtin "truncOrBitCast_Int64_Word"(%84 : $Builtin.Int64) : $Builtin.Word // user: %136
  %136 = index_raw_pointer %134 : $Builtin.RawPointer, %135 : $Builtin.Word // user: %141
  %137 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %138
  %138 = builtin "sextOrBitCast_Word_Int64"(%137 : $Builtin.Word) : $Builtin.Int64 // users: %141, %139
  %139 = builtin "cmp_slt_Int64"(%138 : $Builtin.Int64, %79 : $Builtin.Int64) : $Builtin.Int1 // user: %140
  cond_fail %139 : $Builtin.Int1, "Negative value is not representable" // id: %140
  %141 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%136 : $Builtin.RawPointer, %133 : $Builtin.RawPointer, %138 : $Builtin.Int64, %130 : $Builtin.Int1) : $()
  dealloc_stack %131 : $*UInt8                    // id: %142
  br bb10(%127 : $Builtin.Int64)                  // id: %143

bb15:                                             // Preds: bb13
  strong_release %77 : $__ContiguousArrayStorageBase // id: %144
  dealloc_stack %69 : $*Int                       // id: %145
  br bb9                                          // id: %146
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5918, stage HighLevel,Function+EarlyLoopOpt, pass 8: EarlySROA (early-sroa)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // user: %3
// %1                                             // users: %8, %4
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = alloc_stack $Array<UInt8>                  // users: %11, %8, %70, %83, %9, %3
  store %0 to %2 : $*Array<UInt8>                 // id: %3
  %4 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %5
  switch_enum %4 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb6 // id: %5

// %6                                             // users: %8, %136
bb1(%6 : $UnsafeMutableRawPointer):               // Preds: bb0
  // function_ref specialized closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %7 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFySRyADGXEfU_SayADG_TG5 : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // user: %8
  %8 = partial_apply [callee_guaranteed] [on_stack] %7(%2, %1, %6) : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // users: %9, %60
  %9 = mark_dependence %8 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) on %2 : $*Array<UInt8> // user: %10
  %10 = convert_function %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) to $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()> // user: %54
  %11 = load %2 : $*Array<UInt8>                  // user: %14
  %12 = alloc_stack $Optional<()>                 // users: %64, %59, %58, %57, %13
  %13 = init_enum_data_addr %12 : $*Optional<()>, #Optional.some!enumelt // user: %54
  %14 = struct_extract %11 : $Array<UInt8>, #Array._buffer // users: %63, %56, %15
  %15 = struct_extract %14 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %20, %16
  %16 = ref_tail_addr %15 : $__ContiguousArrayStorageBase, $UInt8 // user: %17
  %17 = address_to_pointer %16 : $*UInt8 to $Builtin.RawPointer // user: %18
  %18 = struct $UnsafePointer<UInt8> (%17 : $Builtin.RawPointer) // user: %19
  %19 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt, %18 : $UnsafePointer<UInt8> // user: %53
  %20 = ref_element_addr %15 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %21
  %21 = struct_element_addr %20 : $*_ArrayBody, #_ArrayBody._storage // user: %22
  %22 = struct_element_addr %21 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %23
  %23 = struct_element_addr %22 : $*Int, #Int._value // user: %24
  %24 = load %23 : $*Builtin.Int64                // users: %50, %37
  %25 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %27
  %26 = integer_literal $Builtin.Word, 24         // user: %29
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %29
  %28 = integer_literal $Builtin.Int8, 2          // users: %44, %35, %29
  %29 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %28 : $Builtin.Int8) // user: %48
  %30 = integer_literal $Builtin.Int64, 15505     // user: %31
  %31 = struct $UInt (%30 : $Builtin.Int64)       // user: %48
  %32 = string_literal utf8 ""                    // user: %34
  %33 = integer_literal $Builtin.Word, 0          // user: %35
  %34 = builtin "ptrtoint_Word"(%32 : $Builtin.RawPointer) : $Builtin.Word // user: %35
  %35 = struct $StaticString (%34 : $Builtin.Word, %33 : $Builtin.Word, %28 : $Builtin.Int8) // user: %48
  %36 = integer_literal $Builtin.Int64, 0         // user: %37
  %37 = builtin "cmp_slt_Int64"(%24 : $Builtin.Int64, %36 : $Builtin.Int64) : $Builtin.Int1 // user: %39
  %38 = integer_literal $Builtin.Int1, 0          // user: %39
  %39 = builtin "int_expect_Int1"(%37 : $Builtin.Int1, %38 : $Builtin.Int1) : $Builtin.Int1 // user: %40
  cond_br %39, bb2, bb3                           // id: %40

bb2:                                              // Preds: bb1
  %41 = string_literal utf8 "Fatal error"         // user: %43
  %42 = integer_literal $Builtin.Word, 11         // user: %44
  %43 = builtin "ptrtoint_Word"(%41 : $Builtin.RawPointer) : $Builtin.Word // user: %44
  %44 = struct $StaticString (%43 : $Builtin.Word, %42 : $Builtin.Word, %28 : $Builtin.Int8) // user: %48
  %45 = integer_literal $Builtin.Int32, 0         // user: %46
  %46 = struct $UInt32 (%45 : $Builtin.Int32)     // user: %48
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %47 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %48
  %48 = apply %47(%44, %35, %29, %31, %46) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %49

bb3:                                              // Preds: bb1
  %50 = builtin "assumeNonNegative_Int64"(%24 : $Builtin.Int64) : $Builtin.Int64 // user: %51
  %51 = builtin "assumeNonNegative_Int64"(%50 : $Builtin.Int64) : $Builtin.Int64 // user: %52
  %52 = struct $Int (%51 : $Builtin.Int64)        // user: %53
  %53 = struct $UnsafeBufferPointer<UInt8> (%19 : $Optional<UnsafePointer<UInt8>>, %52 : $Int) // user: %54
  try_apply %10(%13, %53) : $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()>, normal bb4, error bb5 // id: %54

bb4(%55 : $()):                                   // Preds: bb3
  fix_lifetime %14 : $_ContiguousArrayBuffer<UInt8> // id: %56
  inject_enum_addr %12 : $*Optional<()>, #Optional.some!enumelt // id: %57
  %58 = load %12 : $*Optional<()>                 // user: %61
  dealloc_stack %12 : $*Optional<()>              // id: %59
  dealloc_stack %8 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) // id: %60
  switch_enum %58 : $Optional<()>, case #Optional.some!enumelt: bb7, case #Optional.none!enumelt: bb8 // id: %61

bb5(%62 : $any Error):                            // Preds: bb3
  fix_lifetime %14 : $_ContiguousArrayBuffer<UInt8> // id: %63
  dealloc_stack %12 : $*Optional<()>              // id: %64
  unreachable                                     // id: %65

bb6:                                              // Preds: bb0
  br bb9                                          // id: %66

bb7(%67 : $()):                                   // Preds: bb4
  br bb9                                          // id: %68

bb8:                                              // Preds: bb4
  %69 = alloc_stack $Builtin.Int64                // users: %147, %109, %79, %117, %87
  %70 = load %2 : $*Array<UInt8>                  // users: %91, %104, %102, %100, %76, %71
  %71 = struct_extract %70 : $Array<UInt8>, #Array._buffer // user: %72
  %72 = struct_extract %71 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %73
  strong_retain %72 : $__ContiguousArrayStorageBase // id: %73
  %74 = integer_literal $Builtin.Int64, 0         // user: %75
  %75 = struct $Int (%74 : $Builtin.Int64)        // user: %78
  %76 = struct_extract %70 : $Array<UInt8>, #Array._buffer // user: %77
  %77 = struct_extract %76 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %146
  %78 = struct_extract %75 : $Int, #Int._value    // user: %79
  store %78 to %69 : $*Builtin.Int64              // id: %79
  %80 = integer_literal $Builtin.Int64, 0         // users: %81, %141
  br bb10(%80 : $Builtin.Int64)                   // id: %81

bb9:                                              // Preds: bb6 bb15 bb7
  %82 = tuple ()                                  // user: %84
  dealloc_stack %2 : $*Array<UInt8>               // id: %83
  return %82 : $()                                // id: %84

// %85                                            // users: %128, %137
bb10(%85 : $Builtin.Int64):                       // Preds: bb8 bb14
  %86 = alloc_stack $Optional<UInt8>              // users: %119, %96, %122, %121
  %87 = load %69 : $*Builtin.Int64                // user: %88
  %88 = struct $Int (%87 : $Builtin.Int64)        // users: %89, %102, %104
  %89 = struct_extract %88 : $Int, #Int._value    // user: %93
  // function_ref specialized Array._getCount()
  %90 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %91
  %91 = apply %90(%70) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %92
  %92 = struct_extract %91 : $Int, #Int._value    // user: %93
  %93 = builtin "cmp_eq_Int64"(%89 : $Builtin.Int64, %92 : $Builtin.Int64) : $Builtin.Int1 // user: %94
  cond_br %93, bb11, bb12                         // id: %94

bb11:                                             // Preds: bb10
  %95 = enum $Optional<UInt8>, #Optional.none!enumelt // user: %96
  store %95 to %86 : $*Optional<UInt8>            // id: %96
  br bb13                                         // id: %97

bb12:                                             // Preds: bb10
  %98 = alloc_stack $UInt8                        // users: %106, %107, %105
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %99 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %100
  %100 = apply %99(%70) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %104, %102
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %101 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %102
  %102 = apply %101(%88, %100, %70) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %104
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %103 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %104
  %104 = apply %103(%88, %100, %102, %70) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %105
  store %104 to %98 : $*UInt8                     // id: %105
  %106 = load %98 : $*UInt8                       // user: %118
  dealloc_stack %98 : $*UInt8                     // id: %107
  %108 = integer_literal $Builtin.Int64, 1        // user: %111
  %109 = load %69 : $*Builtin.Int64               // user: %111
  %110 = integer_literal $Builtin.Int1, -1        // user: %111
  %111 = builtin "sadd_with_overflow_Int64"(%109 : $Builtin.Int64, %108 : $Builtin.Int64, %110 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %113, %112
  %112 = tuple_extract %111 : $(Builtin.Int64, Builtin.Int1), 0 // user: %115
  %113 = tuple_extract %111 : $(Builtin.Int64, Builtin.Int1), 1 // user: %114
  cond_fail %113 : $Builtin.Int1, "arithmetic overflow" // id: %114
  %115 = struct $Int (%112 : $Builtin.Int64)      // user: %116
  %116 = struct_extract %115 : $Int, #Int._value  // user: %117
  store %116 to %69 : $*Builtin.Int64             // id: %117
  %118 = enum $Optional<UInt8>, #Optional.some!enumelt, %106 : $UInt8 // user: %119
  store %118 to %86 : $*Optional<UInt8>           // id: %119
  br bb13                                         // id: %120

bb13:                                             // Preds: bb12 bb11
  %121 = load %86 : $*Optional<UInt8>             // users: %125, %123
  dealloc_stack %86 : $*Optional<UInt8>           // id: %122
  switch_enum %121 : $Optional<UInt8>, case #Optional.some!enumelt: bb14, case #Optional.none!enumelt: bb15 // id: %123

bb14(%124 : $UInt8):                              // Preds: bb13
  %125 = unchecked_enum_data %121 : $Optional<UInt8>, #Optional.some!enumelt // user: %134
  %126 = integer_literal $Builtin.Int64, 1        // user: %128
  %127 = integer_literal $Builtin.Int1, -1        // user: %128
  %128 = builtin "sadd_with_overflow_Int64"(%85 : $Builtin.Int64, %126 : $Builtin.Int64, %127 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %130, %129
  %129 = tuple_extract %128 : $(Builtin.Int64, Builtin.Int1), 0 // user: %145
  %130 = tuple_extract %128 : $(Builtin.Int64, Builtin.Int1), 1 // user: %131
  cond_fail %130 : $Builtin.Int1, "arithmetic overflow" // id: %131
  %132 = integer_literal $Builtin.Int1, 0         // user: %143
  %133 = alloc_stack $UInt8                       // users: %144, %135, %134
  store %125 to %133 : $*UInt8                    // id: %134
  %135 = address_to_pointer [stack_protection] %133 : $*UInt8 to $Builtin.RawPointer // user: %143
  %136 = struct_extract %6 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %138
  %137 = builtin "truncOrBitCast_Int64_Word"(%85 : $Builtin.Int64) : $Builtin.Word // user: %138
  %138 = index_raw_pointer %136 : $Builtin.RawPointer, %137 : $Builtin.Word // user: %143
  %139 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %140
  %140 = builtin "sextOrBitCast_Word_Int64"(%139 : $Builtin.Word) : $Builtin.Int64 // users: %143, %141
  %141 = builtin "cmp_slt_Int64"(%140 : $Builtin.Int64, %80 : $Builtin.Int64) : $Builtin.Int1 // user: %142
  cond_fail %141 : $Builtin.Int1, "Negative value is not representable" // id: %142
  %143 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%138 : $Builtin.RawPointer, %135 : $Builtin.RawPointer, %140 : $Builtin.Int64, %132 : $Builtin.Int1) : $()
  dealloc_stack %133 : $*UInt8                    // id: %144
  br bb10(%129 : $Builtin.Int64)                  // id: %145

bb15:                                             // Preds: bb13
  strong_release %77 : $__ContiguousArrayStorageBase // id: %146
  dealloc_stack %69 : $*Builtin.Int64             // id: %147
  br bb9                                          // id: %148
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5919, stage HighLevel,Function+EarlyLoopOpt, pass 9: Mem2Reg (mem2reg)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // user: %3
// %1                                             // users: %8, %4
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = alloc_stack $Array<UInt8>                  // users: %11, %8, %69, %81, %9, %3
  store %0 to %2 : $*Array<UInt8>                 // id: %3
  %4 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %5
  switch_enum %4 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb6 // id: %5

// %6                                             // users: %8, %126
bb1(%6 : $UnsafeMutableRawPointer):               // Preds: bb0
  // function_ref specialized closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %7 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFySRyADGXEfU_SayADG_TG5 : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // user: %8
  %8 = partial_apply [callee_guaranteed] [on_stack] %7(%2, %1, %6) : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // users: %9, %60
  %9 = mark_dependence %8 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) on %2 : $*Array<UInt8> // user: %10
  %10 = convert_function %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) to $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()> // user: %54
  %11 = load %2 : $*Array<UInt8>                  // user: %14
  %12 = alloc_stack $Optional<()>                 // users: %64, %59, %58, %57, %13
  %13 = init_enum_data_addr %12 : $*Optional<()>, #Optional.some!enumelt // user: %54
  %14 = struct_extract %11 : $Array<UInt8>, #Array._buffer // users: %63, %56, %15
  %15 = struct_extract %14 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %20, %16
  %16 = ref_tail_addr %15 : $__ContiguousArrayStorageBase, $UInt8 // user: %17
  %17 = address_to_pointer %16 : $*UInt8 to $Builtin.RawPointer // user: %18
  %18 = struct $UnsafePointer<UInt8> (%17 : $Builtin.RawPointer) // user: %19
  %19 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt, %18 : $UnsafePointer<UInt8> // user: %53
  %20 = ref_element_addr %15 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %21
  %21 = struct_element_addr %20 : $*_ArrayBody, #_ArrayBody._storage // user: %22
  %22 = struct_element_addr %21 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %23
  %23 = struct_element_addr %22 : $*Int, #Int._value // user: %24
  %24 = load %23 : $*Builtin.Int64                // users: %50, %37
  %25 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %27
  %26 = integer_literal $Builtin.Word, 24         // user: %29
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %29
  %28 = integer_literal $Builtin.Int8, 2          // users: %44, %35, %29
  %29 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %28 : $Builtin.Int8) // user: %48
  %30 = integer_literal $Builtin.Int64, 15505     // user: %31
  %31 = struct $UInt (%30 : $Builtin.Int64)       // user: %48
  %32 = string_literal utf8 ""                    // user: %34
  %33 = integer_literal $Builtin.Word, 0          // user: %35
  %34 = builtin "ptrtoint_Word"(%32 : $Builtin.RawPointer) : $Builtin.Word // user: %35
  %35 = struct $StaticString (%34 : $Builtin.Word, %33 : $Builtin.Word, %28 : $Builtin.Int8) // user: %48
  %36 = integer_literal $Builtin.Int64, 0         // user: %37
  %37 = builtin "cmp_slt_Int64"(%24 : $Builtin.Int64, %36 : $Builtin.Int64) : $Builtin.Int1 // user: %39
  %38 = integer_literal $Builtin.Int1, 0          // user: %39
  %39 = builtin "int_expect_Int1"(%37 : $Builtin.Int1, %38 : $Builtin.Int1) : $Builtin.Int1 // user: %40
  cond_br %39, bb2, bb3                           // id: %40

bb2:                                              // Preds: bb1
  %41 = string_literal utf8 "Fatal error"         // user: %43
  %42 = integer_literal $Builtin.Word, 11         // user: %44
  %43 = builtin "ptrtoint_Word"(%41 : $Builtin.RawPointer) : $Builtin.Word // user: %44
  %44 = struct $StaticString (%43 : $Builtin.Word, %42 : $Builtin.Word, %28 : $Builtin.Int8) // user: %48
  %45 = integer_literal $Builtin.Int32, 0         // user: %46
  %46 = struct $UInt32 (%45 : $Builtin.Int32)     // user: %48
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %47 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %48
  %48 = apply %47(%44, %35, %29, %31, %46) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %49

bb3:                                              // Preds: bb1
  %50 = builtin "assumeNonNegative_Int64"(%24 : $Builtin.Int64) : $Builtin.Int64 // user: %51
  %51 = builtin "assumeNonNegative_Int64"(%50 : $Builtin.Int64) : $Builtin.Int64 // user: %52
  %52 = struct $Int (%51 : $Builtin.Int64)        // user: %53
  %53 = struct $UnsafeBufferPointer<UInt8> (%19 : $Optional<UnsafePointer<UInt8>>, %52 : $Int) // user: %54
  try_apply %10(%13, %53) : $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()>, normal bb4, error bb5 // id: %54

bb4(%55 : $()):                                   // Preds: bb3
  fix_lifetime %14 : $_ContiguousArrayBuffer<UInt8> // id: %56
  inject_enum_addr %12 : $*Optional<()>, #Optional.some!enumelt // id: %57
  %58 = load %12 : $*Optional<()>                 // user: %61
  dealloc_stack %12 : $*Optional<()>              // id: %59
  dealloc_stack %8 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) // id: %60
  switch_enum %58 : $Optional<()>, case #Optional.some!enumelt: bb7, case #Optional.none!enumelt: bb8 // id: %61

bb5(%62 : $any Error):                            // Preds: bb3
  fix_lifetime %14 : $_ContiguousArrayBuffer<UInt8> // id: %63
  dealloc_stack %12 : $*Optional<()>              // id: %64
  unreachable                                     // id: %65

bb6:                                              // Preds: bb0
  br bb9                                          // id: %66

bb7(%67 : $()):                                   // Preds: bb4
  br bb9                                          // id: %68

bb8:                                              // Preds: bb4
  %69 = load %2 : $*Array<UInt8>                  // users: %89, %100, %98, %96, %75, %70
  %70 = struct_extract %69 : $Array<UInt8>, #Array._buffer // user: %71
  %71 = struct_extract %70 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %72
  strong_retain %71 : $__ContiguousArrayStorageBase // id: %72
  %73 = integer_literal $Builtin.Int64, 0         // user: %74
  %74 = struct $Int (%73 : $Builtin.Int64)        // user: %77
  %75 = struct_extract %69 : $Array<UInt8>, #Array._buffer // user: %76
  %76 = struct_extract %75 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %136
  %77 = struct_extract %74 : $Int, #Int._value    // user: %79
  %78 = integer_literal $Builtin.Int64, 0         // users: %79, %131
  br bb10(%78 : $Builtin.Int64, %77 : $Builtin.Int64, undef : $Optional<UInt8>) // id: %79

bb9:                                              // Preds: bb6 bb15 bb7
  %80 = tuple ()                                  // user: %82
  dealloc_stack %2 : $*Array<UInt8>               // id: %81
  return %80 : $()                                // id: %82

// %83                                            // users: %118, %127
// %84                                            // users: %94, %86, %103
bb10(%83 : $Builtin.Int64, %84 : $Builtin.Int64, %85 : $Optional<UInt8>): // Preds: bb8 bb14
  %86 = struct $Int (%84 : $Builtin.Int64)        // users: %87, %98, %100
  %87 = struct_extract %86 : $Int, #Int._value    // user: %91
  // function_ref specialized Array._getCount()
  %88 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %89
  %89 = apply %88(%69) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %90
  %90 = struct_extract %89 : $Int, #Int._value    // user: %91
  %91 = builtin "cmp_eq_Int64"(%87 : $Builtin.Int64, %90 : $Builtin.Int64) : $Builtin.Int1 // user: %92
  cond_br %91, bb11, bb12                         // id: %92

bb11:                                             // Preds: bb10
  %93 = enum $Optional<UInt8>, #Optional.none!enumelt // user: %94
  br bb13(%84 : $Builtin.Int64, %93 : $Optional<UInt8>) // id: %94

bb12:                                             // Preds: bb10
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %95 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %96
  %96 = apply %95(%69) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %100, %98
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %97 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %98
  %98 = apply %97(%86, %96, %69) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %100
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %99 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %100
  %100 = apply %99(%86, %96, %98, %69) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %109
  %101 = integer_literal $Builtin.Int64, 1        // user: %103
  %102 = integer_literal $Builtin.Int1, -1        // user: %103
  %103 = builtin "sadd_with_overflow_Int64"(%84 : $Builtin.Int64, %101 : $Builtin.Int64, %102 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %105, %104
  %104 = tuple_extract %103 : $(Builtin.Int64, Builtin.Int1), 0 // user: %107
  %105 = tuple_extract %103 : $(Builtin.Int64, Builtin.Int1), 1 // user: %106
  cond_fail %105 : $Builtin.Int1, "arithmetic overflow" // id: %106
  %107 = struct $Int (%104 : $Builtin.Int64)      // user: %108
  %108 = struct_extract %107 : $Int, #Int._value  // user: %110
  %109 = enum $Optional<UInt8>, #Optional.some!enumelt, %100 : $UInt8 // user: %110
  br bb13(%108 : $Builtin.Int64, %109 : $Optional<UInt8>) // id: %110

// %111                                           // user: %135
// %112                                           // users: %135, %113, %115
bb13(%111 : $Builtin.Int64, %112 : $Optional<UInt8>): // Preds: bb12 bb11
  switch_enum %112 : $Optional<UInt8>, case #Optional.some!enumelt: bb14, case #Optional.none!enumelt: bb15 // id: %113

bb14(%114 : $UInt8):                              // Preds: bb13
  %115 = unchecked_enum_data %112 : $Optional<UInt8>, #Optional.some!enumelt // user: %124
  %116 = integer_literal $Builtin.Int64, 1        // user: %118
  %117 = integer_literal $Builtin.Int1, -1        // user: %118
  %118 = builtin "sadd_with_overflow_Int64"(%83 : $Builtin.Int64, %116 : $Builtin.Int64, %117 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %120, %119
  %119 = tuple_extract %118 : $(Builtin.Int64, Builtin.Int1), 0 // user: %135
  %120 = tuple_extract %118 : $(Builtin.Int64, Builtin.Int1), 1 // user: %121
  cond_fail %120 : $Builtin.Int1, "arithmetic overflow" // id: %121
  %122 = integer_literal $Builtin.Int1, 0         // user: %133
  %123 = alloc_stack $UInt8                       // users: %134, %125, %124
  store %115 to %123 : $*UInt8                    // id: %124
  %125 = address_to_pointer [stack_protection] %123 : $*UInt8 to $Builtin.RawPointer // user: %133
  %126 = struct_extract %6 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %128
  %127 = builtin "truncOrBitCast_Int64_Word"(%83 : $Builtin.Int64) : $Builtin.Word // user: %128
  %128 = index_raw_pointer %126 : $Builtin.RawPointer, %127 : $Builtin.Word // user: %133
  %129 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %130
  %130 = builtin "sextOrBitCast_Word_Int64"(%129 : $Builtin.Word) : $Builtin.Int64 // users: %133, %131
  %131 = builtin "cmp_slt_Int64"(%130 : $Builtin.Int64, %78 : $Builtin.Int64) : $Builtin.Int1 // user: %132
  cond_fail %131 : $Builtin.Int1, "Negative value is not representable" // id: %132
  %133 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%128 : $Builtin.RawPointer, %125 : $Builtin.RawPointer, %130 : $Builtin.Int64, %122 : $Builtin.Int1) : $()
  dealloc_stack %123 : $*UInt8                    // id: %134
  br bb10(%119 : $Builtin.Int64, %111 : $Builtin.Int64, %112 : $Optional<UInt8>) // id: %135

bb15:                                             // Preds: bb13
  strong_release %76 : $__ContiguousArrayStorageBase // id: %136
  br bb9                                          // id: %137
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5921, stage HighLevel,Function+EarlyLoopOpt, pass 11: PerformanceConstantPropagation (performance-constant-propagation)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // user: %3
// %1                                             // users: %8, %4
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = alloc_stack $Array<UInt8>                  // users: %11, %8, %69, %79, %9, %3
  store %0 to %2 : $*Array<UInt8>                 // id: %3
  %4 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %5
  switch_enum %4 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb6 // id: %5

// %6                                             // users: %8, %121
bb1(%6 : $UnsafeMutableRawPointer):               // Preds: bb0
  // function_ref specialized closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %7 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFySRyADGXEfU_SayADG_TG5 : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // user: %8
  %8 = partial_apply [callee_guaranteed] [on_stack] %7(%2, %1, %6) : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // users: %9, %60
  %9 = mark_dependence %8 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) on %2 : $*Array<UInt8> // user: %10
  %10 = convert_function %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) to $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()> // user: %54
  %11 = load %2 : $*Array<UInt8>                  // user: %14
  %12 = alloc_stack $Optional<()>                 // users: %64, %59, %58, %57, %13
  %13 = init_enum_data_addr %12 : $*Optional<()>, #Optional.some!enumelt // user: %54
  %14 = struct_extract %11 : $Array<UInt8>, #Array._buffer // users: %63, %56, %15
  %15 = struct_extract %14 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %20, %16
  %16 = ref_tail_addr %15 : $__ContiguousArrayStorageBase, $UInt8 // user: %17
  %17 = address_to_pointer %16 : $*UInt8 to $Builtin.RawPointer // user: %18
  %18 = struct $UnsafePointer<UInt8> (%17 : $Builtin.RawPointer) // user: %19
  %19 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt, %18 : $UnsafePointer<UInt8> // user: %53
  %20 = ref_element_addr %15 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %21
  %21 = struct_element_addr %20 : $*_ArrayBody, #_ArrayBody._storage // user: %22
  %22 = struct_element_addr %21 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %23
  %23 = struct_element_addr %22 : $*Int, #Int._value // user: %24
  %24 = load %23 : $*Builtin.Int64                // users: %50, %37
  %25 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %27
  %26 = integer_literal $Builtin.Word, 24         // user: %29
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %29
  %28 = integer_literal $Builtin.Int8, 2          // users: %44, %35, %29
  %29 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %28 : $Builtin.Int8) // user: %48
  %30 = integer_literal $Builtin.Int64, 15505     // user: %31
  %31 = struct $UInt (%30 : $Builtin.Int64)       // user: %48
  %32 = string_literal utf8 ""                    // user: %34
  %33 = integer_literal $Builtin.Word, 0          // user: %35
  %34 = builtin "ptrtoint_Word"(%32 : $Builtin.RawPointer) : $Builtin.Word // user: %35
  %35 = struct $StaticString (%34 : $Builtin.Word, %33 : $Builtin.Word, %28 : $Builtin.Int8) // user: %48
  %36 = integer_literal $Builtin.Int64, 0         // user: %37
  %37 = builtin "cmp_slt_Int64"(%24 : $Builtin.Int64, %36 : $Builtin.Int64) : $Builtin.Int1 // user: %39
  %38 = integer_literal $Builtin.Int1, 0          // user: %39
  %39 = builtin "int_expect_Int1"(%37 : $Builtin.Int1, %38 : $Builtin.Int1) : $Builtin.Int1 // user: %40
  cond_br %39, bb2, bb3                           // id: %40

bb2:                                              // Preds: bb1
  %41 = string_literal utf8 "Fatal error"         // user: %43
  %42 = integer_literal $Builtin.Word, 11         // user: %44
  %43 = builtin "ptrtoint_Word"(%41 : $Builtin.RawPointer) : $Builtin.Word // user: %44
  %44 = struct $StaticString (%43 : $Builtin.Word, %42 : $Builtin.Word, %28 : $Builtin.Int8) // user: %48
  %45 = integer_literal $Builtin.Int32, 0         // user: %46
  %46 = struct $UInt32 (%45 : $Builtin.Int32)     // user: %48
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %47 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %48
  %48 = apply %47(%44, %35, %29, %31, %46) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %49

bb3:                                              // Preds: bb1
  %50 = builtin "assumeNonNegative_Int64"(%24 : $Builtin.Int64) : $Builtin.Int64 // user: %51
  %51 = builtin "assumeNonNegative_Int64"(%50 : $Builtin.Int64) : $Builtin.Int64 // user: %52
  %52 = struct $Int (%51 : $Builtin.Int64)        // user: %53
  %53 = struct $UnsafeBufferPointer<UInt8> (%19 : $Optional<UnsafePointer<UInt8>>, %52 : $Int) // user: %54
  try_apply %10(%13, %53) : $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()>, normal bb4, error bb5 // id: %54

bb4(%55 : $()):                                   // Preds: bb3
  fix_lifetime %14 : $_ContiguousArrayBuffer<UInt8> // id: %56
  inject_enum_addr %12 : $*Optional<()>, #Optional.some!enumelt // id: %57
  %58 = load %12 : $*Optional<()>                 // user: %61
  dealloc_stack %12 : $*Optional<()>              // id: %59
  dealloc_stack %8 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) // id: %60
  switch_enum %58 : $Optional<()>, case #Optional.some!enumelt: bb7, case #Optional.none!enumelt: bb8 // id: %61

bb5(%62 : $any Error):                            // Preds: bb3
  fix_lifetime %14 : $_ContiguousArrayBuffer<UInt8> // id: %63
  dealloc_stack %12 : $*Optional<()>              // id: %64
  unreachable                                     // id: %65

bb6:                                              // Preds: bb0
  br bb9                                          // id: %66

bb7(%67 : $()):                                   // Preds: bb4
  br bb9                                          // id: %68

bb8:                                              // Preds: bb4
  %69 = load %2 : $*Array<UInt8>                  // users: %86, %97, %95, %93, %74, %70
  %70 = struct_extract %69 : $Array<UInt8>, #Array._buffer // user: %71
  %71 = struct_extract %70 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %72
  strong_retain %71 : $__ContiguousArrayStorageBase // id: %72
  %73 = integer_literal $Builtin.Int64, 0         // user: %77
  %74 = struct_extract %69 : $Array<UInt8>, #Array._buffer // user: %75
  %75 = struct_extract %74 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %131
  %76 = integer_literal $Builtin.Int64, 0         // users: %77, %126
  br bb10(%76 : $Builtin.Int64, %73 : $Builtin.Int64, undef : $Optional<UInt8>) // id: %77

bb9:                                              // Preds: bb6 bb15 bb7
  %78 = tuple ()                                  // user: %80
  dealloc_stack %2 : $*Array<UInt8>               // id: %79
  return %78 : $()                                // id: %80

// %81                                            // users: %113, %122
// %82                                            // users: %88, %91, %84, %100
bb10(%81 : $Builtin.Int64, %82 : $Builtin.Int64, %83 : $Optional<UInt8>): // Preds: bb8 bb14
  %84 = struct $Int (%82 : $Builtin.Int64)        // users: %95, %97
  // function_ref specialized Array._getCount()
  %85 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %86
  %86 = apply %85(%69) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %87
  %87 = struct_extract %86 : $Int, #Int._value    // user: %88
  %88 = builtin "cmp_eq_Int64"(%82 : $Builtin.Int64, %87 : $Builtin.Int64) : $Builtin.Int1 // user: %89
  cond_br %88, bb11, bb12                         // id: %89

bb11:                                             // Preds: bb10
  %90 = enum $Optional<UInt8>, #Optional.none!enumelt // user: %91
  br bb13(%82 : $Builtin.Int64, %90 : $Optional<UInt8>) // id: %91

bb12:                                             // Preds: bb10
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %92 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %93
  %93 = apply %92(%69) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %97, %95
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %94 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %95
  %95 = apply %94(%84, %93, %69) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %97
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %96 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %97
  %97 = apply %96(%84, %93, %95, %69) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %104
  %98 = integer_literal $Builtin.Int64, 1         // user: %100
  %99 = integer_literal $Builtin.Int1, -1         // user: %100
  %100 = builtin "sadd_with_overflow_Int64"(%82 : $Builtin.Int64, %98 : $Builtin.Int64, %99 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %102, %101
  %101 = tuple_extract %100 : $(Builtin.Int64, Builtin.Int1), 0 // user: %105
  %102 = tuple_extract %100 : $(Builtin.Int64, Builtin.Int1), 1 // user: %103
  cond_fail %102 : $Builtin.Int1, "arithmetic overflow" // id: %103
  %104 = enum $Optional<UInt8>, #Optional.some!enumelt, %97 : $UInt8 // user: %105
  br bb13(%101 : $Builtin.Int64, %104 : $Optional<UInt8>) // id: %105

// %106                                           // user: %130
// %107                                           // users: %130, %108, %110
bb13(%106 : $Builtin.Int64, %107 : $Optional<UInt8>): // Preds: bb12 bb11
  switch_enum %107 : $Optional<UInt8>, case #Optional.some!enumelt: bb14, case #Optional.none!enumelt: bb15 // id: %108

bb14(%109 : $UInt8):                              // Preds: bb13
  %110 = unchecked_enum_data %107 : $Optional<UInt8>, #Optional.some!enumelt // user: %119
  %111 = integer_literal $Builtin.Int64, 1        // user: %113
  %112 = integer_literal $Builtin.Int1, -1        // user: %113
  %113 = builtin "sadd_with_overflow_Int64"(%81 : $Builtin.Int64, %111 : $Builtin.Int64, %112 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %115, %114
  %114 = tuple_extract %113 : $(Builtin.Int64, Builtin.Int1), 0 // user: %130
  %115 = tuple_extract %113 : $(Builtin.Int64, Builtin.Int1), 1 // user: %116
  cond_fail %115 : $Builtin.Int1, "arithmetic overflow" // id: %116
  %117 = integer_literal $Builtin.Int1, 0         // user: %128
  %118 = alloc_stack $UInt8                       // users: %129, %120, %119
  store %110 to %118 : $*UInt8                    // id: %119
  %120 = address_to_pointer [stack_protection] %118 : $*UInt8 to $Builtin.RawPointer // user: %128
  %121 = struct_extract %6 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %123
  %122 = builtin "truncOrBitCast_Int64_Word"(%81 : $Builtin.Int64) : $Builtin.Word // user: %123
  %123 = index_raw_pointer %121 : $Builtin.RawPointer, %122 : $Builtin.Word // user: %128
  %124 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %125
  %125 = builtin "sextOrBitCast_Word_Int64"(%124 : $Builtin.Word) : $Builtin.Int64 // users: %128, %126
  %126 = builtin "cmp_slt_Int64"(%125 : $Builtin.Int64, %76 : $Builtin.Int64) : $Builtin.Int1 // user: %127
  cond_fail %126 : $Builtin.Int1, "Negative value is not representable" // id: %127
  %128 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%123 : $Builtin.RawPointer, %120 : $Builtin.RawPointer, %125 : $Builtin.Int64, %117 : $Builtin.Int1) : $()
  dealloc_stack %118 : $*UInt8                    // id: %129
  br bb10(%114 : $Builtin.Int64, %106 : $Builtin.Int64, %107 : $Optional<UInt8>) // id: %130

bb15:                                             // Preds: bb13
  strong_release %75 : $__ContiguousArrayStorageBase // id: %131
  br bb9                                          // id: %132
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5922, stage HighLevel,Function+EarlyLoopOpt, pass 12: SimplifyCFG (simplify-cfg)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // user: %3
// %1                                             // users: %8, %4
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = alloc_stack $Array<UInt8>                  // users: %11, %8, %69, %79, %9, %3
  store %0 to %2 : $*Array<UInt8>                 // id: %3
  %4 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %5
  switch_enum %4 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb6 // id: %5

// %6                                             // users: %8, %113
bb1(%6 : $UnsafeMutableRawPointer):               // Preds: bb0
  // function_ref specialized closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %7 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFySRyADGXEfU_SayADG_TG5 : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // user: %8
  %8 = partial_apply [callee_guaranteed] [on_stack] %7(%2, %1, %6) : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // users: %9, %60
  %9 = mark_dependence %8 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) on %2 : $*Array<UInt8> // user: %10
  %10 = convert_function %9 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) to $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()> // user: %54
  %11 = load %2 : $*Array<UInt8>                  // user: %14
  %12 = alloc_stack $Optional<()>                 // users: %64, %59, %58, %57, %13
  %13 = init_enum_data_addr %12 : $*Optional<()>, #Optional.some!enumelt // user: %54
  %14 = struct_extract %11 : $Array<UInt8>, #Array._buffer // users: %63, %56, %15
  %15 = struct_extract %14 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %20, %16
  %16 = ref_tail_addr %15 : $__ContiguousArrayStorageBase, $UInt8 // user: %17
  %17 = address_to_pointer %16 : $*UInt8 to $Builtin.RawPointer // user: %18
  %18 = struct $UnsafePointer<UInt8> (%17 : $Builtin.RawPointer) // user: %19
  %19 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt, %18 : $UnsafePointer<UInt8> // user: %53
  %20 = ref_element_addr %15 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %21
  %21 = struct_element_addr %20 : $*_ArrayBody, #_ArrayBody._storage // user: %22
  %22 = struct_element_addr %21 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %23
  %23 = struct_element_addr %22 : $*Int, #Int._value // user: %24
  %24 = load %23 : $*Builtin.Int64                // users: %50, %37
  %25 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %27
  %26 = integer_literal $Builtin.Word, 24         // user: %29
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %29
  %28 = integer_literal $Builtin.Int8, 2          // users: %44, %35, %29
  %29 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %28 : $Builtin.Int8) // user: %48
  %30 = integer_literal $Builtin.Int64, 15505     // user: %31
  %31 = struct $UInt (%30 : $Builtin.Int64)       // user: %48
  %32 = string_literal utf8 ""                    // user: %34
  %33 = integer_literal $Builtin.Word, 0          // user: %35
  %34 = builtin "ptrtoint_Word"(%32 : $Builtin.RawPointer) : $Builtin.Word // user: %35
  %35 = struct $StaticString (%34 : $Builtin.Word, %33 : $Builtin.Word, %28 : $Builtin.Int8) // user: %48
  %36 = integer_literal $Builtin.Int64, 0         // user: %37
  %37 = builtin "cmp_slt_Int64"(%24 : $Builtin.Int64, %36 : $Builtin.Int64) : $Builtin.Int1 // user: %39
  %38 = integer_literal $Builtin.Int1, 0          // user: %39
  %39 = builtin "int_expect_Int1"(%37 : $Builtin.Int1, %38 : $Builtin.Int1) : $Builtin.Int1 // user: %40
  cond_br %39, bb2, bb3                           // id: %40

bb2:                                              // Preds: bb1
  %41 = string_literal utf8 "Fatal error"         // user: %43
  %42 = integer_literal $Builtin.Word, 11         // user: %44
  %43 = builtin "ptrtoint_Word"(%41 : $Builtin.RawPointer) : $Builtin.Word // user: %44
  %44 = struct $StaticString (%43 : $Builtin.Word, %42 : $Builtin.Word, %28 : $Builtin.Int8) // user: %48
  %45 = integer_literal $Builtin.Int32, 0         // user: %46
  %46 = struct $UInt32 (%45 : $Builtin.Int32)     // user: %48
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %47 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %48
  %48 = apply %47(%44, %35, %29, %31, %46) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %49

bb3:                                              // Preds: bb1
  %50 = builtin "assumeNonNegative_Int64"(%24 : $Builtin.Int64) : $Builtin.Int64 // user: %51
  %51 = builtin "assumeNonNegative_Int64"(%50 : $Builtin.Int64) : $Builtin.Int64 // user: %52
  %52 = struct $Int (%51 : $Builtin.Int64)        // user: %53
  %53 = struct $UnsafeBufferPointer<UInt8> (%19 : $Optional<UnsafePointer<UInt8>>, %52 : $Int) // user: %54
  try_apply %10(%13, %53) : $@noescape @callee_guaranteed @substituted <τ_0_0, τ_0_1> (UnsafeBufferPointer<τ_0_0>) -> (@out τ_0_1, @error any Error) for <UInt8, ()>, normal bb4, error bb5 // id: %54

bb4(%55 : $()):                                   // Preds: bb3
  fix_lifetime %14 : $_ContiguousArrayBuffer<UInt8> // id: %56
  inject_enum_addr %12 : $*Optional<()>, #Optional.some!enumelt // id: %57
  %58 = load %12 : $*Optional<()>                 // user: %61
  dealloc_stack %12 : $*Optional<()>              // id: %59
  dealloc_stack %8 : $@noescape @callee_guaranteed (UnsafeBufferPointer<UInt8>) -> (@out (), @error any Error) // id: %60
  switch_enum %58 : $Optional<()>, case #Optional.some!enumelt: bb7, case #Optional.none!enumelt: bb8 // id: %61

bb5(%62 : $any Error):                            // Preds: bb3
  fix_lifetime %14 : $_ContiguousArrayBuffer<UInt8> // id: %63
  dealloc_stack %12 : $*Optional<()>              // id: %64
  unreachable                                     // id: %65

bb6:                                              // Preds: bb0
  br bb9                                          // id: %66

bb7(%67 : $()):                                   // Preds: bb4
  br bb9                                          // id: %68

bb8:                                              // Preds: bb4
  %69 = load %2 : $*Array<UInt8>                  // users: %85, %94, %92, %90, %74, %70
  %70 = struct_extract %69 : $Array<UInt8>, #Array._buffer // user: %71
  %71 = struct_extract %70 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %72
  strong_retain %71 : $__ContiguousArrayStorageBase // id: %72
  %73 = integer_literal $Builtin.Int64, 0         // user: %77
  %74 = struct_extract %69 : $Array<UInt8>, #Array._buffer // user: %75
  %75 = struct_extract %74 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %123
  %76 = integer_literal $Builtin.Int64, 0         // users: %77, %118
  br bb10(%76 : $Builtin.Int64, %73 : $Builtin.Int64) // id: %77

bb9:                                              // Preds: bb6 bb12 bb7
  %78 = tuple ()                                  // user: %80
  dealloc_stack %2 : $*Array<UInt8>               // id: %79
  return %78 : $()                                // id: %80

// %81                                            // users: %105, %114
// %82                                            // users: %87, %83, %97
bb10(%81 : $Builtin.Int64, %82 : $Builtin.Int64): // Preds: bb11 bb8
  %83 = struct $Int (%82 : $Builtin.Int64)        // users: %92, %94
  // function_ref specialized Array._getCount()
  %84 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %85
  %85 = apply %84(%69) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %86
  %86 = struct_extract %85 : $Int, #Int._value    // user: %87
  %87 = builtin "cmp_eq_Int64"(%82 : $Builtin.Int64, %86 : $Builtin.Int64) : $Builtin.Int1 // user: %88
  cond_br %87, bb12, bb11                         // id: %88

bb11:                                             // Preds: bb10
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %89 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %90
  %90 = apply %89(%69) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %94, %92
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %91 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %92
  %92 = apply %91(%83, %90, %69) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %94
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %93 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %94
  %94 = apply %93(%83, %90, %92, %69) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %101
  %95 = integer_literal $Builtin.Int64, 1         // user: %97
  %96 = integer_literal $Builtin.Int1, -1         // user: %97
  %97 = builtin "sadd_with_overflow_Int64"(%82 : $Builtin.Int64, %95 : $Builtin.Int64, %96 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %99, %98
  %98 = tuple_extract %97 : $(Builtin.Int64, Builtin.Int1), 0 // user: %122
  %99 = tuple_extract %97 : $(Builtin.Int64, Builtin.Int1), 1 // user: %100
  cond_fail %99 : $Builtin.Int1, "arithmetic overflow" // id: %100
  %101 = enum $Optional<UInt8>, #Optional.some!enumelt, %94 : $UInt8 // user: %102
  %102 = unchecked_enum_data %101 : $Optional<UInt8>, #Optional.some!enumelt // user: %111
  %103 = integer_literal $Builtin.Int64, 1        // user: %105
  %104 = integer_literal $Builtin.Int1, -1        // user: %105
  %105 = builtin "sadd_with_overflow_Int64"(%81 : $Builtin.Int64, %103 : $Builtin.Int64, %104 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %107, %106
  %106 = tuple_extract %105 : $(Builtin.Int64, Builtin.Int1), 0 // user: %122
  %107 = tuple_extract %105 : $(Builtin.Int64, Builtin.Int1), 1 // user: %108
  cond_fail %107 : $Builtin.Int1, "arithmetic overflow" // id: %108
  %109 = integer_literal $Builtin.Int1, 0         // user: %120
  %110 = alloc_stack $UInt8                       // users: %121, %112, %111
  store %102 to %110 : $*UInt8                    // id: %111
  %112 = address_to_pointer [stack_protection] %110 : $*UInt8 to $Builtin.RawPointer // user: %120
  %113 = struct_extract %6 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %115
  %114 = builtin "truncOrBitCast_Int64_Word"(%81 : $Builtin.Int64) : $Builtin.Word // user: %115
  %115 = index_raw_pointer %113 : $Builtin.RawPointer, %114 : $Builtin.Word // user: %120
  %116 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %117
  %117 = builtin "sextOrBitCast_Word_Int64"(%116 : $Builtin.Word) : $Builtin.Int64 // users: %120, %118
  %118 = builtin "cmp_slt_Int64"(%117 : $Builtin.Int64, %76 : $Builtin.Int64) : $Builtin.Int1 // user: %119
  cond_fail %118 : $Builtin.Int1, "Negative value is not representable" // id: %119
  %120 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%115 : $Builtin.RawPointer, %112 : $Builtin.RawPointer, %117 : $Builtin.Int64, %109 : $Builtin.Int1) : $()
  dealloc_stack %110 : $*UInt8                    // id: %121
  br bb10(%106 : $Builtin.Int64, %98 : $Builtin.Int64) // id: %122

bb12:                                             // Preds: bb10
  strong_release %75 : $__ContiguousArrayStorageBase // id: %123
  br bb9                                          // id: %124
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5924, stage HighLevel,Function+EarlyLoopOpt, pass 14: SILCombine (sil-combine)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // user: %3
// %1                                             // users: %51, %4
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = alloc_stack $Array<UInt8>                  // users: %51, %8, %65, %75, %3
  store %0 to %2 : $*Array<UInt8>                 // id: %3
  %4 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %5
  switch_enum %4 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb6 // id: %5

// %6                                             // users: %51, %107
bb1(%6 : $UnsafeMutableRawPointer):               // Preds: bb0
  // function_ref specialized closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %7 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFySRyADGXEfU_SayADG_TG5 : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // user: %51
  %8 = struct_element_addr %2 : $*Array<UInt8>, #Array._buffer // user: %9
  %9 = load %8 : $*_ContiguousArrayBuffer<UInt8>  // users: %12, %53, %59
  %10 = alloc_stack $Optional<()>                 // users: %60, %56, %55, %54, %11
  %11 = init_enum_data_addr %10 : $*Optional<()>, #Optional.some!enumelt // user: %51
  %12 = struct_extract %9 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %17, %13
  %13 = ref_tail_addr %12 : $__ContiguousArrayStorageBase, $UInt8 // user: %14
  %14 = address_to_pointer %13 : $*UInt8 to $Builtin.RawPointer // user: %15
  %15 = struct $UnsafePointer<UInt8> (%14 : $Builtin.RawPointer) // user: %16
  %16 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt, %15 : $UnsafePointer<UInt8> // user: %50
  %17 = ref_element_addr %12 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %18
  %18 = struct_element_addr %17 : $*_ArrayBody, #_ArrayBody._storage // user: %19
  %19 = struct_element_addr %18 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %20
  %20 = struct_element_addr %19 : $*Int, #Int._value // user: %21
  %21 = load %20 : $*Builtin.Int64                // users: %47, %34
  %22 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %24
  %23 = integer_literal $Builtin.Word, 24         // user: %26
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %26
  %25 = integer_literal $Builtin.Int8, 2          // users: %41, %32, %26
  %26 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %25 : $Builtin.Int8) // user: %45
  %27 = integer_literal $Builtin.Int64, 15505     // user: %28
  %28 = struct $UInt (%27 : $Builtin.Int64)       // user: %45
  %29 = string_literal utf8 ""                    // user: %31
  %30 = integer_literal $Builtin.Word, 0          // user: %32
  %31 = builtin "ptrtoint_Word"(%29 : $Builtin.RawPointer) : $Builtin.Word // user: %32
  %32 = struct $StaticString (%31 : $Builtin.Word, %30 : $Builtin.Word, %25 : $Builtin.Int8) // user: %45
  %33 = integer_literal $Builtin.Int64, 0         // user: %34
  %34 = builtin "cmp_slt_Int64"(%21 : $Builtin.Int64, %33 : $Builtin.Int64) : $Builtin.Int1 // user: %36
  %35 = integer_literal $Builtin.Int1, 0          // user: %36
  %36 = builtin "int_expect_Int1"(%34 : $Builtin.Int1, %35 : $Builtin.Int1) : $Builtin.Int1 // user: %37
  cond_br %36, bb2, bb3                           // id: %37

bb2:                                              // Preds: bb1
  %38 = string_literal utf8 "Fatal error"         // user: %40
  %39 = integer_literal $Builtin.Word, 11         // user: %41
  %40 = builtin "ptrtoint_Word"(%38 : $Builtin.RawPointer) : $Builtin.Word // user: %41
  %41 = struct $StaticString (%40 : $Builtin.Word, %39 : $Builtin.Word, %25 : $Builtin.Int8) // user: %45
  %42 = integer_literal $Builtin.Int32, 0         // user: %43
  %43 = struct $UInt32 (%42 : $Builtin.Int32)     // user: %45
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %44 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %45
  %45 = apply %44(%41, %32, %26, %28, %43) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %46

bb3:                                              // Preds: bb1
  %47 = builtin "assumeNonNegative_Int64"(%21 : $Builtin.Int64) : $Builtin.Int64 // user: %48
  %48 = builtin "assumeNonNegative_Int64"(%47 : $Builtin.Int64) : $Builtin.Int64 // user: %49
  %49 = struct $Int (%48 : $Builtin.Int64)        // user: %50
  %50 = struct $UnsafeBufferPointer<UInt8> (%16 : $Optional<UnsafePointer<UInt8>>, %49 : $Int) // user: %51
  try_apply %7(%11, %50, %2, %1, %6) : $@convention(thin) (UnsafeBufferPointer<UInt8>, @in_guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error), normal bb4, error bb5 // id: %51

bb4(%52 : $()):                                   // Preds: bb3
  fix_lifetime %9 : $_ContiguousArrayBuffer<UInt8> // id: %53
  inject_enum_addr %10 : $*Optional<()>, #Optional.some!enumelt // id: %54
  %55 = load %10 : $*Optional<()>                 // user: %57
  dealloc_stack %10 : $*Optional<()>              // id: %56
  switch_enum %55 : $Optional<()>, case #Optional.some!enumelt: bb7, case #Optional.none!enumelt: bb8 // id: %57

bb5(%58 : $any Error):                            // Preds: bb3
  fix_lifetime %9 : $_ContiguousArrayBuffer<UInt8> // id: %59
  dealloc_stack %10 : $*Optional<()>              // id: %60
  unreachable                                     // id: %61

bb6:                                              // Preds: bb0
  br bb9                                          // id: %62

bb7(%63 : $()):                                   // Preds: bb4
  br bb9                                          // id: %64

bb8:                                              // Preds: bb4
  %65 = load %2 : $*Array<UInt8>                  // users: %81, %90, %88, %86, %70, %66
  %66 = struct_extract %65 : $Array<UInt8>, #Array._buffer // user: %67
  %67 = struct_extract %66 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %68
  strong_retain %67 : $__ContiguousArrayStorageBase // id: %68
  %69 = integer_literal $Builtin.Int64, 0         // user: %73
  %70 = struct_extract %65 : $Array<UInt8>, #Array._buffer // user: %71
  %71 = struct_extract %70 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %117
  %72 = integer_literal $Builtin.Int64, 0         // users: %73, %112
  br bb10(%72 : $Builtin.Int64, %69 : $Builtin.Int64) // id: %73

bb9:                                              // Preds: bb6 bb12 bb7
  %74 = tuple ()                                  // user: %76
  dealloc_stack %2 : $*Array<UInt8>               // id: %75
  return %74 : $()                                // id: %76

// %77                                            // users: %99, %108
// %78                                            // users: %83, %79, %93
bb10(%77 : $Builtin.Int64, %78 : $Builtin.Int64): // Preds: bb11 bb8
  %79 = struct $Int (%78 : $Builtin.Int64)        // users: %88, %90
  // function_ref specialized Array._getCount()
  %80 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %81
  %81 = apply %80(%65) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %82
  %82 = struct_extract %81 : $Int, #Int._value    // user: %83
  %83 = builtin "cmp_eq_Int64"(%78 : $Builtin.Int64, %82 : $Builtin.Int64) : $Builtin.Int1 // user: %84
  cond_br %83, bb12, bb11                         // id: %84

bb11:                                             // Preds: bb10
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %85 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %86
  %86 = apply %85(%65) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %90, %88
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %87 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %88
  %88 = apply %87(%79, %86, %65) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %90
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %89 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %90
  %90 = apply %89(%79, %86, %88, %65) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %105
  %91 = integer_literal $Builtin.Int64, 1         // user: %93
  %92 = integer_literal $Builtin.Int1, -1         // user: %93
  %93 = builtin "sadd_with_overflow_Int64"(%78 : $Builtin.Int64, %91 : $Builtin.Int64, %92 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %95, %94
  %94 = tuple_extract %93 : $(Builtin.Int64, Builtin.Int1), 0 // user: %116
  %95 = tuple_extract %93 : $(Builtin.Int64, Builtin.Int1), 1 // user: %96
  cond_fail %95 : $Builtin.Int1, "arithmetic overflow" // id: %96
  %97 = integer_literal $Builtin.Int64, 1         // user: %99
  %98 = integer_literal $Builtin.Int1, -1         // user: %99
  %99 = builtin "sadd_with_overflow_Int64"(%77 : $Builtin.Int64, %97 : $Builtin.Int64, %98 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %101, %100
  %100 = tuple_extract %99 : $(Builtin.Int64, Builtin.Int1), 0 // user: %116
  %101 = tuple_extract %99 : $(Builtin.Int64, Builtin.Int1), 1 // user: %102
  cond_fail %101 : $Builtin.Int1, "arithmetic overflow" // id: %102
  %103 = integer_literal $Builtin.Int1, 0         // user: %114
  %104 = alloc_stack $UInt8                       // users: %115, %106, %105
  store %90 to %104 : $*UInt8                     // id: %105
  %106 = address_to_pointer [stack_protection] %104 : $*UInt8 to $Builtin.RawPointer // user: %114
  %107 = struct_extract %6 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %109
  %108 = builtin "truncOrBitCast_Int64_Word"(%77 : $Builtin.Int64) : $Builtin.Word // user: %109
  %109 = index_raw_pointer %107 : $Builtin.RawPointer, %108 : $Builtin.Word // user: %114
  %110 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %111
  %111 = builtin "sextOrBitCast_Word_Int64"(%110 : $Builtin.Word) : $Builtin.Int64 // users: %114, %112
  %112 = builtin "cmp_slt_Int64"(%111 : $Builtin.Int64, %72 : $Builtin.Int64) : $Builtin.Int1 // user: %113
  cond_fail %112 : $Builtin.Int1, "Negative value is not representable" // id: %113
  %114 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%109 : $Builtin.RawPointer, %106 : $Builtin.RawPointer, %111 : $Builtin.Int64, %103 : $Builtin.Int1) : $()
  dealloc_stack %104 : $*UInt8                    // id: %115
  br bb10(%100 : $Builtin.Int64, %94 : $Builtin.Int64) // id: %116

bb12:                                             // Preds: bb10
  strong_release %71 : $__ContiguousArrayStorageBase // id: %117
  br bb9                                          // id: %118
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5934, stage HighLevel,Function+EarlyLoopOpt, pass 25: EarlyPerfInliner (early-inline)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // user: %3
// %1                                             // users: %52, %4
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = alloc_stack $Array<UInt8>                  // users: %50, %7, %66, %76, %3
  store %0 to %2 : $*Array<UInt8>                 // id: %3
  %4 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %5
  switch_enum %4 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb6 // id: %5

// %6                                             // users: %52, %108
bb1(%6 : $UnsafeMutableRawPointer):               // Preds: bb0
  %7 = struct_element_addr %2 : $*Array<UInt8>, #Array._buffer // user: %8
  %8 = load %7 : $*_ContiguousArrayBuffer<UInt8>  // users: %11, %54, %60
  %9 = alloc_stack $Optional<()>                  // users: %61, %57, %56, %55, %10
  %10 = init_enum_data_addr %9 : $*Optional<()>, #Optional.some!enumelt // user: %52
  %11 = struct_extract %8 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %16, %12
  %12 = ref_tail_addr %11 : $__ContiguousArrayStorageBase, $UInt8 // user: %13
  %13 = address_to_pointer %12 : $*UInt8 to $Builtin.RawPointer // user: %14
  %14 = struct $UnsafePointer<UInt8> (%13 : $Builtin.RawPointer) // user: %15
  %15 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt, %14 : $UnsafePointer<UInt8> // user: %49
  %16 = ref_element_addr %11 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %17
  %17 = struct_element_addr %16 : $*_ArrayBody, #_ArrayBody._storage // user: %18
  %18 = struct_element_addr %17 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %19
  %19 = struct_element_addr %18 : $*Int, #Int._value // user: %20
  %20 = load %19 : $*Builtin.Int64                // users: %46, %33
  %21 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %23
  %22 = integer_literal $Builtin.Word, 24         // user: %25
  %23 = builtin "ptrtoint_Word"(%21 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %24 = integer_literal $Builtin.Int8, 2          // users: %40, %31, %25
  %25 = struct $StaticString (%23 : $Builtin.Word, %22 : $Builtin.Word, %24 : $Builtin.Int8) // user: %44
  %26 = integer_literal $Builtin.Int64, 15505     // user: %27
  %27 = struct $UInt (%26 : $Builtin.Int64)       // user: %44
  %28 = string_literal utf8 ""                    // user: %30
  %29 = integer_literal $Builtin.Word, 0          // user: %31
  %30 = builtin "ptrtoint_Word"(%28 : $Builtin.RawPointer) : $Builtin.Word // user: %31
  %31 = struct $StaticString (%30 : $Builtin.Word, %29 : $Builtin.Word, %24 : $Builtin.Int8) // user: %44
  %32 = integer_literal $Builtin.Int64, 0         // user: %33
  %33 = builtin "cmp_slt_Int64"(%20 : $Builtin.Int64, %32 : $Builtin.Int64) : $Builtin.Int1 // user: %35
  %34 = integer_literal $Builtin.Int1, 0          // user: %35
  %35 = builtin "int_expect_Int1"(%33 : $Builtin.Int1, %34 : $Builtin.Int1) : $Builtin.Int1 // user: %36
  cond_br %35, bb2, bb3                           // id: %36

bb2:                                              // Preds: bb1
  %37 = string_literal utf8 "Fatal error"         // user: %39
  %38 = integer_literal $Builtin.Word, 11         // user: %40
  %39 = builtin "ptrtoint_Word"(%37 : $Builtin.RawPointer) : $Builtin.Word // user: %40
  %40 = struct $StaticString (%39 : $Builtin.Word, %38 : $Builtin.Word, %24 : $Builtin.Int8) // user: %44
  %41 = integer_literal $Builtin.Int32, 0         // user: %42
  %42 = struct $UInt32 (%41 : $Builtin.Int32)     // user: %44
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %43 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %44
  %44 = apply %43(%40, %31, %25, %27, %42) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %45

bb3:                                              // Preds: bb1
  %46 = builtin "assumeNonNegative_Int64"(%20 : $Builtin.Int64) : $Builtin.Int64 // user: %47
  %47 = builtin "assumeNonNegative_Int64"(%46 : $Builtin.Int64) : $Builtin.Int64 // user: %48
  %48 = struct $Int (%47 : $Builtin.Int64)        // user: %49
  %49 = struct $UnsafeBufferPointer<UInt8> (%15 : $Optional<UnsafePointer<UInt8>>, %48 : $Int) // user: %52
  %50 = load %2 : $*Array<UInt8>                  // user: %52
  // function_ref specialized closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %51 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFySRyADGXEfU_SayADG_Tg5 : $@convention(thin) (UnsafeBufferPointer<UInt8>, @guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // user: %52
  try_apply %51(%10, %49, %50, %1, %6) : $@convention(thin) (UnsafeBufferPointer<UInt8>, @guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error), normal bb4, error bb5 // id: %52

bb4(%53 : $()):                                   // Preds: bb3
  fix_lifetime %8 : $_ContiguousArrayBuffer<UInt8> // id: %54
  inject_enum_addr %9 : $*Optional<()>, #Optional.some!enumelt // id: %55
  %56 = load %9 : $*Optional<()>                  // user: %58
  dealloc_stack %9 : $*Optional<()>               // id: %57
  switch_enum %56 : $Optional<()>, case #Optional.some!enumelt: bb7, case #Optional.none!enumelt: bb8 // id: %58

bb5(%59 : $any Error):                            // Preds: bb3
  fix_lifetime %8 : $_ContiguousArrayBuffer<UInt8> // id: %60
  dealloc_stack %9 : $*Optional<()>               // id: %61
  unreachable                                     // id: %62

bb6:                                              // Preds: bb0
  br bb9                                          // id: %63

bb7(%64 : $()):                                   // Preds: bb4
  br bb9                                          // id: %65

bb8:                                              // Preds: bb4
  %66 = load %2 : $*Array<UInt8>                  // users: %82, %91, %89, %87, %71, %67
  %67 = struct_extract %66 : $Array<UInt8>, #Array._buffer // user: %68
  %68 = struct_extract %67 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %69
  strong_retain %68 : $__ContiguousArrayStorageBase // id: %69
  %70 = integer_literal $Builtin.Int64, 0         // user: %74
  %71 = struct_extract %66 : $Array<UInt8>, #Array._buffer // user: %72
  %72 = struct_extract %71 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %118
  %73 = integer_literal $Builtin.Int64, 0         // users: %74, %113
  br bb10(%73 : $Builtin.Int64, %70 : $Builtin.Int64) // id: %74

bb9:                                              // Preds: bb6 bb12 bb7
  %75 = tuple ()                                  // user: %77
  dealloc_stack %2 : $*Array<UInt8>               // id: %76
  return %75 : $()                                // id: %77

// %78                                            // users: %100, %109
// %79                                            // users: %84, %80, %94
bb10(%78 : $Builtin.Int64, %79 : $Builtin.Int64): // Preds: bb11 bb8
  %80 = struct $Int (%79 : $Builtin.Int64)        // users: %89, %91
  // function_ref specialized Array._getCount()
  %81 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %82
  %82 = apply %81(%66) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %83
  %83 = struct_extract %82 : $Int, #Int._value    // user: %84
  %84 = builtin "cmp_eq_Int64"(%79 : $Builtin.Int64, %83 : $Builtin.Int64) : $Builtin.Int1 // user: %85
  cond_br %84, bb12, bb11                         // id: %85

bb11:                                             // Preds: bb10
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %86 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %87
  %87 = apply %86(%66) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %91, %89
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %88 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %89
  %89 = apply %88(%80, %87, %66) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %91
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %90 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %91
  %91 = apply %90(%80, %87, %89, %66) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %106
  %92 = integer_literal $Builtin.Int64, 1         // user: %94
  %93 = integer_literal $Builtin.Int1, -1         // user: %94
  %94 = builtin "sadd_with_overflow_Int64"(%79 : $Builtin.Int64, %92 : $Builtin.Int64, %93 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %96, %95
  %95 = tuple_extract %94 : $(Builtin.Int64, Builtin.Int1), 0 // user: %117
  %96 = tuple_extract %94 : $(Builtin.Int64, Builtin.Int1), 1 // user: %97
  cond_fail %96 : $Builtin.Int1, "arithmetic overflow" // id: %97
  %98 = integer_literal $Builtin.Int64, 1         // user: %100
  %99 = integer_literal $Builtin.Int1, -1         // user: %100
  %100 = builtin "sadd_with_overflow_Int64"(%78 : $Builtin.Int64, %98 : $Builtin.Int64, %99 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %102, %101
  %101 = tuple_extract %100 : $(Builtin.Int64, Builtin.Int1), 0 // user: %117
  %102 = tuple_extract %100 : $(Builtin.Int64, Builtin.Int1), 1 // user: %103
  cond_fail %102 : $Builtin.Int1, "arithmetic overflow" // id: %103
  %104 = integer_literal $Builtin.Int1, 0         // user: %115
  %105 = alloc_stack $UInt8                       // users: %116, %107, %106
  store %91 to %105 : $*UInt8                     // id: %106
  %107 = address_to_pointer [stack_protection] %105 : $*UInt8 to $Builtin.RawPointer // user: %115
  %108 = struct_extract %6 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %110
  %109 = builtin "truncOrBitCast_Int64_Word"(%78 : $Builtin.Int64) : $Builtin.Word // user: %110
  %110 = index_raw_pointer %108 : $Builtin.RawPointer, %109 : $Builtin.Word // user: %115
  %111 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %112
  %112 = builtin "sextOrBitCast_Word_Int64"(%111 : $Builtin.Word) : $Builtin.Int64 // users: %115, %113
  %113 = builtin "cmp_slt_Int64"(%112 : $Builtin.Int64, %73 : $Builtin.Int64) : $Builtin.Int1 // user: %114
  cond_fail %113 : $Builtin.Int1, "Negative value is not representable" // id: %114
  %115 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%110 : $Builtin.RawPointer, %107 : $Builtin.RawPointer, %112 : $Builtin.Int64, %104 : $Builtin.Int1) : $()
  dealloc_stack %105 : $*UInt8                    // id: %116
  br bb10(%101 : $Builtin.Int64, %95 : $Builtin.Int64) // id: %117

bb12:                                             // Preds: bb10
  strong_release %72 : $__ContiguousArrayStorageBase // id: %118
  br bb9                                          // id: %119
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5940, stage HighLevel,Function+EarlyLoopOpt, pass 5: DCE (dce)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // user: %3
// %1                                             // users: %52, %4
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = alloc_stack $Array<UInt8>                  // users: %50, %7, %66, %76, %3
  store %0 to %2 : $*Array<UInt8>                 // id: %3
  %4 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %5
  switch_enum %4 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb6 // id: %5

// %6                                             // users: %52, %108
bb1(%6 : $UnsafeMutableRawPointer):               // Preds: bb0
  %7 = struct_element_addr %2 : $*Array<UInt8>, #Array._buffer // user: %8
  %8 = load %7 : $*_ContiguousArrayBuffer<UInt8>  // users: %11, %54, %60
  %9 = alloc_stack $Optional<()>                  // users: %61, %57, %56, %55, %10
  %10 = init_enum_data_addr %9 : $*Optional<()>, #Optional.some!enumelt // user: %52
  %11 = struct_extract %8 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %16, %12
  %12 = ref_tail_addr %11 : $__ContiguousArrayStorageBase, $UInt8 // user: %13
  %13 = address_to_pointer %12 : $*UInt8 to $Builtin.RawPointer // user: %14
  %14 = struct $UnsafePointer<UInt8> (%13 : $Builtin.RawPointer) // user: %15
  %15 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt, %14 : $UnsafePointer<UInt8> // user: %49
  %16 = ref_element_addr %11 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %17
  %17 = struct_element_addr %16 : $*_ArrayBody, #_ArrayBody._storage // user: %18
  %18 = struct_element_addr %17 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %19
  %19 = struct_element_addr %18 : $*Int, #Int._value // user: %20
  %20 = load %19 : $*Builtin.Int64                // users: %46, %33
  %21 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %23
  %22 = integer_literal $Builtin.Word, 24         // user: %25
  %23 = builtin "ptrtoint_Word"(%21 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %24 = integer_literal $Builtin.Int8, 2          // users: %40, %31, %25
  %25 = struct $StaticString (%23 : $Builtin.Word, %22 : $Builtin.Word, %24 : $Builtin.Int8) // user: %44
  %26 = integer_literal $Builtin.Int64, 15505     // user: %27
  %27 = struct $UInt (%26 : $Builtin.Int64)       // user: %44
  %28 = string_literal utf8 ""                    // user: %30
  %29 = integer_literal $Builtin.Word, 0          // user: %31
  %30 = builtin "ptrtoint_Word"(%28 : $Builtin.RawPointer) : $Builtin.Word // user: %31
  %31 = struct $StaticString (%30 : $Builtin.Word, %29 : $Builtin.Word, %24 : $Builtin.Int8) // user: %44
  %32 = integer_literal $Builtin.Int64, 0         // user: %33
  %33 = builtin "cmp_slt_Int64"(%20 : $Builtin.Int64, %32 : $Builtin.Int64) : $Builtin.Int1 // user: %35
  %34 = integer_literal $Builtin.Int1, 0          // user: %35
  %35 = builtin "int_expect_Int1"(%33 : $Builtin.Int1, %34 : $Builtin.Int1) : $Builtin.Int1 // user: %36
  cond_br %35, bb2, bb3                           // id: %36

bb2:                                              // Preds: bb1
  %37 = string_literal utf8 "Fatal error"         // user: %39
  %38 = integer_literal $Builtin.Word, 11         // user: %40
  %39 = builtin "ptrtoint_Word"(%37 : $Builtin.RawPointer) : $Builtin.Word // user: %40
  %40 = struct $StaticString (%39 : $Builtin.Word, %38 : $Builtin.Word, %24 : $Builtin.Int8) // user: %44
  %41 = integer_literal $Builtin.Int32, 0         // user: %42
  %42 = struct $UInt32 (%41 : $Builtin.Int32)     // user: %44
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %43 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %44
  %44 = apply %43(%40, %31, %25, %27, %42) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %45

bb3:                                              // Preds: bb1
  %46 = builtin "assumeNonNegative_Int64"(%20 : $Builtin.Int64) : $Builtin.Int64 // user: %47
  %47 = builtin "assumeNonNegative_Int64"(%46 : $Builtin.Int64) : $Builtin.Int64 // user: %48
  %48 = struct $Int (%47 : $Builtin.Int64)        // user: %49
  %49 = struct $UnsafeBufferPointer<UInt8> (%15 : $Optional<UnsafePointer<UInt8>>, %48 : $Int) // user: %52
  %50 = load %2 : $*Array<UInt8>                  // user: %52
  // function_ref specialized closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %51 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFySRyADGXEfU_SayADG_Tg5 : $@convention(thin) (UnsafeBufferPointer<UInt8>, @guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // user: %52
  try_apply %51(%10, %49, %50, %1, %6) : $@convention(thin) (UnsafeBufferPointer<UInt8>, @guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error), normal bb4, error bb5 // id: %52

bb4(%53 : $()):                                   // Preds: bb3
  fix_lifetime %8 : $_ContiguousArrayBuffer<UInt8> // id: %54
  inject_enum_addr %9 : $*Optional<()>, #Optional.some!enumelt // id: %55
  %56 = load %9 : $*Optional<()>                  // user: %58
  dealloc_stack %9 : $*Optional<()>               // id: %57
  switch_enum %56 : $Optional<()>, case #Optional.some!enumelt: bb7, case #Optional.none!enumelt: bb8 // id: %58

bb5(%59 : $any Error):                            // Preds: bb3
  fix_lifetime %8 : $_ContiguousArrayBuffer<UInt8> // id: %60
  dealloc_stack %9 : $*Optional<()>               // id: %61
  unreachable                                     // id: %62

bb6:                                              // Preds: bb0
  br bb9                                          // id: %63

bb7(%64 : $()):                                   // Preds: bb4
  br bb9                                          // id: %65

bb8:                                              // Preds: bb4
  %66 = load %2 : $*Array<UInt8>                  // users: %82, %91, %89, %87, %71, %67
  %67 = struct_extract %66 : $Array<UInt8>, #Array._buffer // user: %68
  %68 = struct_extract %67 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %69
  strong_retain %68 : $__ContiguousArrayStorageBase // id: %69
  %70 = integer_literal $Builtin.Int64, 0         // user: %74
  %71 = struct_extract %66 : $Array<UInt8>, #Array._buffer // user: %72
  %72 = struct_extract %71 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %118
  %73 = integer_literal $Builtin.Int64, 0         // users: %74, %113
  br bb10(%73 : $Builtin.Int64, %70 : $Builtin.Int64) // id: %74

bb9:                                              // Preds: bb6 bb12 bb7
  %75 = tuple ()                                  // user: %77
  dealloc_stack %2 : $*Array<UInt8>               // id: %76
  return %75 : $()                                // id: %77

// %78                                            // users: %100, %109
// %79                                            // users: %84, %80, %94
bb10(%78 : $Builtin.Int64, %79 : $Builtin.Int64): // Preds: bb11 bb8
  %80 = struct $Int (%79 : $Builtin.Int64)        // users: %89, %91
  // function_ref specialized Array._getCount()
  %81 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %82
  %82 = apply %81(%66) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %83
  %83 = struct_extract %82 : $Int, #Int._value    // user: %84
  %84 = builtin "cmp_eq_Int64"(%79 : $Builtin.Int64, %83 : $Builtin.Int64) : $Builtin.Int1 // user: %85
  cond_br %84, bb12, bb11                         // id: %85

bb11:                                             // Preds: bb10
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %86 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %87
  %87 = apply %86(%66) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %91, %89
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %88 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %89
  %89 = apply %88(%80, %87, %66) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %91
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %90 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %91
  %91 = apply %90(%80, %87, %89, %66) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %106
  %92 = integer_literal $Builtin.Int64, 1         // user: %94
  %93 = integer_literal $Builtin.Int1, -1         // user: %94
  %94 = builtin "sadd_with_overflow_Int64"(%79 : $Builtin.Int64, %92 : $Builtin.Int64, %93 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %96, %95
  %95 = tuple_extract %94 : $(Builtin.Int64, Builtin.Int1), 0 // user: %117
  %96 = tuple_extract %94 : $(Builtin.Int64, Builtin.Int1), 1 // user: %97
  cond_fail %96 : $Builtin.Int1, "arithmetic overflow" // id: %97
  %98 = integer_literal $Builtin.Int64, 1         // user: %100
  %99 = integer_literal $Builtin.Int1, -1         // user: %100
  %100 = builtin "sadd_with_overflow_Int64"(%78 : $Builtin.Int64, %98 : $Builtin.Int64, %99 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %102, %101
  %101 = tuple_extract %100 : $(Builtin.Int64, Builtin.Int1), 0 // user: %117
  %102 = tuple_extract %100 : $(Builtin.Int64, Builtin.Int1), 1 // user: %103
  cond_fail %102 : $Builtin.Int1, "arithmetic overflow" // id: %103
  %104 = integer_literal $Builtin.Int1, 0         // user: %115
  %105 = alloc_stack $UInt8                       // users: %116, %107, %106
  store %91 to %105 : $*UInt8                     // id: %106
  %107 = address_to_pointer [stack_protection] %105 : $*UInt8 to $Builtin.RawPointer // user: %115
  %108 = struct_extract %6 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %110
  %109 = builtin "truncOrBitCast_Int64_Word"(%78 : $Builtin.Int64) : $Builtin.Word // user: %110
  %110 = index_raw_pointer %108 : $Builtin.RawPointer, %109 : $Builtin.Word // user: %115
  %111 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %112
  %112 = builtin "sextOrBitCast_Word_Int64"(%111 : $Builtin.Word) : $Builtin.Int64 // users: %115, %113
  %113 = builtin "cmp_slt_Int64"(%112 : $Builtin.Int64, %73 : $Builtin.Int64) : $Builtin.Int1 // user: %114
  cond_fail %113 : $Builtin.Int1, "Negative value is not representable" // id: %114
  %115 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%110 : $Builtin.RawPointer, %107 : $Builtin.RawPointer, %112 : $Builtin.Int64, %104 : $Builtin.Int1) : $()
  dealloc_stack %105 : $*UInt8                    // id: %116
  br bb10(%101 : $Builtin.Int64, %95 : $Builtin.Int64) // id: %117

bb12:                                             // Preds: bb10
  strong_release %72 : $__ContiguousArrayStorageBase // id: %118
  br bb9                                          // id: %119
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5943, stage HighLevel,Function+EarlyLoopOpt, pass 8: EarlySROA (early-sroa)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // user: %3
// %1                                             // users: %53, %5
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = alloc_stack $_ContiguousArrayBuffer<UInt8> // users: %78, %8, %4, %67, %50
  %3 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %4
  store %3 to %2 : $*_ContiguousArrayBuffer<UInt8> // id: %4
  %5 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %6
  switch_enum %5 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb6 // id: %6

// %7                                             // users: %53, %110
bb1(%7 : $UnsafeMutableRawPointer):               // Preds: bb0
  %8 = load %2 : $*_ContiguousArrayBuffer<UInt8>  // users: %11, %55, %61
  %9 = alloc_stack $Optional<()>                  // users: %62, %58, %57, %56, %10
  %10 = init_enum_data_addr %9 : $*Optional<()>, #Optional.some!enumelt // user: %53
  %11 = struct_extract %8 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %16, %12
  %12 = ref_tail_addr %11 : $__ContiguousArrayStorageBase, $UInt8 // user: %13
  %13 = address_to_pointer %12 : $*UInt8 to $Builtin.RawPointer // user: %14
  %14 = struct $UnsafePointer<UInt8> (%13 : $Builtin.RawPointer) // user: %15
  %15 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt, %14 : $UnsafePointer<UInt8> // user: %49
  %16 = ref_element_addr %11 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %17
  %17 = struct_element_addr %16 : $*_ArrayBody, #_ArrayBody._storage // user: %18
  %18 = struct_element_addr %17 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %19
  %19 = struct_element_addr %18 : $*Int, #Int._value // user: %20
  %20 = load %19 : $*Builtin.Int64                // users: %46, %33
  %21 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %23
  %22 = integer_literal $Builtin.Word, 24         // user: %25
  %23 = builtin "ptrtoint_Word"(%21 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %24 = integer_literal $Builtin.Int8, 2          // users: %40, %31, %25
  %25 = struct $StaticString (%23 : $Builtin.Word, %22 : $Builtin.Word, %24 : $Builtin.Int8) // user: %44
  %26 = integer_literal $Builtin.Int64, 15505     // user: %27
  %27 = struct $UInt (%26 : $Builtin.Int64)       // user: %44
  %28 = string_literal utf8 ""                    // user: %30
  %29 = integer_literal $Builtin.Word, 0          // user: %31
  %30 = builtin "ptrtoint_Word"(%28 : $Builtin.RawPointer) : $Builtin.Word // user: %31
  %31 = struct $StaticString (%30 : $Builtin.Word, %29 : $Builtin.Word, %24 : $Builtin.Int8) // user: %44
  %32 = integer_literal $Builtin.Int64, 0         // user: %33
  %33 = builtin "cmp_slt_Int64"(%20 : $Builtin.Int64, %32 : $Builtin.Int64) : $Builtin.Int1 // user: %35
  %34 = integer_literal $Builtin.Int1, 0          // user: %35
  %35 = builtin "int_expect_Int1"(%33 : $Builtin.Int1, %34 : $Builtin.Int1) : $Builtin.Int1 // user: %36
  cond_br %35, bb2, bb3                           // id: %36

bb2:                                              // Preds: bb1
  %37 = string_literal utf8 "Fatal error"         // user: %39
  %38 = integer_literal $Builtin.Word, 11         // user: %40
  %39 = builtin "ptrtoint_Word"(%37 : $Builtin.RawPointer) : $Builtin.Word // user: %40
  %40 = struct $StaticString (%39 : $Builtin.Word, %38 : $Builtin.Word, %24 : $Builtin.Int8) // user: %44
  %41 = integer_literal $Builtin.Int32, 0         // user: %42
  %42 = struct $UInt32 (%41 : $Builtin.Int32)     // user: %44
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %43 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %44
  %44 = apply %43(%40, %31, %25, %27, %42) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %45

bb3:                                              // Preds: bb1
  %46 = builtin "assumeNonNegative_Int64"(%20 : $Builtin.Int64) : $Builtin.Int64 // user: %47
  %47 = builtin "assumeNonNegative_Int64"(%46 : $Builtin.Int64) : $Builtin.Int64 // user: %48
  %48 = struct $Int (%47 : $Builtin.Int64)        // user: %49
  %49 = struct $UnsafeBufferPointer<UInt8> (%15 : $Optional<UnsafePointer<UInt8>>, %48 : $Int) // user: %53
  %50 = load %2 : $*_ContiguousArrayBuffer<UInt8> // user: %51
  %51 = struct $Array<UInt8> (%50 : $_ContiguousArrayBuffer<UInt8>) // user: %53
  // function_ref specialized closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %52 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFySRyADGXEfU_SayADG_Tg5 : $@convention(thin) (UnsafeBufferPointer<UInt8>, @guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // user: %53
  try_apply %52(%10, %49, %51, %1, %7) : $@convention(thin) (UnsafeBufferPointer<UInt8>, @guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error), normal bb4, error bb5 // id: %53

bb4(%54 : $()):                                   // Preds: bb3
  fix_lifetime %8 : $_ContiguousArrayBuffer<UInt8> // id: %55
  inject_enum_addr %9 : $*Optional<()>, #Optional.some!enumelt // id: %56
  %57 = load %9 : $*Optional<()>                  // user: %59
  dealloc_stack %9 : $*Optional<()>               // id: %58
  switch_enum %57 : $Optional<()>, case #Optional.some!enumelt: bb7, case #Optional.none!enumelt: bb8 // id: %59

bb5(%60 : $any Error):                            // Preds: bb3
  fix_lifetime %8 : $_ContiguousArrayBuffer<UInt8> // id: %61
  dealloc_stack %9 : $*Optional<()>               // id: %62
  unreachable                                     // id: %63

bb6:                                              // Preds: bb0
  br bb9                                          // id: %64

bb7(%65 : $()):                                   // Preds: bb4
  br bb9                                          // id: %66

bb8:                                              // Preds: bb4
  %67 = load %2 : $*_ContiguousArrayBuffer<UInt8> // user: %68
  %68 = struct $Array<UInt8> (%67 : $_ContiguousArrayBuffer<UInt8>) // users: %69, %73, %89, %91, %93, %84
  %69 = struct_extract %68 : $Array<UInt8>, #Array._buffer // user: %70
  %70 = struct_extract %69 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %71
  strong_retain %70 : $__ContiguousArrayStorageBase // id: %71
  %72 = integer_literal $Builtin.Int64, 0         // user: %76
  %73 = struct_extract %68 : $Array<UInt8>, #Array._buffer // user: %74
  %74 = struct_extract %73 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %120
  %75 = integer_literal $Builtin.Int64, 0         // users: %76, %115
  br bb10(%75 : $Builtin.Int64, %72 : $Builtin.Int64) // id: %76

bb9:                                              // Preds: bb6 bb12 bb7
  %77 = tuple ()                                  // user: %79
  dealloc_stack %2 : $*_ContiguousArrayBuffer<UInt8> // id: %78
  return %77 : $()                                // id: %79

// %80                                            // users: %102, %111
// %81                                            // users: %86, %82, %96
bb10(%80 : $Builtin.Int64, %81 : $Builtin.Int64): // Preds: bb11 bb8
  %82 = struct $Int (%81 : $Builtin.Int64)        // users: %91, %93
  // function_ref specialized Array._getCount()
  %83 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %84
  %84 = apply %83(%68) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %85
  %85 = struct_extract %84 : $Int, #Int._value    // user: %86
  %86 = builtin "cmp_eq_Int64"(%81 : $Builtin.Int64, %85 : $Builtin.Int64) : $Builtin.Int1 // user: %87
  cond_br %86, bb12, bb11                         // id: %87

bb11:                                             // Preds: bb10
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %88 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %89
  %89 = apply %88(%68) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %93, %91
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %90 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %91
  %91 = apply %90(%82, %89, %68) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %93
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %92 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %93
  %93 = apply %92(%82, %89, %91, %68) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %108
  %94 = integer_literal $Builtin.Int64, 1         // user: %96
  %95 = integer_literal $Builtin.Int1, -1         // user: %96
  %96 = builtin "sadd_with_overflow_Int64"(%81 : $Builtin.Int64, %94 : $Builtin.Int64, %95 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %98, %97
  %97 = tuple_extract %96 : $(Builtin.Int64, Builtin.Int1), 0 // user: %119
  %98 = tuple_extract %96 : $(Builtin.Int64, Builtin.Int1), 1 // user: %99
  cond_fail %98 : $Builtin.Int1, "arithmetic overflow" // id: %99
  %100 = integer_literal $Builtin.Int64, 1        // user: %102
  %101 = integer_literal $Builtin.Int1, -1        // user: %102
  %102 = builtin "sadd_with_overflow_Int64"(%80 : $Builtin.Int64, %100 : $Builtin.Int64, %101 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %104, %103
  %103 = tuple_extract %102 : $(Builtin.Int64, Builtin.Int1), 0 // user: %119
  %104 = tuple_extract %102 : $(Builtin.Int64, Builtin.Int1), 1 // user: %105
  cond_fail %104 : $Builtin.Int1, "arithmetic overflow" // id: %105
  %106 = integer_literal $Builtin.Int1, 0         // user: %117
  %107 = alloc_stack $UInt8                       // users: %118, %109, %108
  store %93 to %107 : $*UInt8                     // id: %108
  %109 = address_to_pointer [stack_protection] %107 : $*UInt8 to $Builtin.RawPointer // user: %117
  %110 = struct_extract %7 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %112
  %111 = builtin "truncOrBitCast_Int64_Word"(%80 : $Builtin.Int64) : $Builtin.Word // user: %112
  %112 = index_raw_pointer %110 : $Builtin.RawPointer, %111 : $Builtin.Word // user: %117
  %113 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %114
  %114 = builtin "sextOrBitCast_Word_Int64"(%113 : $Builtin.Word) : $Builtin.Int64 // users: %117, %115
  %115 = builtin "cmp_slt_Int64"(%114 : $Builtin.Int64, %75 : $Builtin.Int64) : $Builtin.Int1 // user: %116
  cond_fail %115 : $Builtin.Int1, "Negative value is not representable" // id: %116
  %117 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%112 : $Builtin.RawPointer, %109 : $Builtin.RawPointer, %114 : $Builtin.Int64, %106 : $Builtin.Int1) : $()
  dealloc_stack %107 : $*UInt8                    // id: %118
  br bb10(%103 : $Builtin.Int64, %97 : $Builtin.Int64) // id: %119

bb12:                                             // Preds: bb10
  strong_release %74 : $__ContiguousArrayStorageBase // id: %120
  br bb9                                          // id: %121
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5944, stage HighLevel,Function+EarlyLoopOpt, pass 9: Mem2Reg (mem2reg)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // user: %2
// %1                                             // users: %49, %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %47, %63, %57, %51, %8
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb6 // id: %4

// %5                                             // users: %49, %104
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %58, %54, %53, %52, %7
  %7 = init_enum_data_addr %6 : $*Optional<()>, #Optional.some!enumelt // user: %49
  %8 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %13, %9
  %9 = ref_tail_addr %8 : $__ContiguousArrayStorageBase, $UInt8 // user: %10
  %10 = address_to_pointer %9 : $*UInt8 to $Builtin.RawPointer // user: %11
  %11 = struct $UnsafePointer<UInt8> (%10 : $Builtin.RawPointer) // user: %12
  %12 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt, %11 : $UnsafePointer<UInt8> // user: %46
  %13 = ref_element_addr %8 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %14
  %14 = struct_element_addr %13 : $*_ArrayBody, #_ArrayBody._storage // user: %15
  %15 = struct_element_addr %14 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %16
  %16 = struct_element_addr %15 : $*Int, #Int._value // user: %17
  %17 = load %16 : $*Builtin.Int64                // users: %43, %30
  %18 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %20
  %19 = integer_literal $Builtin.Word, 24         // user: %22
  %20 = builtin "ptrtoint_Word"(%18 : $Builtin.RawPointer) : $Builtin.Word // user: %22
  %21 = integer_literal $Builtin.Int8, 2          // users: %37, %28, %22
  %22 = struct $StaticString (%20 : $Builtin.Word, %19 : $Builtin.Word, %21 : $Builtin.Int8) // user: %41
  %23 = integer_literal $Builtin.Int64, 15505     // user: %24
  %24 = struct $UInt (%23 : $Builtin.Int64)       // user: %41
  %25 = string_literal utf8 ""                    // user: %27
  %26 = integer_literal $Builtin.Word, 0          // user: %28
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %28
  %28 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %21 : $Builtin.Int8) // user: %41
  %29 = integer_literal $Builtin.Int64, 0         // user: %30
  %30 = builtin "cmp_slt_Int64"(%17 : $Builtin.Int64, %29 : $Builtin.Int64) : $Builtin.Int1 // user: %32
  %31 = integer_literal $Builtin.Int1, 0          // user: %32
  %32 = builtin "int_expect_Int1"(%30 : $Builtin.Int1, %31 : $Builtin.Int1) : $Builtin.Int1 // user: %33
  cond_br %32, bb2, bb3                           // id: %33

bb2:                                              // Preds: bb1
  %34 = string_literal utf8 "Fatal error"         // user: %36
  %35 = integer_literal $Builtin.Word, 11         // user: %37
  %36 = builtin "ptrtoint_Word"(%34 : $Builtin.RawPointer) : $Builtin.Word // user: %37
  %37 = struct $StaticString (%36 : $Builtin.Word, %35 : $Builtin.Word, %21 : $Builtin.Int8) // user: %41
  %38 = integer_literal $Builtin.Int32, 0         // user: %39
  %39 = struct $UInt32 (%38 : $Builtin.Int32)     // user: %41
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %40 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %41
  %41 = apply %40(%37, %28, %22, %24, %39) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %42

bb3:                                              // Preds: bb1
  %43 = builtin "assumeNonNegative_Int64"(%17 : $Builtin.Int64) : $Builtin.Int64 // user: %44
  %44 = builtin "assumeNonNegative_Int64"(%43 : $Builtin.Int64) : $Builtin.Int64 // user: %45
  %45 = struct $Int (%44 : $Builtin.Int64)        // user: %46
  %46 = struct $UnsafeBufferPointer<UInt8> (%12 : $Optional<UnsafePointer<UInt8>>, %45 : $Int) // user: %49
  %47 = struct $Array<UInt8> (%2 : $_ContiguousArrayBuffer<UInt8>) // user: %49
  // function_ref specialized closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %48 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFySRyADGXEfU_SayADG_Tg5 : $@convention(thin) (UnsafeBufferPointer<UInt8>, @guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // user: %49
  try_apply %48(%7, %46, %47, %1, %5) : $@convention(thin) (UnsafeBufferPointer<UInt8>, @guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error), normal bb4, error bb5 // id: %49

bb4(%50 : $()):                                   // Preds: bb3
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %51
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %52
  %53 = load %6 : $*Optional<()>                  // user: %55
  dealloc_stack %6 : $*Optional<()>               // id: %54
  switch_enum %53 : $Optional<()>, case #Optional.some!enumelt: bb7, case #Optional.none!enumelt: bb8 // id: %55

bb5(%56 : $any Error):                            // Preds: bb3
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %57
  dealloc_stack %6 : $*Optional<()>               // id: %58
  unreachable                                     // id: %59

bb6:                                              // Preds: bb0
  br bb9                                          // id: %60

bb7(%61 : $()):                                   // Preds: bb4
  br bb9                                          // id: %62

bb8:                                              // Preds: bb4
  %63 = struct $Array<UInt8> (%2 : $_ContiguousArrayBuffer<UInt8>) // users: %64, %68, %83, %85, %87, %78
  %64 = struct_extract %63 : $Array<UInt8>, #Array._buffer // user: %65
  %65 = struct_extract %64 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %66
  strong_retain %65 : $__ContiguousArrayStorageBase // id: %66
  %67 = integer_literal $Builtin.Int64, 0         // user: %71
  %68 = struct_extract %63 : $Array<UInt8>, #Array._buffer // user: %69
  %69 = struct_extract %68 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %114
  %70 = integer_literal $Builtin.Int64, 0         // users: %71, %109
  br bb10(%70 : $Builtin.Int64, %67 : $Builtin.Int64) // id: %71

bb9:                                              // Preds: bb6 bb12 bb7
  %72 = tuple ()                                  // user: %73
  return %72 : $()                                // id: %73

// %74                                            // users: %96, %105
// %75                                            // users: %80, %76, %90
bb10(%74 : $Builtin.Int64, %75 : $Builtin.Int64): // Preds: bb11 bb8
  %76 = struct $Int (%75 : $Builtin.Int64)        // users: %85, %87
  // function_ref specialized Array._getCount()
  %77 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %78
  %78 = apply %77(%63) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %79
  %79 = struct_extract %78 : $Int, #Int._value    // user: %80
  %80 = builtin "cmp_eq_Int64"(%75 : $Builtin.Int64, %79 : $Builtin.Int64) : $Builtin.Int1 // user: %81
  cond_br %80, bb12, bb11                         // id: %81

bb11:                                             // Preds: bb10
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %82 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %83
  %83 = apply %82(%63) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %87, %85
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %84 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %85
  %85 = apply %84(%76, %83, %63) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %87
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %86 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %87
  %87 = apply %86(%76, %83, %85, %63) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %102
  %88 = integer_literal $Builtin.Int64, 1         // user: %90
  %89 = integer_literal $Builtin.Int1, -1         // user: %90
  %90 = builtin "sadd_with_overflow_Int64"(%75 : $Builtin.Int64, %88 : $Builtin.Int64, %89 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %92, %91
  %91 = tuple_extract %90 : $(Builtin.Int64, Builtin.Int1), 0 // user: %113
  %92 = tuple_extract %90 : $(Builtin.Int64, Builtin.Int1), 1 // user: %93
  cond_fail %92 : $Builtin.Int1, "arithmetic overflow" // id: %93
  %94 = integer_literal $Builtin.Int64, 1         // user: %96
  %95 = integer_literal $Builtin.Int1, -1         // user: %96
  %96 = builtin "sadd_with_overflow_Int64"(%74 : $Builtin.Int64, %94 : $Builtin.Int64, %95 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %98, %97
  %97 = tuple_extract %96 : $(Builtin.Int64, Builtin.Int1), 0 // user: %113
  %98 = tuple_extract %96 : $(Builtin.Int64, Builtin.Int1), 1 // user: %99
  cond_fail %98 : $Builtin.Int1, "arithmetic overflow" // id: %99
  %100 = integer_literal $Builtin.Int1, 0         // user: %111
  %101 = alloc_stack $UInt8                       // users: %112, %103, %102
  store %87 to %101 : $*UInt8                     // id: %102
  %103 = address_to_pointer [stack_protection] %101 : $*UInt8 to $Builtin.RawPointer // user: %111
  %104 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %106
  %105 = builtin "truncOrBitCast_Int64_Word"(%74 : $Builtin.Int64) : $Builtin.Word // user: %106
  %106 = index_raw_pointer %104 : $Builtin.RawPointer, %105 : $Builtin.Word // user: %111
  %107 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %108
  %108 = builtin "sextOrBitCast_Word_Int64"(%107 : $Builtin.Word) : $Builtin.Int64 // users: %111, %109
  %109 = builtin "cmp_slt_Int64"(%108 : $Builtin.Int64, %70 : $Builtin.Int64) : $Builtin.Int1 // user: %110
  cond_fail %109 : $Builtin.Int1, "Negative value is not representable" // id: %110
  %111 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%106 : $Builtin.RawPointer, %103 : $Builtin.RawPointer, %108 : $Builtin.Int64, %100 : $Builtin.Int1) : $()
  dealloc_stack %101 : $*UInt8                    // id: %112
  br bb10(%97 : $Builtin.Int64, %91 : $Builtin.Int64) // id: %113

bb12:                                             // Preds: bb10
  strong_release %69 : $__ContiguousArrayStorageBase // id: %114
  br bb9                                          // id: %115
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5946, stage HighLevel,Function+EarlyLoopOpt, pass 11: PerformanceConstantPropagation (performance-constant-propagation)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // user: %2
// %1                                             // users: %49, %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %67, %64, %47, %63, %57, %51, %8
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb6 // id: %4

// %5                                             // users: %49, %102
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %58, %54, %53, %52, %7
  %7 = init_enum_data_addr %6 : $*Optional<()>, #Optional.some!enumelt // user: %49
  %8 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %13, %9
  %9 = ref_tail_addr %8 : $__ContiguousArrayStorageBase, $UInt8 // user: %10
  %10 = address_to_pointer %9 : $*UInt8 to $Builtin.RawPointer // user: %11
  %11 = struct $UnsafePointer<UInt8> (%10 : $Builtin.RawPointer) // user: %12
  %12 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt, %11 : $UnsafePointer<UInt8> // user: %46
  %13 = ref_element_addr %8 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %14
  %14 = struct_element_addr %13 : $*_ArrayBody, #_ArrayBody._storage // user: %15
  %15 = struct_element_addr %14 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %16
  %16 = struct_element_addr %15 : $*Int, #Int._value // user: %17
  %17 = load %16 : $*Builtin.Int64                // users: %43, %30
  %18 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %20
  %19 = integer_literal $Builtin.Word, 24         // user: %22
  %20 = builtin "ptrtoint_Word"(%18 : $Builtin.RawPointer) : $Builtin.Word // user: %22
  %21 = integer_literal $Builtin.Int8, 2          // users: %37, %28, %22
  %22 = struct $StaticString (%20 : $Builtin.Word, %19 : $Builtin.Word, %21 : $Builtin.Int8) // user: %41
  %23 = integer_literal $Builtin.Int64, 15505     // user: %24
  %24 = struct $UInt (%23 : $Builtin.Int64)       // user: %41
  %25 = string_literal utf8 ""                    // user: %27
  %26 = integer_literal $Builtin.Word, 0          // user: %28
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %28
  %28 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %21 : $Builtin.Int8) // user: %41
  %29 = integer_literal $Builtin.Int64, 0         // user: %30
  %30 = builtin "cmp_slt_Int64"(%17 : $Builtin.Int64, %29 : $Builtin.Int64) : $Builtin.Int1 // user: %32
  %31 = integer_literal $Builtin.Int1, 0          // user: %32
  %32 = builtin "int_expect_Int1"(%30 : $Builtin.Int1, %31 : $Builtin.Int1) : $Builtin.Int1 // user: %33
  cond_br %32, bb2, bb3                           // id: %33

bb2:                                              // Preds: bb1
  %34 = string_literal utf8 "Fatal error"         // user: %36
  %35 = integer_literal $Builtin.Word, 11         // user: %37
  %36 = builtin "ptrtoint_Word"(%34 : $Builtin.RawPointer) : $Builtin.Word // user: %37
  %37 = struct $StaticString (%36 : $Builtin.Word, %35 : $Builtin.Word, %21 : $Builtin.Int8) // user: %41
  %38 = integer_literal $Builtin.Int32, 0         // user: %39
  %39 = struct $UInt32 (%38 : $Builtin.Int32)     // user: %41
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %40 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %41
  %41 = apply %40(%37, %28, %22, %24, %39) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %42

bb3:                                              // Preds: bb1
  %43 = builtin "assumeNonNegative_Int64"(%17 : $Builtin.Int64) : $Builtin.Int64 // user: %44
  %44 = builtin "assumeNonNegative_Int64"(%43 : $Builtin.Int64) : $Builtin.Int64 // user: %45
  %45 = struct $Int (%44 : $Builtin.Int64)        // user: %46
  %46 = struct $UnsafeBufferPointer<UInt8> (%12 : $Optional<UnsafePointer<UInt8>>, %45 : $Int) // user: %49
  %47 = struct $Array<UInt8> (%2 : $_ContiguousArrayBuffer<UInt8>) // user: %49
  // function_ref specialized closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %48 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFySRyADGXEfU_SayADG_Tg5 : $@convention(thin) (UnsafeBufferPointer<UInt8>, @guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // user: %49
  try_apply %48(%7, %46, %47, %1, %5) : $@convention(thin) (UnsafeBufferPointer<UInt8>, @guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error), normal bb4, error bb5 // id: %49

bb4(%50 : $()):                                   // Preds: bb3
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %51
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %52
  %53 = load %6 : $*Optional<()>                  // user: %55
  dealloc_stack %6 : $*Optional<()>               // id: %54
  switch_enum %53 : $Optional<()>, case #Optional.some!enumelt: bb7, case #Optional.none!enumelt: bb8 // id: %55

bb5(%56 : $any Error):                            // Preds: bb3
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %57
  dealloc_stack %6 : $*Optional<()>               // id: %58
  unreachable                                     // id: %59

bb6:                                              // Preds: bb0
  br bb9                                          // id: %60

bb7(%61 : $()):                                   // Preds: bb4
  br bb9                                          // id: %62

bb8:                                              // Preds: bb4
  %63 = struct $Array<UInt8> (%2 : $_ContiguousArrayBuffer<UInt8>) // users: %81, %83, %85, %76
  %64 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %65
  strong_retain %64 : $__ContiguousArrayStorageBase // id: %65
  %66 = integer_literal $Builtin.Int64, 0         // user: %69
  %67 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %112
  %68 = integer_literal $Builtin.Int64, 0         // users: %69, %107
  br bb10(%68 : $Builtin.Int64, %66 : $Builtin.Int64) // id: %69

bb9:                                              // Preds: bb6 bb12 bb7
  %70 = tuple ()                                  // user: %71
  return %70 : $()                                // id: %71

// %72                                            // users: %94, %103
// %73                                            // users: %78, %74, %88
bb10(%72 : $Builtin.Int64, %73 : $Builtin.Int64): // Preds: bb11 bb8
  %74 = struct $Int (%73 : $Builtin.Int64)        // users: %83, %85
  // function_ref specialized Array._getCount()
  %75 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %76
  %76 = apply %75(%63) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %77
  %77 = struct_extract %76 : $Int, #Int._value    // user: %78
  %78 = builtin "cmp_eq_Int64"(%73 : $Builtin.Int64, %77 : $Builtin.Int64) : $Builtin.Int1 // user: %79
  cond_br %78, bb12, bb11                         // id: %79

bb11:                                             // Preds: bb10
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %80 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %81
  %81 = apply %80(%63) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %85, %83
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %82 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %83
  %83 = apply %82(%74, %81, %63) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %85
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %84 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %85
  %85 = apply %84(%74, %81, %83, %63) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %100
  %86 = integer_literal $Builtin.Int64, 1         // user: %88
  %87 = integer_literal $Builtin.Int1, -1         // user: %88
  %88 = builtin "sadd_with_overflow_Int64"(%73 : $Builtin.Int64, %86 : $Builtin.Int64, %87 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %90, %89
  %89 = tuple_extract %88 : $(Builtin.Int64, Builtin.Int1), 0 // user: %111
  %90 = tuple_extract %88 : $(Builtin.Int64, Builtin.Int1), 1 // user: %91
  cond_fail %90 : $Builtin.Int1, "arithmetic overflow" // id: %91
  %92 = integer_literal $Builtin.Int64, 1         // user: %94
  %93 = integer_literal $Builtin.Int1, -1         // user: %94
  %94 = builtin "sadd_with_overflow_Int64"(%72 : $Builtin.Int64, %92 : $Builtin.Int64, %93 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %96, %95
  %95 = tuple_extract %94 : $(Builtin.Int64, Builtin.Int1), 0 // user: %111
  %96 = tuple_extract %94 : $(Builtin.Int64, Builtin.Int1), 1 // user: %97
  cond_fail %96 : $Builtin.Int1, "arithmetic overflow" // id: %97
  %98 = integer_literal $Builtin.Int1, 0          // user: %109
  %99 = alloc_stack $UInt8                        // users: %110, %101, %100
  store %85 to %99 : $*UInt8                      // id: %100
  %101 = address_to_pointer [stack_protection] %99 : $*UInt8 to $Builtin.RawPointer // user: %109
  %102 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %104
  %103 = builtin "truncOrBitCast_Int64_Word"(%72 : $Builtin.Int64) : $Builtin.Word // user: %104
  %104 = index_raw_pointer %102 : $Builtin.RawPointer, %103 : $Builtin.Word // user: %109
  %105 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %106
  %106 = builtin "sextOrBitCast_Word_Int64"(%105 : $Builtin.Word) : $Builtin.Int64 // users: %109, %107
  %107 = builtin "cmp_slt_Int64"(%106 : $Builtin.Int64, %68 : $Builtin.Int64) : $Builtin.Int1 // user: %108
  cond_fail %107 : $Builtin.Int1, "Negative value is not representable" // id: %108
  %109 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%104 : $Builtin.RawPointer, %101 : $Builtin.RawPointer, %106 : $Builtin.Int64, %98 : $Builtin.Int1) : $()
  dealloc_stack %99 : $*UInt8                     // id: %110
  br bb10(%95 : $Builtin.Int64, %89 : $Builtin.Int64) // id: %111

bb12:                                             // Preds: bb10
  strong_release %67 : $__ContiguousArrayStorageBase // id: %112
  br bb9                                          // id: %113
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5949, stage HighLevel,Function+EarlyLoopOpt, pass 14: SILCombine (sil-combine)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // users: %74, %83, %81, %79, %48, %2
// %1                                             // users: %48, %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %65, %62, %56, %50, %8
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb6 // id: %4

// %5                                             // users: %48, %100
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %57, %53, %52, %51, %7
  %7 = init_enum_data_addr %6 : $*Optional<()>, #Optional.some!enumelt // user: %48
  %8 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %13, %9
  %9 = ref_tail_addr %8 : $__ContiguousArrayStorageBase, $UInt8 // user: %10
  %10 = address_to_pointer %9 : $*UInt8 to $Builtin.RawPointer // user: %11
  %11 = struct $UnsafePointer<UInt8> (%10 : $Builtin.RawPointer) // user: %12
  %12 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt, %11 : $UnsafePointer<UInt8> // user: %46
  %13 = ref_element_addr %8 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %14
  %14 = struct_element_addr %13 : $*_ArrayBody, #_ArrayBody._storage // user: %15
  %15 = struct_element_addr %14 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %16
  %16 = struct_element_addr %15 : $*Int, #Int._value // user: %17
  %17 = load %16 : $*Builtin.Int64                // users: %43, %30
  %18 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %20
  %19 = integer_literal $Builtin.Word, 24         // user: %22
  %20 = builtin "ptrtoint_Word"(%18 : $Builtin.RawPointer) : $Builtin.Word // user: %22
  %21 = integer_literal $Builtin.Int8, 2          // users: %37, %28, %22
  %22 = struct $StaticString (%20 : $Builtin.Word, %19 : $Builtin.Word, %21 : $Builtin.Int8) // user: %41
  %23 = integer_literal $Builtin.Int64, 15505     // user: %24
  %24 = struct $UInt (%23 : $Builtin.Int64)       // user: %41
  %25 = string_literal utf8 ""                    // user: %27
  %26 = integer_literal $Builtin.Word, 0          // user: %28
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %28
  %28 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %21 : $Builtin.Int8) // user: %41
  %29 = integer_literal $Builtin.Int64, 0         // user: %30
  %30 = builtin "cmp_slt_Int64"(%17 : $Builtin.Int64, %29 : $Builtin.Int64) : $Builtin.Int1 // user: %32
  %31 = integer_literal $Builtin.Int1, 0          // user: %32
  %32 = builtin "int_expect_Int1"(%30 : $Builtin.Int1, %31 : $Builtin.Int1) : $Builtin.Int1 // user: %33
  cond_br %32, bb2, bb3                           // id: %33

bb2:                                              // Preds: bb1
  %34 = string_literal utf8 "Fatal error"         // user: %36
  %35 = integer_literal $Builtin.Word, 11         // user: %37
  %36 = builtin "ptrtoint_Word"(%34 : $Builtin.RawPointer) : $Builtin.Word // user: %37
  %37 = struct $StaticString (%36 : $Builtin.Word, %35 : $Builtin.Word, %21 : $Builtin.Int8) // user: %41
  %38 = integer_literal $Builtin.Int32, 0         // user: %39
  %39 = struct $UInt32 (%38 : $Builtin.Int32)     // user: %41
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %40 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %41
  %41 = apply %40(%37, %28, %22, %24, %39) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %42

bb3:                                              // Preds: bb1
  %43 = builtin "assumeNonNegative_Int64"(%17 : $Builtin.Int64) : $Builtin.Int64 // user: %44
  %44 = builtin "assumeNonNegative_Int64"(%43 : $Builtin.Int64) : $Builtin.Int64 // user: %45
  %45 = struct $Int (%44 : $Builtin.Int64)        // user: %46
  %46 = struct $UnsafeBufferPointer<UInt8> (%12 : $Optional<UnsafePointer<UInt8>>, %45 : $Int) // user: %48
  // function_ref specialized closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %47 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFySRyADGXEfU_SayADG_Tg5 : $@convention(thin) (UnsafeBufferPointer<UInt8>, @guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // user: %48
  try_apply %47(%7, %46, %0, %1, %5) : $@convention(thin) (UnsafeBufferPointer<UInt8>, @guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error), normal bb4, error bb5 // id: %48

bb4(%49 : $()):                                   // Preds: bb3
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %50
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %51
  %52 = load %6 : $*Optional<()>                  // user: %54
  dealloc_stack %6 : $*Optional<()>               // id: %53
  switch_enum %52 : $Optional<()>, case #Optional.some!enumelt: bb7, case #Optional.none!enumelt: bb8 // id: %54

bb5(%55 : $any Error):                            // Preds: bb3
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %56
  dealloc_stack %6 : $*Optional<()>               // id: %57
  unreachable                                     // id: %58

bb6:                                              // Preds: bb0
  br bb9                                          // id: %59

bb7(%60 : $()):                                   // Preds: bb4
  br bb9                                          // id: %61

bb8:                                              // Preds: bb4
  %62 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %63
  strong_retain %62 : $__ContiguousArrayStorageBase // id: %63
  %64 = integer_literal $Builtin.Int64, 0         // user: %67
  %65 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %110
  %66 = integer_literal $Builtin.Int64, 0         // users: %67, %105
  br bb10(%66 : $Builtin.Int64, %64 : $Builtin.Int64) // id: %67

bb9:                                              // Preds: bb6 bb12 bb7
  %68 = tuple ()                                  // user: %69
  return %68 : $()                                // id: %69

// %70                                            // users: %92, %101
// %71                                            // users: %76, %72, %86
bb10(%70 : $Builtin.Int64, %71 : $Builtin.Int64): // Preds: bb11 bb8
  %72 = struct $Int (%71 : $Builtin.Int64)        // users: %81, %83
  // function_ref specialized Array._getCount()
  %73 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %74
  %74 = apply %73(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %75
  %75 = struct_extract %74 : $Int, #Int._value    // user: %76
  %76 = builtin "cmp_eq_Int64"(%71 : $Builtin.Int64, %75 : $Builtin.Int64) : $Builtin.Int1 // user: %77
  cond_br %76, bb12, bb11                         // id: %77

bb11:                                             // Preds: bb10
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %78 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %79
  %79 = apply %78(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %83, %81
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %80 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %81
  %81 = apply %80(%72, %79, %0) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %83
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %82 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %83
  %83 = apply %82(%72, %79, %81, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %98
  %84 = integer_literal $Builtin.Int64, 1         // user: %86
  %85 = integer_literal $Builtin.Int1, -1         // user: %86
  %86 = builtin "sadd_with_overflow_Int64"(%71 : $Builtin.Int64, %84 : $Builtin.Int64, %85 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %88, %87
  %87 = tuple_extract %86 : $(Builtin.Int64, Builtin.Int1), 0 // user: %109
  %88 = tuple_extract %86 : $(Builtin.Int64, Builtin.Int1), 1 // user: %89
  cond_fail %88 : $Builtin.Int1, "arithmetic overflow" // id: %89
  %90 = integer_literal $Builtin.Int64, 1         // user: %92
  %91 = integer_literal $Builtin.Int1, -1         // user: %92
  %92 = builtin "sadd_with_overflow_Int64"(%70 : $Builtin.Int64, %90 : $Builtin.Int64, %91 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %94, %93
  %93 = tuple_extract %92 : $(Builtin.Int64, Builtin.Int1), 0 // user: %109
  %94 = tuple_extract %92 : $(Builtin.Int64, Builtin.Int1), 1 // user: %95
  cond_fail %94 : $Builtin.Int1, "arithmetic overflow" // id: %95
  %96 = integer_literal $Builtin.Int1, 0          // user: %107
  %97 = alloc_stack $UInt8                        // users: %108, %99, %98
  store %83 to %97 : $*UInt8                      // id: %98
  %99 = address_to_pointer [stack_protection] %97 : $*UInt8 to $Builtin.RawPointer // user: %107
  %100 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %102
  %101 = builtin "truncOrBitCast_Int64_Word"(%70 : $Builtin.Int64) : $Builtin.Word // user: %102
  %102 = index_raw_pointer %100 : $Builtin.RawPointer, %101 : $Builtin.Word // user: %107
  %103 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %104
  %104 = builtin "sextOrBitCast_Word_Int64"(%103 : $Builtin.Word) : $Builtin.Int64 // users: %107, %105
  %105 = builtin "cmp_slt_Int64"(%104 : $Builtin.Int64, %66 : $Builtin.Int64) : $Builtin.Int1 // user: %106
  cond_fail %105 : $Builtin.Int1, "Negative value is not representable" // id: %106
  %107 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%102 : $Builtin.RawPointer, %99 : $Builtin.RawPointer, %104 : $Builtin.Int64, %96 : $Builtin.Int1) : $()
  dealloc_stack %97 : $*UInt8                     // id: %108
  br bb10(%93 : $Builtin.Int64, %87 : $Builtin.Int64) // id: %109

bb12:                                             // Preds: bb10
  strong_release %65 : $__ContiguousArrayStorageBase // id: %110
  br bb9                                          // id: %111
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5955, stage HighLevel,Function+EarlyLoopOpt, pass 21: ComputeSideEffects (compute-side-effects)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy **, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // users: %74, %83, %81, %79, %48, %2
// %1                                             // users: %48, %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %65, %62, %56, %50, %8
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb6 // id: %4

// %5                                             // users: %48, %100
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %57, %53, %52, %51, %7
  %7 = init_enum_data_addr %6 : $*Optional<()>, #Optional.some!enumelt // user: %48
  %8 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %13, %9
  %9 = ref_tail_addr %8 : $__ContiguousArrayStorageBase, $UInt8 // user: %10
  %10 = address_to_pointer %9 : $*UInt8 to $Builtin.RawPointer // user: %11
  %11 = struct $UnsafePointer<UInt8> (%10 : $Builtin.RawPointer) // user: %12
  %12 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt, %11 : $UnsafePointer<UInt8> // user: %46
  %13 = ref_element_addr %8 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %14
  %14 = struct_element_addr %13 : $*_ArrayBody, #_ArrayBody._storage // user: %15
  %15 = struct_element_addr %14 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %16
  %16 = struct_element_addr %15 : $*Int, #Int._value // user: %17
  %17 = load %16 : $*Builtin.Int64                // users: %43, %30
  %18 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %20
  %19 = integer_literal $Builtin.Word, 24         // user: %22
  %20 = builtin "ptrtoint_Word"(%18 : $Builtin.RawPointer) : $Builtin.Word // user: %22
  %21 = integer_literal $Builtin.Int8, 2          // users: %37, %28, %22
  %22 = struct $StaticString (%20 : $Builtin.Word, %19 : $Builtin.Word, %21 : $Builtin.Int8) // user: %41
  %23 = integer_literal $Builtin.Int64, 15505     // user: %24
  %24 = struct $UInt (%23 : $Builtin.Int64)       // user: %41
  %25 = string_literal utf8 ""                    // user: %27
  %26 = integer_literal $Builtin.Word, 0          // user: %28
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %28
  %28 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %21 : $Builtin.Int8) // user: %41
  %29 = integer_literal $Builtin.Int64, 0         // user: %30
  %30 = builtin "cmp_slt_Int64"(%17 : $Builtin.Int64, %29 : $Builtin.Int64) : $Builtin.Int1 // user: %32
  %31 = integer_literal $Builtin.Int1, 0          // user: %32
  %32 = builtin "int_expect_Int1"(%30 : $Builtin.Int1, %31 : $Builtin.Int1) : $Builtin.Int1 // user: %33
  cond_br %32, bb2, bb3                           // id: %33

bb2:                                              // Preds: bb1
  %34 = string_literal utf8 "Fatal error"         // user: %36
  %35 = integer_literal $Builtin.Word, 11         // user: %37
  %36 = builtin "ptrtoint_Word"(%34 : $Builtin.RawPointer) : $Builtin.Word // user: %37
  %37 = struct $StaticString (%36 : $Builtin.Word, %35 : $Builtin.Word, %21 : $Builtin.Int8) // user: %41
  %38 = integer_literal $Builtin.Int32, 0         // user: %39
  %39 = struct $UInt32 (%38 : $Builtin.Int32)     // user: %41
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %40 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %41
  %41 = apply %40(%37, %28, %22, %24, %39) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %42

bb3:                                              // Preds: bb1
  %43 = builtin "assumeNonNegative_Int64"(%17 : $Builtin.Int64) : $Builtin.Int64 // user: %44
  %44 = builtin "assumeNonNegative_Int64"(%43 : $Builtin.Int64) : $Builtin.Int64 // user: %45
  %45 = struct $Int (%44 : $Builtin.Int64)        // user: %46
  %46 = struct $UnsafeBufferPointer<UInt8> (%12 : $Optional<UnsafePointer<UInt8>>, %45 : $Int) // user: %48
  // function_ref specialized closure #1 in UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %47 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFySRyADGXEfU_SayADG_Tg5 : $@convention(thin) (UnsafeBufferPointer<UInt8>, @guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error) // user: %48
  try_apply %47(%7, %46, %0, %1, %5) : $@convention(thin) (UnsafeBufferPointer<UInt8>, @guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer, UnsafeMutableRawPointer) -> (@out (), @error any Error), normal bb4, error bb5 // id: %48

bb4(%49 : $()):                                   // Preds: bb3
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %50
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %51
  %52 = load %6 : $*Optional<()>                  // user: %54
  dealloc_stack %6 : $*Optional<()>               // id: %53
  switch_enum %52 : $Optional<()>, case #Optional.some!enumelt: bb7, case #Optional.none!enumelt: bb8 // id: %54

bb5(%55 : $any Error):                            // Preds: bb3
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %56
  dealloc_stack %6 : $*Optional<()>               // id: %57
  unreachable                                     // id: %58

bb6:                                              // Preds: bb0
  br bb9                                          // id: %59

bb7(%60 : $()):                                   // Preds: bb4
  br bb9                                          // id: %61

bb8:                                              // Preds: bb4
  %62 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %63
  strong_retain %62 : $__ContiguousArrayStorageBase // id: %63
  %64 = integer_literal $Builtin.Int64, 0         // user: %67
  %65 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %110
  %66 = integer_literal $Builtin.Int64, 0         // users: %67, %105
  br bb10(%66 : $Builtin.Int64, %64 : $Builtin.Int64) // id: %67

bb9:                                              // Preds: bb6 bb12 bb7
  %68 = tuple ()                                  // user: %69
  return %68 : $()                                // id: %69

// %70                                            // users: %92, %101
// %71                                            // users: %76, %72, %86
bb10(%70 : $Builtin.Int64, %71 : $Builtin.Int64): // Preds: bb11 bb8
  %72 = struct $Int (%71 : $Builtin.Int64)        // users: %81, %83
  // function_ref specialized Array._getCount()
  %73 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %74
  %74 = apply %73(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %75
  %75 = struct_extract %74 : $Int, #Int._value    // user: %76
  %76 = builtin "cmp_eq_Int64"(%71 : $Builtin.Int64, %75 : $Builtin.Int64) : $Builtin.Int1 // user: %77
  cond_br %76, bb12, bb11                         // id: %77

bb11:                                             // Preds: bb10
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %78 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %79
  %79 = apply %78(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %83, %81
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %80 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %81
  %81 = apply %80(%72, %79, %0) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %83
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %82 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %83
  %83 = apply %82(%72, %79, %81, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %98
  %84 = integer_literal $Builtin.Int64, 1         // user: %86
  %85 = integer_literal $Builtin.Int1, -1         // user: %86
  %86 = builtin "sadd_with_overflow_Int64"(%71 : $Builtin.Int64, %84 : $Builtin.Int64, %85 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %88, %87
  %87 = tuple_extract %86 : $(Builtin.Int64, Builtin.Int1), 0 // user: %109
  %88 = tuple_extract %86 : $(Builtin.Int64, Builtin.Int1), 1 // user: %89
  cond_fail %88 : $Builtin.Int1, "arithmetic overflow" // id: %89
  %90 = integer_literal $Builtin.Int64, 1         // user: %92
  %91 = integer_literal $Builtin.Int1, -1         // user: %92
  %92 = builtin "sadd_with_overflow_Int64"(%70 : $Builtin.Int64, %90 : $Builtin.Int64, %91 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %94, %93
  %93 = tuple_extract %92 : $(Builtin.Int64, Builtin.Int1), 0 // user: %109
  %94 = tuple_extract %92 : $(Builtin.Int64, Builtin.Int1), 1 // user: %95
  cond_fail %94 : $Builtin.Int1, "arithmetic overflow" // id: %95
  %96 = integer_literal $Builtin.Int1, 0          // user: %107
  %97 = alloc_stack $UInt8                        // users: %108, %99, %98
  store %83 to %97 : $*UInt8                      // id: %98
  %99 = address_to_pointer [stack_protection] %97 : $*UInt8 to $Builtin.RawPointer // user: %107
  %100 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %102
  %101 = builtin "truncOrBitCast_Int64_Word"(%70 : $Builtin.Int64) : $Builtin.Word // user: %102
  %102 = index_raw_pointer %100 : $Builtin.RawPointer, %101 : $Builtin.Word // user: %107
  %103 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %104
  %104 = builtin "sextOrBitCast_Word_Int64"(%103 : $Builtin.Word) : $Builtin.Int64 // users: %107, %105
  %105 = builtin "cmp_slt_Int64"(%104 : $Builtin.Int64, %66 : $Builtin.Int64) : $Builtin.Int1 // user: %106
  cond_fail %105 : $Builtin.Int1, "Negative value is not representable" // id: %106
  %107 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%102 : $Builtin.RawPointer, %99 : $Builtin.RawPointer, %104 : $Builtin.Int64, %96 : $Builtin.Int1) : $()
  dealloc_stack %97 : $*UInt8                     // id: %108
  br bb10(%93 : $Builtin.Int64, %87 : $Builtin.Int64) // id: %109

bb12:                                             // Preds: bb10
  strong_release %65 : $__ContiguousArrayStorageBase // id: %110
  br bb9                                          // id: %111
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5959, stage HighLevel,Function+EarlyLoopOpt, pass 25: EarlyPerfInliner (early-inline)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy **, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // users: %85, %94, %92, %90, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %76, %73, %67, %61, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb8 // id: %4

// %5                                             // users: %56, %111
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %68, %64, %63, %62
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %12, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %10
  %10 = struct $UnsafePointer<UInt8> (%9 : $Builtin.RawPointer) // user: %11
  %11 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt, %10 : $UnsafePointer<UInt8> // user: %45
  %12 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %13
  %13 = struct_element_addr %12 : $*_ArrayBody, #_ArrayBody._storage // user: %14
  %14 = struct_element_addr %13 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %15
  %15 = struct_element_addr %14 : $*Int, #Int._value // user: %16
  %16 = load %15 : $*Builtin.Int64                // users: %42, %29
  %17 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %19
  %18 = integer_literal $Builtin.Word, 24         // user: %21
  %19 = builtin "ptrtoint_Word"(%17 : $Builtin.RawPointer) : $Builtin.Word // user: %21
  %20 = integer_literal $Builtin.Int8, 2          // users: %36, %27, %21
  %21 = struct $StaticString (%19 : $Builtin.Word, %18 : $Builtin.Word, %20 : $Builtin.Int8) // user: %40
  %22 = integer_literal $Builtin.Int64, 15505     // user: %23
  %23 = struct $UInt (%22 : $Builtin.Int64)       // user: %40
  %24 = string_literal utf8 ""                    // user: %26
  %25 = integer_literal $Builtin.Word, 0          // user: %27
  %26 = builtin "ptrtoint_Word"(%24 : $Builtin.RawPointer) : $Builtin.Word // user: %27
  %27 = struct $StaticString (%26 : $Builtin.Word, %25 : $Builtin.Word, %20 : $Builtin.Int8) // user: %40
  %28 = integer_literal $Builtin.Int64, 0         // user: %29
  %29 = builtin "cmp_slt_Int64"(%16 : $Builtin.Int64, %28 : $Builtin.Int64) : $Builtin.Int1 // user: %31
  %30 = integer_literal $Builtin.Int1, 0          // user: %31
  %31 = builtin "int_expect_Int1"(%29 : $Builtin.Int1, %30 : $Builtin.Int1) : $Builtin.Int1 // user: %32
  cond_br %31, bb2, bb3                           // id: %32

bb2:                                              // Preds: bb1
  %33 = string_literal utf8 "Fatal error"         // user: %35
  %34 = integer_literal $Builtin.Word, 11         // user: %36
  %35 = builtin "ptrtoint_Word"(%33 : $Builtin.RawPointer) : $Builtin.Word // user: %36
  %36 = struct $StaticString (%35 : $Builtin.Word, %34 : $Builtin.Word, %20 : $Builtin.Int8) // user: %40
  %37 = integer_literal $Builtin.Int32, 0         // user: %38
  %38 = struct $UInt32 (%37 : $Builtin.Int32)     // user: %40
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %39 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %40
  %40 = apply %39(%36, %27, %21, %23, %38) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %41

bb3:                                              // Preds: bb1
  %42 = builtin "assumeNonNegative_Int64"(%16 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %43 = builtin "assumeNonNegative_Int64"(%42 : $Builtin.Int64) : $Builtin.Int64 // user: %44
  %44 = struct $Int (%43 : $Builtin.Int64)        // user: %45
  %45 = struct $UnsafeBufferPointer<UInt8> (%11 : $Optional<UnsafePointer<UInt8>>, %44 : $Int) // users: %50, %46
  %46 = struct_extract %45 : $UnsafeBufferPointer<UInt8>, #UnsafeBufferPointer._position // user: %47
  switch_enum %46 : $Optional<UnsafePointer<UInt8>>, case #Optional.some!enumelt: bb4, case #Optional.none!enumelt: bb5 // id: %47

// %48                                            // user: %49
bb4(%48 : $UnsafePointer<UInt8>):                 // Preds: bb3
  %49 = struct_extract %48 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue // user: %57
  %50 = struct_extract %45 : $UnsafeBufferPointer<UInt8>, #UnsafeBufferPointer.count // user: %52
  %51 = integer_literal $Builtin.Int1, 0          // user: %57
  %52 = struct_extract %50 : $Int, #Int._value    // users: %57, %54
  %53 = integer_literal $Builtin.Int64, 0         // user: %54
  %54 = builtin "cmp_slt_Int64"(%52 : $Builtin.Int64, %53 : $Builtin.Int64) : $Builtin.Int1 // user: %55
  cond_fail %54 : $Builtin.Int1, "Negative value is not representable" // id: %55
  %56 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %57
  %57 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%56 : $Builtin.RawPointer, %49 : $Builtin.RawPointer, %52 : $Builtin.Int64, %51 : $Builtin.Int1) : $()
  br bb6                                          // id: %58

bb5:                                              // Preds: bb3
  br bb6                                          // id: %59

bb6:                                              // Preds: bb5 bb4
  %60 = tuple ()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %61
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %62
  %63 = load %6 : $*Optional<()>                  // user: %65
  dealloc_stack %6 : $*Optional<()>               // id: %64
  switch_enum %63 : $Optional<()>, case #Optional.some!enumelt: bb9, case #Optional.none!enumelt: bb10 // id: %65

bb7(%66 : $any Error):
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %67
  dealloc_stack %6 : $*Optional<()>               // id: %68
  unreachable                                     // id: %69

bb8:                                              // Preds: bb0
  br bb11                                         // id: %70

bb9(%71 : $()):                                   // Preds: bb6
  br bb11                                         // id: %72

bb10:                                             // Preds: bb6
  %73 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %74
  strong_retain %73 : $__ContiguousArrayStorageBase // id: %74
  %75 = integer_literal $Builtin.Int64, 0         // user: %78
  %76 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %121
  %77 = integer_literal $Builtin.Int64, 0         // users: %78, %116
  br bb12(%77 : $Builtin.Int64, %75 : $Builtin.Int64) // id: %78

bb11:                                             // Preds: bb8 bb14 bb9
  %79 = tuple ()                                  // user: %80
  return %79 : $()                                // id: %80

// %81                                            // users: %103, %112
// %82                                            // users: %87, %83, %97
bb12(%81 : $Builtin.Int64, %82 : $Builtin.Int64): // Preds: bb13 bb10
  %83 = struct $Int (%82 : $Builtin.Int64)        // users: %92, %94
  // function_ref specialized Array._getCount()
  %84 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %85
  %85 = apply %84(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %86
  %86 = struct_extract %85 : $Int, #Int._value    // user: %87
  %87 = builtin "cmp_eq_Int64"(%82 : $Builtin.Int64, %86 : $Builtin.Int64) : $Builtin.Int1 // user: %88
  cond_br %87, bb14, bb13                         // id: %88

bb13:                                             // Preds: bb12
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %89 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %90
  %90 = apply %89(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %94, %92
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %91 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %92
  %92 = apply %91(%83, %90, %0) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %94
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %93 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %94
  %94 = apply %93(%83, %90, %92, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %109
  %95 = integer_literal $Builtin.Int64, 1         // user: %97
  %96 = integer_literal $Builtin.Int1, -1         // user: %97
  %97 = builtin "sadd_with_overflow_Int64"(%82 : $Builtin.Int64, %95 : $Builtin.Int64, %96 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %99, %98
  %98 = tuple_extract %97 : $(Builtin.Int64, Builtin.Int1), 0 // user: %120
  %99 = tuple_extract %97 : $(Builtin.Int64, Builtin.Int1), 1 // user: %100
  cond_fail %99 : $Builtin.Int1, "arithmetic overflow" // id: %100
  %101 = integer_literal $Builtin.Int64, 1        // user: %103
  %102 = integer_literal $Builtin.Int1, -1        // user: %103
  %103 = builtin "sadd_with_overflow_Int64"(%81 : $Builtin.Int64, %101 : $Builtin.Int64, %102 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %105, %104
  %104 = tuple_extract %103 : $(Builtin.Int64, Builtin.Int1), 0 // user: %120
  %105 = tuple_extract %103 : $(Builtin.Int64, Builtin.Int1), 1 // user: %106
  cond_fail %105 : $Builtin.Int1, "arithmetic overflow" // id: %106
  %107 = integer_literal $Builtin.Int1, 0         // user: %118
  %108 = alloc_stack $UInt8                       // users: %119, %110, %109
  store %94 to %108 : $*UInt8                     // id: %109
  %110 = address_to_pointer [stack_protection] %108 : $*UInt8 to $Builtin.RawPointer // user: %118
  %111 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %113
  %112 = builtin "truncOrBitCast_Int64_Word"(%81 : $Builtin.Int64) : $Builtin.Word // user: %113
  %113 = index_raw_pointer %111 : $Builtin.RawPointer, %112 : $Builtin.Word // user: %118
  %114 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %115
  %115 = builtin "sextOrBitCast_Word_Int64"(%114 : $Builtin.Word) : $Builtin.Int64 // users: %118, %116
  %116 = builtin "cmp_slt_Int64"(%115 : $Builtin.Int64, %77 : $Builtin.Int64) : $Builtin.Int1 // user: %117
  cond_fail %116 : $Builtin.Int1, "Negative value is not representable" // id: %117
  %118 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%113 : $Builtin.RawPointer, %110 : $Builtin.RawPointer, %115 : $Builtin.Int64, %107 : $Builtin.Int1) : $()
  dealloc_stack %108 : $*UInt8                    // id: %119
  br bb12(%104 : $Builtin.Int64, %98 : $Builtin.Int64) // id: %120

bb14:                                             // Preds: bb12
  strong_release %76 : $__ContiguousArrayStorageBase // id: %121
  br bb11                                         // id: %122
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5965, stage HighLevel,Function+EarlyLoopOpt, pass 5: DCE (dce)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy **, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // users: %80, %89, %87, %85, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %71, %68, %60, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb7 // id: %4

// %5                                             // users: %56, %106
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %63, %62, %61
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %12, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %10
  %10 = struct $UnsafePointer<UInt8> (%9 : $Builtin.RawPointer) // user: %11
  %11 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt, %10 : $UnsafePointer<UInt8> // user: %45
  %12 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %13
  %13 = struct_element_addr %12 : $*_ArrayBody, #_ArrayBody._storage // user: %14
  %14 = struct_element_addr %13 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %15
  %15 = struct_element_addr %14 : $*Int, #Int._value // user: %16
  %16 = load %15 : $*Builtin.Int64                // users: %42, %29
  %17 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %19
  %18 = integer_literal $Builtin.Word, 24         // user: %21
  %19 = builtin "ptrtoint_Word"(%17 : $Builtin.RawPointer) : $Builtin.Word // user: %21
  %20 = integer_literal $Builtin.Int8, 2          // users: %36, %27, %21
  %21 = struct $StaticString (%19 : $Builtin.Word, %18 : $Builtin.Word, %20 : $Builtin.Int8) // user: %40
  %22 = integer_literal $Builtin.Int64, 15505     // user: %23
  %23 = struct $UInt (%22 : $Builtin.Int64)       // user: %40
  %24 = string_literal utf8 ""                    // user: %26
  %25 = integer_literal $Builtin.Word, 0          // user: %27
  %26 = builtin "ptrtoint_Word"(%24 : $Builtin.RawPointer) : $Builtin.Word // user: %27
  %27 = struct $StaticString (%26 : $Builtin.Word, %25 : $Builtin.Word, %20 : $Builtin.Int8) // user: %40
  %28 = integer_literal $Builtin.Int64, 0         // user: %29
  %29 = builtin "cmp_slt_Int64"(%16 : $Builtin.Int64, %28 : $Builtin.Int64) : $Builtin.Int1 // user: %31
  %30 = integer_literal $Builtin.Int1, 0          // user: %31
  %31 = builtin "int_expect_Int1"(%29 : $Builtin.Int1, %30 : $Builtin.Int1) : $Builtin.Int1 // user: %32
  cond_br %31, bb2, bb3                           // id: %32

bb2:                                              // Preds: bb1
  %33 = string_literal utf8 "Fatal error"         // user: %35
  %34 = integer_literal $Builtin.Word, 11         // user: %36
  %35 = builtin "ptrtoint_Word"(%33 : $Builtin.RawPointer) : $Builtin.Word // user: %36
  %36 = struct $StaticString (%35 : $Builtin.Word, %34 : $Builtin.Word, %20 : $Builtin.Int8) // user: %40
  %37 = integer_literal $Builtin.Int32, 0         // user: %38
  %38 = struct $UInt32 (%37 : $Builtin.Int32)     // user: %40
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %39 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %40
  %40 = apply %39(%36, %27, %21, %23, %38) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %41

bb3:                                              // Preds: bb1
  %42 = builtin "assumeNonNegative_Int64"(%16 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %43 = builtin "assumeNonNegative_Int64"(%42 : $Builtin.Int64) : $Builtin.Int64 // user: %44
  %44 = struct $Int (%43 : $Builtin.Int64)        // user: %45
  %45 = struct $UnsafeBufferPointer<UInt8> (%11 : $Optional<UnsafePointer<UInt8>>, %44 : $Int) // users: %50, %46
  %46 = struct_extract %45 : $UnsafeBufferPointer<UInt8>, #UnsafeBufferPointer._position // user: %47
  switch_enum %46 : $Optional<UnsafePointer<UInt8>>, case #Optional.some!enumelt: bb4, case #Optional.none!enumelt: bb5 // id: %47

// %48                                            // user: %49
bb4(%48 : $UnsafePointer<UInt8>):                 // Preds: bb3
  %49 = struct_extract %48 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue // user: %57
  %50 = struct_extract %45 : $UnsafeBufferPointer<UInt8>, #UnsafeBufferPointer.count // user: %52
  %51 = integer_literal $Builtin.Int1, 0          // user: %57
  %52 = struct_extract %50 : $Int, #Int._value    // users: %57, %54
  %53 = integer_literal $Builtin.Int64, 0         // user: %54
  %54 = builtin "cmp_slt_Int64"(%52 : $Builtin.Int64, %53 : $Builtin.Int64) : $Builtin.Int1 // user: %55
  cond_fail %54 : $Builtin.Int1, "Negative value is not representable" // id: %55
  %56 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %57
  %57 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%56 : $Builtin.RawPointer, %49 : $Builtin.RawPointer, %52 : $Builtin.Int64, %51 : $Builtin.Int1) : $()
  br bb6                                          // id: %58

bb5:                                              // Preds: bb3
  br bb6                                          // id: %59

bb6:                                              // Preds: bb5 bb4
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %60
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %61
  %62 = load %6 : $*Optional<()>                  // user: %64
  dealloc_stack %6 : $*Optional<()>               // id: %63
  switch_enum %62 : $Optional<()>, case #Optional.some!enumelt: bb8, case #Optional.none!enumelt: bb9 // id: %64

bb7:                                              // Preds: bb0
  br bb10                                         // id: %65

bb8(%66 : $()):                                   // Preds: bb6
  br bb10                                         // id: %67

bb9:                                              // Preds: bb6
  %68 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %69
  strong_retain %68 : $__ContiguousArrayStorageBase // id: %69
  %70 = integer_literal $Builtin.Int64, 0         // user: %73
  %71 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %116
  %72 = integer_literal $Builtin.Int64, 0         // users: %73, %111
  br bb11(%72 : $Builtin.Int64, %70 : $Builtin.Int64) // id: %73

bb10:                                             // Preds: bb7 bb13 bb8
  %74 = tuple ()                                  // user: %75
  return %74 : $()                                // id: %75

// %76                                            // users: %98, %107
// %77                                            // users: %82, %78, %92
bb11(%76 : $Builtin.Int64, %77 : $Builtin.Int64): // Preds: bb12 bb9
  %78 = struct $Int (%77 : $Builtin.Int64)        // users: %87, %89
  // function_ref specialized Array._getCount()
  %79 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %80
  %80 = apply %79(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %81
  %81 = struct_extract %80 : $Int, #Int._value    // user: %82
  %82 = builtin "cmp_eq_Int64"(%77 : $Builtin.Int64, %81 : $Builtin.Int64) : $Builtin.Int1 // user: %83
  cond_br %82, bb13, bb12                         // id: %83

bb12:                                             // Preds: bb11
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %84 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %85
  %85 = apply %84(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %89, %87
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %86 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %87
  %87 = apply %86(%78, %85, %0) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %89
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %88 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %89
  %89 = apply %88(%78, %85, %87, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %104
  %90 = integer_literal $Builtin.Int64, 1         // user: %92
  %91 = integer_literal $Builtin.Int1, -1         // user: %92
  %92 = builtin "sadd_with_overflow_Int64"(%77 : $Builtin.Int64, %90 : $Builtin.Int64, %91 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %94, %93
  %93 = tuple_extract %92 : $(Builtin.Int64, Builtin.Int1), 0 // user: %115
  %94 = tuple_extract %92 : $(Builtin.Int64, Builtin.Int1), 1 // user: %95
  cond_fail %94 : $Builtin.Int1, "arithmetic overflow" // id: %95
  %96 = integer_literal $Builtin.Int64, 1         // user: %98
  %97 = integer_literal $Builtin.Int1, -1         // user: %98
  %98 = builtin "sadd_with_overflow_Int64"(%76 : $Builtin.Int64, %96 : $Builtin.Int64, %97 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %100, %99
  %99 = tuple_extract %98 : $(Builtin.Int64, Builtin.Int1), 0 // user: %115
  %100 = tuple_extract %98 : $(Builtin.Int64, Builtin.Int1), 1 // user: %101
  cond_fail %100 : $Builtin.Int1, "arithmetic overflow" // id: %101
  %102 = integer_literal $Builtin.Int1, 0         // user: %113
  %103 = alloc_stack $UInt8                       // users: %114, %105, %104
  store %89 to %103 : $*UInt8                     // id: %104
  %105 = address_to_pointer [stack_protection] %103 : $*UInt8 to $Builtin.RawPointer // user: %113
  %106 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %108
  %107 = builtin "truncOrBitCast_Int64_Word"(%76 : $Builtin.Int64) : $Builtin.Word // user: %108
  %108 = index_raw_pointer %106 : $Builtin.RawPointer, %107 : $Builtin.Word // user: %113
  %109 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %110
  %110 = builtin "sextOrBitCast_Word_Int64"(%109 : $Builtin.Word) : $Builtin.Int64 // users: %113, %111
  %111 = builtin "cmp_slt_Int64"(%110 : $Builtin.Int64, %72 : $Builtin.Int64) : $Builtin.Int1 // user: %112
  cond_fail %111 : $Builtin.Int1, "Negative value is not representable" // id: %112
  %113 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%108 : $Builtin.RawPointer, %105 : $Builtin.RawPointer, %110 : $Builtin.Int64, %102 : $Builtin.Int1) : $()
  dealloc_stack %103 : $*UInt8                    // id: %114
  br bb11(%99 : $Builtin.Int64, %93 : $Builtin.Int64) // id: %115

bb13:                                             // Preds: bb11
  strong_release %71 : $__ContiguousArrayStorageBase // id: %116
  br bb10                                         // id: %117
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5971, stage HighLevel,Function+EarlyLoopOpt, pass 11: PerformanceConstantPropagation (performance-constant-propagation)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy **, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // users: %72, %81, %79, %77, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %63, %60, %52, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb7 // id: %4

// %5                                             // users: %48, %98
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %55, %54, %53
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %12, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %10
  %10 = struct $UnsafePointer<UInt8> (%9 : $Builtin.RawPointer) // user: %11
  %11 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt, %10 : $UnsafePointer<UInt8> // user: %44
  %12 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %13
  %13 = struct_element_addr %12 : $*_ArrayBody, #_ArrayBody._storage // user: %14
  %14 = struct_element_addr %13 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %15
  %15 = struct_element_addr %14 : $*Int, #Int._value // user: %16
  %16 = load %15 : $*Builtin.Int64                // users: %42, %29
  %17 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %19
  %18 = integer_literal $Builtin.Word, 24         // user: %21
  %19 = builtin "ptrtoint_Word"(%17 : $Builtin.RawPointer) : $Builtin.Word // user: %21
  %20 = integer_literal $Builtin.Int8, 2          // users: %36, %27, %21
  %21 = struct $StaticString (%19 : $Builtin.Word, %18 : $Builtin.Word, %20 : $Builtin.Int8) // user: %40
  %22 = integer_literal $Builtin.Int64, 15505     // user: %23
  %23 = struct $UInt (%22 : $Builtin.Int64)       // user: %40
  %24 = string_literal utf8 ""                    // user: %26
  %25 = integer_literal $Builtin.Word, 0          // user: %27
  %26 = builtin "ptrtoint_Word"(%24 : $Builtin.RawPointer) : $Builtin.Word // user: %27
  %27 = struct $StaticString (%26 : $Builtin.Word, %25 : $Builtin.Word, %20 : $Builtin.Int8) // user: %40
  %28 = integer_literal $Builtin.Int64, 0         // user: %29
  %29 = builtin "cmp_slt_Int64"(%16 : $Builtin.Int64, %28 : $Builtin.Int64) : $Builtin.Int1 // user: %31
  %30 = integer_literal $Builtin.Int1, 0          // user: %31
  %31 = builtin "int_expect_Int1"(%29 : $Builtin.Int1, %30 : $Builtin.Int1) : $Builtin.Int1 // user: %32
  cond_br %31, bb2, bb3                           // id: %32

bb2:                                              // Preds: bb1
  %33 = string_literal utf8 "Fatal error"         // user: %35
  %34 = integer_literal $Builtin.Word, 11         // user: %36
  %35 = builtin "ptrtoint_Word"(%33 : $Builtin.RawPointer) : $Builtin.Word // user: %36
  %36 = struct $StaticString (%35 : $Builtin.Word, %34 : $Builtin.Word, %20 : $Builtin.Int8) // user: %40
  %37 = integer_literal $Builtin.Int32, 0         // user: %38
  %38 = struct $UInt32 (%37 : $Builtin.Int32)     // user: %40
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %39 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %40
  %40 = apply %39(%36, %27, %21, %23, %38) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %41

bb3:                                              // Preds: bb1
  %42 = builtin "assumeNonNegative_Int64"(%16 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %43 = builtin "assumeNonNegative_Int64"(%42 : $Builtin.Int64) : $Builtin.Int64 // user: %49
  switch_enum %11 : $Optional<UnsafePointer<UInt8>>, case #Optional.some!enumelt: bb4, case #Optional.none!enumelt: bb5 // id: %44

// %45                                            // user: %46
bb4(%45 : $UnsafePointer<UInt8>):                 // Preds: bb3
  %46 = struct_extract %45 : $UnsafePointer<UInt8>, #UnsafePointer._rawValue // user: %49
  %47 = integer_literal $Builtin.Int1, 0          // user: %49
  %48 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %49
  %49 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%48 : $Builtin.RawPointer, %46 : $Builtin.RawPointer, %43 : $Builtin.Int64, %47 : $Builtin.Int1) : $()
  br bb6                                          // id: %50

bb5:                                              // Preds: bb3
  br bb6                                          // id: %51

bb6:                                              // Preds: bb5 bb4
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %52
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %53
  %54 = load %6 : $*Optional<()>                  // user: %56
  dealloc_stack %6 : $*Optional<()>               // id: %55
  switch_enum %54 : $Optional<()>, case #Optional.some!enumelt: bb8, case #Optional.none!enumelt: bb9 // id: %56

bb7:                                              // Preds: bb0
  br bb10                                         // id: %57

bb8(%58 : $()):                                   // Preds: bb6
  br bb10                                         // id: %59

bb9:                                              // Preds: bb6
  %60 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %61
  strong_retain %60 : $__ContiguousArrayStorageBase // id: %61
  %62 = integer_literal $Builtin.Int64, 0         // user: %65
  %63 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %108
  %64 = integer_literal $Builtin.Int64, 0         // users: %65, %103
  br bb11(%64 : $Builtin.Int64, %62 : $Builtin.Int64) // id: %65

bb10:                                             // Preds: bb7 bb13 bb8
  %66 = tuple ()                                  // user: %67
  return %66 : $()                                // id: %67

// %68                                            // users: %90, %99
// %69                                            // users: %74, %70, %84
bb11(%68 : $Builtin.Int64, %69 : $Builtin.Int64): // Preds: bb12 bb9
  %70 = struct $Int (%69 : $Builtin.Int64)        // users: %79, %81
  // function_ref specialized Array._getCount()
  %71 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %72
  %72 = apply %71(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %73
  %73 = struct_extract %72 : $Int, #Int._value    // user: %74
  %74 = builtin "cmp_eq_Int64"(%69 : $Builtin.Int64, %73 : $Builtin.Int64) : $Builtin.Int1 // user: %75
  cond_br %74, bb13, bb12                         // id: %75

bb12:                                             // Preds: bb11
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %76 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %77
  %77 = apply %76(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %81, %79
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %78 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %79
  %79 = apply %78(%70, %77, %0) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %81
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %80 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %81
  %81 = apply %80(%70, %77, %79, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %96
  %82 = integer_literal $Builtin.Int64, 1         // user: %84
  %83 = integer_literal $Builtin.Int1, -1         // user: %84
  %84 = builtin "sadd_with_overflow_Int64"(%69 : $Builtin.Int64, %82 : $Builtin.Int64, %83 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %86, %85
  %85 = tuple_extract %84 : $(Builtin.Int64, Builtin.Int1), 0 // user: %107
  %86 = tuple_extract %84 : $(Builtin.Int64, Builtin.Int1), 1 // user: %87
  cond_fail %86 : $Builtin.Int1, "arithmetic overflow" // id: %87
  %88 = integer_literal $Builtin.Int64, 1         // user: %90
  %89 = integer_literal $Builtin.Int1, -1         // user: %90
  %90 = builtin "sadd_with_overflow_Int64"(%68 : $Builtin.Int64, %88 : $Builtin.Int64, %89 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %92, %91
  %91 = tuple_extract %90 : $(Builtin.Int64, Builtin.Int1), 0 // user: %107
  %92 = tuple_extract %90 : $(Builtin.Int64, Builtin.Int1), 1 // user: %93
  cond_fail %92 : $Builtin.Int1, "arithmetic overflow" // id: %93
  %94 = integer_literal $Builtin.Int1, 0          // user: %105
  %95 = alloc_stack $UInt8                        // users: %106, %97, %96
  store %81 to %95 : $*UInt8                      // id: %96
  %97 = address_to_pointer [stack_protection] %95 : $*UInt8 to $Builtin.RawPointer // user: %105
  %98 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %100
  %99 = builtin "truncOrBitCast_Int64_Word"(%68 : $Builtin.Int64) : $Builtin.Word // user: %100
  %100 = index_raw_pointer %98 : $Builtin.RawPointer, %99 : $Builtin.Word // user: %105
  %101 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %102
  %102 = builtin "sextOrBitCast_Word_Int64"(%101 : $Builtin.Word) : $Builtin.Int64 // users: %105, %103
  %103 = builtin "cmp_slt_Int64"(%102 : $Builtin.Int64, %64 : $Builtin.Int64) : $Builtin.Int1 // user: %104
  cond_fail %103 : $Builtin.Int1, "Negative value is not representable" // id: %104
  %105 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%100 : $Builtin.RawPointer, %97 : $Builtin.RawPointer, %102 : $Builtin.Int64, %94 : $Builtin.Int1) : $()
  dealloc_stack %95 : $*UInt8                     // id: %106
  br bb11(%91 : $Builtin.Int64, %85 : $Builtin.Int64) // id: %107

bb13:                                             // Preds: bb11
  strong_release %63 : $__ContiguousArrayStorageBase // id: %108
  br bb10                                         // id: %109
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5972, stage HighLevel,Function+EarlyLoopOpt, pass 12: SimplifyCFG (simplify-cfg)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy **, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // users: %67, %76, %74, %72, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %58, %55, %47, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // users: %45, %93
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %50, %49, %48
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %12, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // users: %46, %10
  %10 = struct $UnsafePointer<UInt8> (%9 : $Builtin.RawPointer) // user: %11
  %11 = enum $Optional<UnsafePointer<UInt8>>, #Optional.some!enumelt, %10 : $UnsafePointer<UInt8>
  %12 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %13
  %13 = struct_element_addr %12 : $*_ArrayBody, #_ArrayBody._storage // user: %14
  %14 = struct_element_addr %13 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %15
  %15 = struct_element_addr %14 : $*Int, #Int._value // user: %16
  %16 = load %15 : $*Builtin.Int64                // users: %42, %29
  %17 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %19
  %18 = integer_literal $Builtin.Word, 24         // user: %21
  %19 = builtin "ptrtoint_Word"(%17 : $Builtin.RawPointer) : $Builtin.Word // user: %21
  %20 = integer_literal $Builtin.Int8, 2          // users: %36, %27, %21
  %21 = struct $StaticString (%19 : $Builtin.Word, %18 : $Builtin.Word, %20 : $Builtin.Int8) // user: %40
  %22 = integer_literal $Builtin.Int64, 15505     // user: %23
  %23 = struct $UInt (%22 : $Builtin.Int64)       // user: %40
  %24 = string_literal utf8 ""                    // user: %26
  %25 = integer_literal $Builtin.Word, 0          // user: %27
  %26 = builtin "ptrtoint_Word"(%24 : $Builtin.RawPointer) : $Builtin.Word // user: %27
  %27 = struct $StaticString (%26 : $Builtin.Word, %25 : $Builtin.Word, %20 : $Builtin.Int8) // user: %40
  %28 = integer_literal $Builtin.Int64, 0         // user: %29
  %29 = builtin "cmp_slt_Int64"(%16 : $Builtin.Int64, %28 : $Builtin.Int64) : $Builtin.Int1 // user: %31
  %30 = integer_literal $Builtin.Int1, 0          // user: %31
  %31 = builtin "int_expect_Int1"(%29 : $Builtin.Int1, %30 : $Builtin.Int1) : $Builtin.Int1 // user: %32
  cond_br %31, bb2, bb3                           // id: %32

bb2:                                              // Preds: bb1
  %33 = string_literal utf8 "Fatal error"         // user: %35
  %34 = integer_literal $Builtin.Word, 11         // user: %36
  %35 = builtin "ptrtoint_Word"(%33 : $Builtin.RawPointer) : $Builtin.Word // user: %36
  %36 = struct $StaticString (%35 : $Builtin.Word, %34 : $Builtin.Word, %20 : $Builtin.Int8) // user: %40
  %37 = integer_literal $Builtin.Int32, 0         // user: %38
  %38 = struct $UInt32 (%37 : $Builtin.Int32)     // user: %40
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %39 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %40
  %40 = apply %39(%36, %27, %21, %23, %38) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %41

bb3:                                              // Preds: bb1
  %42 = builtin "assumeNonNegative_Int64"(%16 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %43 = builtin "assumeNonNegative_Int64"(%42 : $Builtin.Int64) : $Builtin.Int64 // user: %46
  %44 = integer_literal $Builtin.Int1, 0          // user: %46
  %45 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %46
  %46 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%45 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %43 : $Builtin.Int64, %44 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %47
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %48
  %49 = load %6 : $*Optional<()>                  // user: %51
  dealloc_stack %6 : $*Optional<()>               // id: %50
  switch_enum %49 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %51

bb4:                                              // Preds: bb0
  br bb7                                          // id: %52

bb5(%53 : $()):                                   // Preds: bb3
  br bb7                                          // id: %54

bb6:                                              // Preds: bb3
  %55 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %56
  strong_retain %55 : $__ContiguousArrayStorageBase // id: %56
  %57 = integer_literal $Builtin.Int64, 0         // user: %60
  %58 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %103
  %59 = integer_literal $Builtin.Int64, 0         // users: %60, %98
  br bb8(%59 : $Builtin.Int64, %57 : $Builtin.Int64) // id: %60

bb7:                                              // Preds: bb4 bb10 bb5
  %61 = tuple ()                                  // user: %62
  return %61 : $()                                // id: %62

// %63                                            // users: %85, %94
// %64                                            // users: %69, %65, %79
bb8(%63 : $Builtin.Int64, %64 : $Builtin.Int64):  // Preds: bb9 bb6
  %65 = struct $Int (%64 : $Builtin.Int64)        // users: %74, %76
  // function_ref specialized Array._getCount()
  %66 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %67
  %67 = apply %66(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %68
  %68 = struct_extract %67 : $Int, #Int._value    // user: %69
  %69 = builtin "cmp_eq_Int64"(%64 : $Builtin.Int64, %68 : $Builtin.Int64) : $Builtin.Int1 // user: %70
  cond_br %69, bb10, bb9                          // id: %70

bb9:                                              // Preds: bb8
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %71 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %72
  %72 = apply %71(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %76, %74
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %73 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %74
  %74 = apply %73(%65, %72, %0) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %76
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %75 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %76
  %76 = apply %75(%65, %72, %74, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %91
  %77 = integer_literal $Builtin.Int64, 1         // user: %79
  %78 = integer_literal $Builtin.Int1, -1         // user: %79
  %79 = builtin "sadd_with_overflow_Int64"(%64 : $Builtin.Int64, %77 : $Builtin.Int64, %78 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %81, %80
  %80 = tuple_extract %79 : $(Builtin.Int64, Builtin.Int1), 0 // user: %102
  %81 = tuple_extract %79 : $(Builtin.Int64, Builtin.Int1), 1 // user: %82
  cond_fail %81 : $Builtin.Int1, "arithmetic overflow" // id: %82
  %83 = integer_literal $Builtin.Int64, 1         // user: %85
  %84 = integer_literal $Builtin.Int1, -1         // user: %85
  %85 = builtin "sadd_with_overflow_Int64"(%63 : $Builtin.Int64, %83 : $Builtin.Int64, %84 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %87, %86
  %86 = tuple_extract %85 : $(Builtin.Int64, Builtin.Int1), 0 // user: %102
  %87 = tuple_extract %85 : $(Builtin.Int64, Builtin.Int1), 1 // user: %88
  cond_fail %87 : $Builtin.Int1, "arithmetic overflow" // id: %88
  %89 = integer_literal $Builtin.Int1, 0          // user: %100
  %90 = alloc_stack $UInt8                        // users: %101, %92, %91
  store %76 to %90 : $*UInt8                      // id: %91
  %92 = address_to_pointer [stack_protection] %90 : $*UInt8 to $Builtin.RawPointer // user: %100
  %93 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %95
  %94 = builtin "truncOrBitCast_Int64_Word"(%63 : $Builtin.Int64) : $Builtin.Word // user: %95
  %95 = index_raw_pointer %93 : $Builtin.RawPointer, %94 : $Builtin.Word // user: %100
  %96 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %97
  %97 = builtin "sextOrBitCast_Word_Int64"(%96 : $Builtin.Word) : $Builtin.Int64 // users: %100, %98
  %98 = builtin "cmp_slt_Int64"(%97 : $Builtin.Int64, %59 : $Builtin.Int64) : $Builtin.Int1 // user: %99
  cond_fail %98 : $Builtin.Int1, "Negative value is not representable" // id: %99
  %100 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%95 : $Builtin.RawPointer, %92 : $Builtin.RawPointer, %97 : $Builtin.Int64, %89 : $Builtin.Int1) : $()
  dealloc_stack %90 : $*UInt8                     // id: %101
  br bb8(%86 : $Builtin.Int64, %80 : $Builtin.Int64) // id: %102

bb10:                                             // Preds: bb8
  strong_release %58 : $__ContiguousArrayStorageBase // id: %103
  br bb7                                          // id: %104
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5974, stage HighLevel,Function+EarlyLoopOpt, pass 14: SILCombine (sil-combine)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy **, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // users: %65, %74, %72, %70, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %56, %53, %45, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // users: %43, %91
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %48, %47, %46
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %44
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // user: %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // user: %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %44
  %42 = integer_literal $Builtin.Int1, 0          // user: %44
  %43 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %44
  %44 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%43 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %42 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %45
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %46
  %47 = load %6 : $*Optional<()>                  // user: %49
  dealloc_stack %6 : $*Optional<()>               // id: %48
  switch_enum %47 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %49

bb4:                                              // Preds: bb0
  br bb7                                          // id: %50

bb5(%51 : $()):                                   // Preds: bb3
  br bb7                                          // id: %52

bb6:                                              // Preds: bb3
  %53 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %54
  strong_retain %53 : $__ContiguousArrayStorageBase // id: %54
  %55 = integer_literal $Builtin.Int64, 0         // user: %58
  %56 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %101
  %57 = integer_literal $Builtin.Int64, 0         // users: %58, %96
  br bb8(%57 : $Builtin.Int64, %55 : $Builtin.Int64) // id: %58

bb7:                                              // Preds: bb4 bb10 bb5
  %59 = tuple ()                                  // user: %60
  return %59 : $()                                // id: %60

// %61                                            // users: %83, %92
// %62                                            // users: %67, %63, %77
bb8(%61 : $Builtin.Int64, %62 : $Builtin.Int64):  // Preds: bb9 bb6
  %63 = struct $Int (%62 : $Builtin.Int64)        // users: %72, %74
  // function_ref specialized Array._getCount()
  %64 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %65
  %65 = apply %64(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %66
  %66 = struct_extract %65 : $Int, #Int._value    // user: %67
  %67 = builtin "cmp_eq_Int64"(%62 : $Builtin.Int64, %66 : $Builtin.Int64) : $Builtin.Int1 // user: %68
  cond_br %67, bb10, bb9                          // id: %68

bb9:                                              // Preds: bb8
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %69 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %70
  %70 = apply %69(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %74, %72
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %71 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %72
  %72 = apply %71(%63, %70, %0) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %74
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %73 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %74
  %74 = apply %73(%63, %70, %72, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %89
  %75 = integer_literal $Builtin.Int64, 1         // user: %77
  %76 = integer_literal $Builtin.Int1, -1         // user: %77
  %77 = builtin "sadd_with_overflow_Int64"(%62 : $Builtin.Int64, %75 : $Builtin.Int64, %76 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %79, %78
  %78 = tuple_extract %77 : $(Builtin.Int64, Builtin.Int1), 0 // user: %100
  %79 = tuple_extract %77 : $(Builtin.Int64, Builtin.Int1), 1 // user: %80
  cond_fail %79 : $Builtin.Int1, "arithmetic overflow" // id: %80
  %81 = integer_literal $Builtin.Int64, 1         // user: %83
  %82 = integer_literal $Builtin.Int1, -1         // user: %83
  %83 = builtin "sadd_with_overflow_Int64"(%61 : $Builtin.Int64, %81 : $Builtin.Int64, %82 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %85, %84
  %84 = tuple_extract %83 : $(Builtin.Int64, Builtin.Int1), 0 // user: %100
  %85 = tuple_extract %83 : $(Builtin.Int64, Builtin.Int1), 1 // user: %86
  cond_fail %85 : $Builtin.Int1, "arithmetic overflow" // id: %86
  %87 = integer_literal $Builtin.Int1, 0          // user: %98
  %88 = alloc_stack $UInt8                        // users: %99, %90, %89
  store %74 to %88 : $*UInt8                      // id: %89
  %90 = address_to_pointer [stack_protection] %88 : $*UInt8 to $Builtin.RawPointer // user: %98
  %91 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %93
  %92 = builtin "truncOrBitCast_Int64_Word"(%61 : $Builtin.Int64) : $Builtin.Word // user: %93
  %93 = index_raw_pointer %91 : $Builtin.RawPointer, %92 : $Builtin.Word // user: %98
  %94 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %95
  %95 = builtin "sextOrBitCast_Word_Int64"(%94 : $Builtin.Word) : $Builtin.Int64 // users: %98, %96
  %96 = builtin "cmp_slt_Int64"(%95 : $Builtin.Int64, %57 : $Builtin.Int64) : $Builtin.Int1 // user: %97
  cond_fail %96 : $Builtin.Int1, "Negative value is not representable" // id: %97
  %98 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%93 : $Builtin.RawPointer, %90 : $Builtin.RawPointer, %95 : $Builtin.Int64, %87 : $Builtin.Int1) : $()
  dealloc_stack %88 : $*UInt8                     // id: %99
  br bb8(%84 : $Builtin.Int64, %78 : $Builtin.Int64) // id: %100

bb10:                                             // Preds: bb8
  strong_release %56 : $__ContiguousArrayStorageBase // id: %101
  br bb7                                          // id: %102
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5990, stage HighLevel,Function+EarlyLoopOpt, pass 32: CSE (cse)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy **, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // users: %60, %69, %67, %65, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %92, %52, %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %87, %53, %53, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %89, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %84, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb7                                          // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb7                                          // id: %51

bb6:                                              // Preds: bb3
  strong_retain %7 : $__ContiguousArrayStorageBase // id: %52
  br bb8(%26 : $Builtin.Int64, %26 : $Builtin.Int64) // id: %53

bb7:                                              // Preds: bb4 bb10 bb5
  %54 = tuple ()                                  // user: %55
  return %54 : $()                                // id: %55

// %56                                            // users: %76, %83
// %57                                            // users: %62, %58, %72
bb8(%56 : $Builtin.Int64, %57 : $Builtin.Int64):  // Preds: bb9 bb6
  %58 = struct $Int (%57 : $Builtin.Int64)        // users: %67, %69
  // function_ref specialized Array._getCount()
  %59 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %60
  %60 = apply %59(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %61
  %61 = struct_extract %60 : $Int, #Int._value    // user: %62
  %62 = builtin "cmp_eq_Int64"(%57 : $Builtin.Int64, %61 : $Builtin.Int64) : $Builtin.Int1 // user: %63
  cond_br %62, bb10, bb9                          // id: %63

bb9:                                              // Preds: bb8
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %64 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %65
  %65 = apply %64(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %69, %67
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %66 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %67
  %67 = apply %66(%58, %65, %0) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %69
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %68 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %69
  %69 = apply %68(%58, %65, %67, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %81
  %70 = integer_literal $Builtin.Int64, 1         // users: %76, %72
  %71 = integer_literal $Builtin.Int1, -1         // users: %76, %72
  %72 = builtin "sadd_with_overflow_Int64"(%57 : $Builtin.Int64, %70 : $Builtin.Int64, %71 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %74, %73
  %73 = tuple_extract %72 : $(Builtin.Int64, Builtin.Int1), 0 // user: %91
  %74 = tuple_extract %72 : $(Builtin.Int64, Builtin.Int1), 1 // user: %75
  cond_fail %74 : $Builtin.Int1, "arithmetic overflow" // id: %75
  %76 = builtin "sadd_with_overflow_Int64"(%56 : $Builtin.Int64, %70 : $Builtin.Int64, %71 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %78, %77
  %77 = tuple_extract %76 : $(Builtin.Int64, Builtin.Int1), 0 // user: %91
  %78 = tuple_extract %76 : $(Builtin.Int64, Builtin.Int1), 1 // user: %79
  cond_fail %78 : $Builtin.Int1, "arithmetic overflow" // id: %79
  %80 = alloc_stack $UInt8                        // users: %90, %82, %81
  store %69 to %80 : $*UInt8                      // id: %81
  %82 = address_to_pointer [stack_protection] %80 : $*UInt8 to $Builtin.RawPointer // user: %89
  %83 = builtin "truncOrBitCast_Int64_Word"(%56 : $Builtin.Int64) : $Builtin.Word // user: %84
  %84 = index_raw_pointer %42 : $Builtin.RawPointer, %83 : $Builtin.Word // user: %89
  %85 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %86
  %86 = builtin "sextOrBitCast_Word_Int64"(%85 : $Builtin.Word) : $Builtin.Int64 // users: %89, %87
  %87 = builtin "cmp_slt_Int64"(%86 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %88
  cond_fail %87 : $Builtin.Int1, "Negative value is not representable" // id: %88
  %89 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%84 : $Builtin.RawPointer, %82 : $Builtin.RawPointer, %86 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %80 : $*UInt8                     // id: %90
  br bb8(%77 : $Builtin.Int64, %73 : $Builtin.Int64) // id: %91

bb10:                                             // Preds: bb8
  strong_release %7 : $__ContiguousArrayStorageBase // id: %92
  br bb7                                          // id: %93
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5995, stage HighLevel,Function+EarlyLoopOpt, pass 37: RedundantPhiElimination (redundant-phi-elimination)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy **, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // users: %59, %68, %66, %64, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %90, %52, %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %53, %85, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %87, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %82, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb7                                          // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb7                                          // id: %51

bb6:                                              // Preds: bb3
  strong_retain %7 : $__ContiguousArrayStorageBase // id: %52
  br bb8(%26 : $Builtin.Int64)                    // id: %53

bb7:                                              // Preds: bb4 bb10 bb5
  %54 = tuple ()                                  // user: %55
  return %54 : $()                                // id: %55

// %56                                            // users: %71, %57, %61, %74, %81
bb8(%56 : $Builtin.Int64):                        // Preds: bb6 bb9
  %57 = struct $Int (%56 : $Builtin.Int64)        // users: %66, %68
  // function_ref specialized Array._getCount()
  %58 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %59
  %59 = apply %58(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %60
  %60 = struct_extract %59 : $Int, #Int._value    // user: %61
  %61 = builtin "cmp_eq_Int64"(%56 : $Builtin.Int64, %60 : $Builtin.Int64) : $Builtin.Int1 // user: %62
  cond_br %61, bb10, bb9                          // id: %62

bb9:                                              // Preds: bb8
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %63 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %64
  %64 = apply %63(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %68, %66
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %65 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %66
  %66 = apply %65(%57, %64, %0) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %68
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %67 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %68
  %68 = apply %67(%57, %64, %66, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %79
  %69 = integer_literal $Builtin.Int64, 1         // users: %74, %71
  %70 = integer_literal $Builtin.Int1, -1         // users: %74, %71
  %71 = builtin "sadd_with_overflow_Int64"(%56 : $Builtin.Int64, %69 : $Builtin.Int64, %70 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %72
  %72 = tuple_extract %71 : $(Builtin.Int64, Builtin.Int1), 1 // user: %73
  cond_fail %72 : $Builtin.Int1, "arithmetic overflow" // id: %73
  %74 = builtin "sadd_with_overflow_Int64"(%56 : $Builtin.Int64, %69 : $Builtin.Int64, %70 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %76, %75
  %75 = tuple_extract %74 : $(Builtin.Int64, Builtin.Int1), 0 // user: %89
  %76 = tuple_extract %74 : $(Builtin.Int64, Builtin.Int1), 1 // user: %77
  cond_fail %76 : $Builtin.Int1, "arithmetic overflow" // id: %77
  %78 = alloc_stack $UInt8                        // users: %88, %80, %79
  store %68 to %78 : $*UInt8                      // id: %79
  %80 = address_to_pointer [stack_protection] %78 : $*UInt8 to $Builtin.RawPointer // user: %87
  %81 = builtin "truncOrBitCast_Int64_Word"(%56 : $Builtin.Int64) : $Builtin.Word // user: %82
  %82 = index_raw_pointer %42 : $Builtin.RawPointer, %81 : $Builtin.Word // user: %87
  %83 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %84
  %84 = builtin "sextOrBitCast_Word_Int64"(%83 : $Builtin.Word) : $Builtin.Int64 // users: %87, %85
  %85 = builtin "cmp_slt_Int64"(%84 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %86
  cond_fail %85 : $Builtin.Int1, "Negative value is not representable" // id: %86
  %87 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%82 : $Builtin.RawPointer, %80 : $Builtin.RawPointer, %84 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %78 : $*UInt8                     // id: %88
  br bb8(%75 : $Builtin.Int64)                    // id: %89

bb10:                                             // Preds: bb8
  strong_release %7 : $__ContiguousArrayStorageBase // id: %90
  br bb7                                          // id: %91
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5996, stage HighLevel,Function+EarlyLoopOpt, pass 38: CSE (cse)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy **, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // users: %59, %68, %66, %64, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %87, %52, %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %53, %82, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %84, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %79, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb7                                          // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb7                                          // id: %51

bb6:                                              // Preds: bb3
  strong_retain %7 : $__ContiguousArrayStorageBase // id: %52
  br bb8(%26 : $Builtin.Int64)                    // id: %53

bb7:                                              // Preds: bb4 bb10 bb5
  %54 = tuple ()                                  // user: %55
  return %54 : $()                                // id: %55

// %56                                            // users: %71, %57, %61, %78
bb8(%56 : $Builtin.Int64):                        // Preds: bb6 bb9
  %57 = struct $Int (%56 : $Builtin.Int64)        // users: %66, %68
  // function_ref specialized Array._getCount()
  %58 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %59
  %59 = apply %58(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %60
  %60 = struct_extract %59 : $Int, #Int._value    // user: %61
  %61 = builtin "cmp_eq_Int64"(%56 : $Builtin.Int64, %60 : $Builtin.Int64) : $Builtin.Int1 // user: %62
  cond_br %61, bb10, bb9                          // id: %62

bb9:                                              // Preds: bb8
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %63 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %64
  %64 = apply %63(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %68, %66
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %65 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %66
  %66 = apply %65(%57, %64, %0) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %68
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %67 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %68
  %68 = apply %67(%57, %64, %66, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %76
  %69 = integer_literal $Builtin.Int64, 1         // user: %71
  %70 = integer_literal $Builtin.Int1, -1         // user: %71
  %71 = builtin "sadd_with_overflow_Int64"(%56 : $Builtin.Int64, %69 : $Builtin.Int64, %70 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %74, %72
  %72 = tuple_extract %71 : $(Builtin.Int64, Builtin.Int1), 1 // user: %73
  cond_fail %72 : $Builtin.Int1, "arithmetic overflow" // id: %73
  %74 = tuple_extract %71 : $(Builtin.Int64, Builtin.Int1), 0 // user: %86
  %75 = alloc_stack $UInt8                        // users: %85, %77, %76
  store %68 to %75 : $*UInt8                      // id: %76
  %77 = address_to_pointer [stack_protection] %75 : $*UInt8 to $Builtin.RawPointer // user: %84
  %78 = builtin "truncOrBitCast_Int64_Word"(%56 : $Builtin.Int64) : $Builtin.Word // user: %79
  %79 = index_raw_pointer %42 : $Builtin.RawPointer, %78 : $Builtin.Word // user: %84
  %80 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %81
  %81 = builtin "sextOrBitCast_Word_Int64"(%80 : $Builtin.Word) : $Builtin.Int64 // users: %84, %82
  %82 = builtin "cmp_slt_Int64"(%81 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %83
  cond_fail %82 : $Builtin.Int1, "Negative value is not representable" // id: %83
  %84 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%79 : $Builtin.RawPointer, %77 : $Builtin.RawPointer, %81 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %75 : $*UInt8                     // id: %85
  br bb8(%74 : $Builtin.Int64)                    // id: %86

bb10:                                             // Preds: bb8
  strong_release %7 : $__ContiguousArrayStorageBase // id: %87
  br bb7                                          // id: %88
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5997, stage HighLevel,Function+EarlyLoopOpt, pass 39: DCE (dce)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy **, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // users: %59, %68, %66, %64, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %87, %52, %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %53, %82, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %84, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %79, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb7                                          // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb7                                          // id: %51

bb6:                                              // Preds: bb3
  strong_retain %7 : $__ContiguousArrayStorageBase // id: %52
  br bb8(%26 : $Builtin.Int64)                    // id: %53

bb7:                                              // Preds: bb4 bb10 bb5
  %54 = tuple ()                                  // user: %55
  return %54 : $()                                // id: %55

// %56                                            // users: %71, %57, %61, %78
bb8(%56 : $Builtin.Int64):                        // Preds: bb6 bb9
  %57 = struct $Int (%56 : $Builtin.Int64)        // users: %66, %68
  // function_ref specialized Array._getCount()
  %58 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %59
  %59 = apply %58(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %60
  %60 = struct_extract %59 : $Int, #Int._value    // user: %61
  %61 = builtin "cmp_eq_Int64"(%56 : $Builtin.Int64, %60 : $Builtin.Int64) : $Builtin.Int1 // user: %62
  cond_br %61, bb10, bb9                          // id: %62

bb9:                                              // Preds: bb8
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %63 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %64
  %64 = apply %63(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %68, %66
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %65 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %66
  %66 = apply %65(%57, %64, %0) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %68
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %67 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %68
  %68 = apply %67(%57, %64, %66, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %76
  %69 = integer_literal $Builtin.Int64, 1         // user: %71
  %70 = integer_literal $Builtin.Int1, -1         // user: %71
  %71 = builtin "sadd_with_overflow_Int64"(%56 : $Builtin.Int64, %69 : $Builtin.Int64, %70 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %74, %72
  %72 = tuple_extract %71 : $(Builtin.Int64, Builtin.Int1), 1 // user: %73
  cond_fail %72 : $Builtin.Int1, "arithmetic overflow" // id: %73
  %74 = tuple_extract %71 : $(Builtin.Int64, Builtin.Int1), 0 // user: %86
  %75 = alloc_stack $UInt8                        // users: %85, %77, %76
  store %68 to %75 : $*UInt8                      // id: %76
  %77 = address_to_pointer [stack_protection] %75 : $*UInt8 to $Builtin.RawPointer // user: %84
  %78 = builtin "truncOrBitCast_Int64_Word"(%56 : $Builtin.Int64) : $Builtin.Word // user: %79
  %79 = index_raw_pointer %42 : $Builtin.RawPointer, %78 : $Builtin.Word // user: %84
  %80 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %81
  %81 = builtin "sextOrBitCast_Word_Int64"(%80 : $Builtin.Word) : $Builtin.Int64 // users: %84, %82
  %82 = builtin "cmp_slt_Int64"(%81 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %83
  cond_fail %82 : $Builtin.Int1, "Negative value is not representable" // id: %83
  %84 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%79 : $Builtin.RawPointer, %77 : $Builtin.RawPointer, %81 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %75 : $*UInt8                     // id: %85
  br bb8(%74 : $Builtin.Int64)                    // id: %86

bb10:                                             // Preds: bb8
  strong_release %7 : $__ContiguousArrayStorageBase // id: %87
  br bb7                                          // id: %88
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #5999, stage HighLevel,Function+EarlyLoopOpt, pass 41: ReleaseHoisting (release-hoisting)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy **, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // users: %87, %59, %68, %66, %64, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %52, %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %53, %82, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %84, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %79, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb7                                          // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb7                                          // id: %51

bb6:                                              // Preds: bb3
  strong_retain %7 : $__ContiguousArrayStorageBase // id: %52
  br bb8(%26 : $Builtin.Int64)                    // id: %53

bb7:                                              // Preds: bb4 bb10 bb5
  %54 = tuple ()                                  // user: %55
  return %54 : $()                                // id: %55

// %56                                            // users: %71, %57, %61, %78
bb8(%56 : $Builtin.Int64):                        // Preds: bb6 bb9
  %57 = struct $Int (%56 : $Builtin.Int64)        // users: %66, %68
  // function_ref specialized Array._getCount()
  %58 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %59
  %59 = apply %58(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %60
  %60 = struct_extract %59 : $Int, #Int._value    // user: %61
  %61 = builtin "cmp_eq_Int64"(%56 : $Builtin.Int64, %60 : $Builtin.Int64) : $Builtin.Int1 // user: %62
  cond_br %61, bb10, bb9                          // id: %62

bb9:                                              // Preds: bb8
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %63 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %64
  %64 = apply %63(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %68, %66
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %65 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %66
  %66 = apply %65(%57, %64, %0) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %68
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %67 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %68
  %68 = apply %67(%57, %64, %66, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %76
  %69 = integer_literal $Builtin.Int64, 1         // user: %71
  %70 = integer_literal $Builtin.Int1, -1         // user: %71
  %71 = builtin "sadd_with_overflow_Int64"(%56 : $Builtin.Int64, %69 : $Builtin.Int64, %70 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %74, %72
  %72 = tuple_extract %71 : $(Builtin.Int64, Builtin.Int1), 1 // user: %73
  cond_fail %72 : $Builtin.Int1, "arithmetic overflow" // id: %73
  %74 = tuple_extract %71 : $(Builtin.Int64, Builtin.Int1), 0 // user: %86
  %75 = alloc_stack $UInt8                        // users: %85, %77, %76
  store %68 to %75 : $*UInt8                      // id: %76
  %77 = address_to_pointer [stack_protection] %75 : $*UInt8 to $Builtin.RawPointer // user: %84
  %78 = builtin "truncOrBitCast_Int64_Word"(%56 : $Builtin.Int64) : $Builtin.Word // user: %79
  %79 = index_raw_pointer %42 : $Builtin.RawPointer, %78 : $Builtin.Word // user: %84
  %80 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %81
  %81 = builtin "sextOrBitCast_Word_Int64"(%80 : $Builtin.Word) : $Builtin.Int64 // users: %84, %82
  %82 = builtin "cmp_slt_Int64"(%81 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %83
  cond_fail %82 : $Builtin.Int1, "Negative value is not representable" // id: %83
  %84 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%79 : $Builtin.RawPointer, %77 : $Builtin.RawPointer, %81 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %75 : $*UInt8                     // id: %85
  br bb8(%74 : $Builtin.Int64)                    // id: %86

bb10:                                             // Preds: bb8
  release_value %0 : $Array<UInt8>                // id: %87
  br bb7                                          // id: %88
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #6004, stage HighLevel,Function+EarlyLoopOpt, pass 46: RetainSinking (retain-sinking)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy **, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // users: %86, %87, %58, %67, %65, %63, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %52, %81, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %83, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %78, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb7                                          // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb7                                          // id: %51

bb6:                                              // Preds: bb3
  br bb8(%26 : $Builtin.Int64)                    // id: %52

bb7:                                              // Preds: bb4 bb10 bb5
  %53 = tuple ()                                  // user: %54
  return %53 : $()                                // id: %54

// %55                                            // users: %70, %56, %60, %77
bb8(%55 : $Builtin.Int64):                        // Preds: bb6 bb9
  %56 = struct $Int (%55 : $Builtin.Int64)        // users: %65, %67
  // function_ref specialized Array._getCount()
  %57 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %58
  %58 = apply %57(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %59
  %59 = struct_extract %58 : $Int, #Int._value    // user: %60
  %60 = builtin "cmp_eq_Int64"(%55 : $Builtin.Int64, %59 : $Builtin.Int64) : $Builtin.Int1 // user: %61
  cond_br %60, bb10, bb9                          // id: %61

bb9:                                              // Preds: bb8
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %62 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %63
  %63 = apply %62(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %67, %65
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %64 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %65
  %65 = apply %64(%56, %63, %0) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %67
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %66 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %67
  %67 = apply %66(%56, %63, %65, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %75
  %68 = integer_literal $Builtin.Int64, 1         // user: %70
  %69 = integer_literal $Builtin.Int1, -1         // user: %70
  %70 = builtin "sadd_with_overflow_Int64"(%55 : $Builtin.Int64, %68 : $Builtin.Int64, %69 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %73, %71
  %71 = tuple_extract %70 : $(Builtin.Int64, Builtin.Int1), 1 // user: %72
  cond_fail %71 : $Builtin.Int1, "arithmetic overflow" // id: %72
  %73 = tuple_extract %70 : $(Builtin.Int64, Builtin.Int1), 0 // user: %85
  %74 = alloc_stack $UInt8                        // users: %84, %76, %75
  store %67 to %74 : $*UInt8                      // id: %75
  %76 = address_to_pointer [stack_protection] %74 : $*UInt8 to $Builtin.RawPointer // user: %83
  %77 = builtin "truncOrBitCast_Int64_Word"(%55 : $Builtin.Int64) : $Builtin.Word // user: %78
  %78 = index_raw_pointer %42 : $Builtin.RawPointer, %77 : $Builtin.Word // user: %83
  %79 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %80
  %80 = builtin "sextOrBitCast_Word_Int64"(%79 : $Builtin.Word) : $Builtin.Int64 // users: %83, %81
  %81 = builtin "cmp_slt_Int64"(%80 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %82
  cond_fail %81 : $Builtin.Int1, "Negative value is not representable" // id: %82
  %83 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%78 : $Builtin.RawPointer, %76 : $Builtin.RawPointer, %80 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %74 : $*UInt8                     // id: %84
  br bb8(%73 : $Builtin.Int64)                    // id: %85

bb10:                                             // Preds: bb8
  retain_value %0 : $Array<UInt8>                 // id: %86
  release_value %0 : $Array<UInt8>                // id: %87
  br bb7                                          // id: %88
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #6006, stage HighLevel,Function+EarlyLoopOpt, pass 48: ReleaseHoisting (release-hoisting)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy **, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // users: %58, %67, %65, %63, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %52, %81, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %83, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %78, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb7                                          // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb7                                          // id: %51

bb6:                                              // Preds: bb3
  br bb8(%26 : $Builtin.Int64)                    // id: %52

bb7:                                              // Preds: bb4 bb10 bb5
  %53 = tuple ()                                  // user: %54
  return %53 : $()                                // id: %54

// %55                                            // users: %70, %56, %60, %77
bb8(%55 : $Builtin.Int64):                        // Preds: bb6 bb9
  %56 = struct $Int (%55 : $Builtin.Int64)        // users: %65, %67
  // function_ref specialized Array._getCount()
  %57 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %58
  %58 = apply %57(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %59
  %59 = struct_extract %58 : $Int, #Int._value    // user: %60
  %60 = builtin "cmp_eq_Int64"(%55 : $Builtin.Int64, %59 : $Builtin.Int64) : $Builtin.Int1 // user: %61
  cond_br %60, bb10, bb9                          // id: %61

bb9:                                              // Preds: bb8
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %62 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %63
  %63 = apply %62(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %67, %65
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %64 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %65
  %65 = apply %64(%56, %63, %0) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %67
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %66 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %67
  %67 = apply %66(%56, %63, %65, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %75
  %68 = integer_literal $Builtin.Int64, 1         // user: %70
  %69 = integer_literal $Builtin.Int1, -1         // user: %70
  %70 = builtin "sadd_with_overflow_Int64"(%55 : $Builtin.Int64, %68 : $Builtin.Int64, %69 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %73, %71
  %71 = tuple_extract %70 : $(Builtin.Int64, Builtin.Int1), 1 // user: %72
  cond_fail %71 : $Builtin.Int1, "arithmetic overflow" // id: %72
  %73 = tuple_extract %70 : $(Builtin.Int64, Builtin.Int1), 0 // user: %85
  %74 = alloc_stack $UInt8                        // users: %84, %76, %75
  store %67 to %74 : $*UInt8                      // id: %75
  %76 = address_to_pointer [stack_protection] %74 : $*UInt8 to $Builtin.RawPointer // user: %83
  %77 = builtin "truncOrBitCast_Int64_Word"(%55 : $Builtin.Int64) : $Builtin.Word // user: %78
  %78 = index_raw_pointer %42 : $Builtin.RawPointer, %77 : $Builtin.Word // user: %83
  %79 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %80
  %80 = builtin "sextOrBitCast_Word_Int64"(%79 : $Builtin.Word) : $Builtin.Int64 // users: %83, %81
  %81 = builtin "cmp_slt_Int64"(%80 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %82
  cond_fail %81 : $Builtin.Int1, "Negative value is not representable" // id: %82
  %83 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%78 : $Builtin.RawPointer, %76 : $Builtin.RawPointer, %80 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %74 : $*UInt8                     // id: %84
  br bb8(%73 : $Builtin.Int64)                    // id: %85

bb10:                                             // Preds: bb8
  br bb7                                          // id: %86
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #6012, stage HighLevel,Function+EarlyLoopOpt, pass 54: DCE (dce)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy **, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // users: %58, %67, %65, %63, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %52, %81, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %83, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %78, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb7                                          // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb7                                          // id: %51

bb6:                                              // Preds: bb3
  br bb8(%26 : $Builtin.Int64)                    // id: %52

bb7:                                              // Preds: bb4 bb10 bb5
  %53 = tuple ()                                  // user: %54
  return %53 : $()                                // id: %54

// %55                                            // users: %70, %56, %60, %77
bb8(%55 : $Builtin.Int64):                        // Preds: bb6 bb9
  %56 = struct $Int (%55 : $Builtin.Int64)        // users: %65, %67
  // function_ref specialized Array._getCount()
  %57 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %58
  %58 = apply %57(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %59
  %59 = struct_extract %58 : $Int, #Int._value    // user: %60
  %60 = builtin "cmp_eq_Int64"(%55 : $Builtin.Int64, %59 : $Builtin.Int64) : $Builtin.Int1 // user: %61
  cond_br %60, bb10, bb9                          // id: %61

bb9:                                              // Preds: bb8
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %62 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %63
  %63 = apply %62(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %67, %65
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %64 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %65
  %65 = apply %64(%56, %63, %0) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %67
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %66 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %67
  %67 = apply %66(%56, %63, %65, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %75
  %68 = integer_literal $Builtin.Int64, 1         // user: %70
  %69 = integer_literal $Builtin.Int1, -1         // user: %70
  %70 = builtin "sadd_with_overflow_Int64"(%55 : $Builtin.Int64, %68 : $Builtin.Int64, %69 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %73, %71
  %71 = tuple_extract %70 : $(Builtin.Int64, Builtin.Int1), 1 // user: %72
  cond_fail %71 : $Builtin.Int1, "arithmetic overflow" // id: %72
  %73 = tuple_extract %70 : $(Builtin.Int64, Builtin.Int1), 0 // user: %85
  %74 = alloc_stack $UInt8                        // users: %84, %76, %75
  store %67 to %74 : $*UInt8                      // id: %75
  %76 = address_to_pointer [stack_protection] %74 : $*UInt8 to $Builtin.RawPointer // user: %83
  %77 = builtin "truncOrBitCast_Int64_Word"(%55 : $Builtin.Int64) : $Builtin.Word // user: %78
  %78 = index_raw_pointer %42 : $Builtin.RawPointer, %77 : $Builtin.Word // user: %83
  %79 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %80
  %80 = builtin "sextOrBitCast_Word_Int64"(%79 : $Builtin.Word) : $Builtin.Int64 // users: %83, %81
  %81 = builtin "cmp_slt_Int64"(%80 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %82
  cond_fail %81 : $Builtin.Int1, "Negative value is not representable" // id: %82
  %83 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%78 : $Builtin.RawPointer, %76 : $Builtin.RawPointer, %80 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %74 : $*UInt8                     // id: %84
  br bb8(%73 : $Builtin.Int64)                    // id: %85

bb10:                                             // Preds: bb8
  br bb7                                          // id: %86
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #6016, stage HighLevel,Function+EarlyLoopOpt, pass 60: LoopRotate (loop-rotate)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy **, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // users: %54, %89, %70, %68, %66, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %58, %56, %53, %84, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %86, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %81, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb9                                          // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb9                                          // id: %51

bb6:                                              // Preds: bb3
  // function_ref specialized Array._getCount()
  %52 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // users: %54, %89
  %53 = struct $Int (%26 : $Builtin.Int64)        // user: %58
  %54 = apply %52(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %55
  %55 = struct_extract %54 : $Int, #Int._value    // user: %56
  %56 = builtin "cmp_eq_Int64"(%26 : $Builtin.Int64, %55 : $Builtin.Int64) : $Builtin.Int1 // user: %57
  cond_br %56, bb8, bb7                           // id: %57

bb7:                                              // Preds: bb6
  br bb10(%26 : $Builtin.Int64, %53 : $Int)       // id: %58

bb8:                                              // Preds: bb6
  br bb13                                         // id: %59

bb9:                                              // Preds: bb4 bb13 bb5
  %60 = tuple ()                                  // user: %61
  return %60 : $()                                // id: %61

// %62                                            // users: %64, %80, %73
bb10(%62 : $Builtin.Int64, %63 : $Int):           // Preds: bb11 bb7
  %64 = struct $Int (%62 : $Builtin.Int64)        // users: %68, %70
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %65 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %66
  %66 = apply %65(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %70, %68
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %67 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %68
  %68 = apply %67(%64, %66, %0) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %70
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %69 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %70
  %70 = apply %69(%64, %66, %68, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %78
  %71 = integer_literal $Builtin.Int64, 1         // user: %73
  %72 = integer_literal $Builtin.Int1, -1         // user: %73
  %73 = builtin "sadd_with_overflow_Int64"(%62 : $Builtin.Int64, %71 : $Builtin.Int64, %72 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %76, %74
  %74 = tuple_extract %73 : $(Builtin.Int64, Builtin.Int1), 1 // user: %75
  cond_fail %74 : $Builtin.Int1, "arithmetic overflow" // id: %75
  %76 = tuple_extract %73 : $(Builtin.Int64, Builtin.Int1), 0 // users: %93, %91, %88
  %77 = alloc_stack $UInt8                        // users: %87, %79, %78
  store %70 to %77 : $*UInt8                      // id: %78
  %79 = address_to_pointer [stack_protection] %77 : $*UInt8 to $Builtin.RawPointer // user: %86
  %80 = builtin "truncOrBitCast_Int64_Word"(%62 : $Builtin.Int64) : $Builtin.Word // user: %81
  %81 = index_raw_pointer %42 : $Builtin.RawPointer, %80 : $Builtin.Word // user: %86
  %82 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %83
  %83 = builtin "sextOrBitCast_Word_Int64"(%82 : $Builtin.Word) : $Builtin.Int64 // users: %86, %84
  %84 = builtin "cmp_slt_Int64"(%83 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %85
  cond_fail %84 : $Builtin.Int1, "Negative value is not representable" // id: %85
  %86 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%81 : $Builtin.RawPointer, %79 : $Builtin.RawPointer, %83 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %77 : $*UInt8                     // id: %87
  %88 = struct $Int (%76 : $Builtin.Int64)        // user: %93
  %89 = apply %52(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %90
  %90 = struct_extract %89 : $Int, #Int._value    // user: %91
  %91 = builtin "cmp_eq_Int64"(%76 : $Builtin.Int64, %90 : $Builtin.Int64) : $Builtin.Int1 // user: %92
  cond_br %91, bb12, bb11                         // id: %92

bb11:                                             // Preds: bb10
  br bb10(%76 : $Builtin.Int64, %88 : $Int)       // id: %93

bb12:                                             // Preds: bb10
  br bb13                                         // id: %94

bb13:                                             // Preds: bb12 bb8
  br bb9                                          // id: %95
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #6017, stage HighLevel,Function+EarlyLoopOpt, pass 61: DCE (dce)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy **, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // users: %53, %87, %69, %67, %65, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %57, %55, %83, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %85, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %80, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb9                                          // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb9                                          // id: %51

bb6:                                              // Preds: bb3
  // function_ref specialized Array._getCount()
  %52 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // users: %53, %87
  %53 = apply %52(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %54
  %54 = struct_extract %53 : $Int, #Int._value    // user: %55
  %55 = builtin "cmp_eq_Int64"(%26 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %56
  cond_br %55, bb8, bb7                           // id: %56

bb7:                                              // Preds: bb6
  br bb10(%26 : $Builtin.Int64, undef : $Int)     // id: %57

bb8:                                              // Preds: bb6
  br bb13                                         // id: %58

bb9:                                              // Preds: bb4 bb13 bb5
  %59 = tuple ()                                  // user: %60
  return %59 : $()                                // id: %60

// %61                                            // users: %63, %79, %72
bb10(%61 : $Builtin.Int64, %62 : $Int):           // Preds: bb11 bb7
  %63 = struct $Int (%61 : $Builtin.Int64)        // users: %67, %69
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %64 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %65
  %65 = apply %64(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %69, %67
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %66 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %67
  %67 = apply %66(%63, %65, %0) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %69
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %68 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %69
  %69 = apply %68(%63, %65, %67, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %77
  %70 = integer_literal $Builtin.Int64, 1         // user: %72
  %71 = integer_literal $Builtin.Int1, -1         // user: %72
  %72 = builtin "sadd_with_overflow_Int64"(%61 : $Builtin.Int64, %70 : $Builtin.Int64, %71 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %75, %73
  %73 = tuple_extract %72 : $(Builtin.Int64, Builtin.Int1), 1 // user: %74
  cond_fail %73 : $Builtin.Int1, "arithmetic overflow" // id: %74
  %75 = tuple_extract %72 : $(Builtin.Int64, Builtin.Int1), 0 // users: %91, %89
  %76 = alloc_stack $UInt8                        // users: %86, %78, %77
  store %69 to %76 : $*UInt8                      // id: %77
  %78 = address_to_pointer [stack_protection] %76 : $*UInt8 to $Builtin.RawPointer // user: %85
  %79 = builtin "truncOrBitCast_Int64_Word"(%61 : $Builtin.Int64) : $Builtin.Word // user: %80
  %80 = index_raw_pointer %42 : $Builtin.RawPointer, %79 : $Builtin.Word // user: %85
  %81 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %82
  %82 = builtin "sextOrBitCast_Word_Int64"(%81 : $Builtin.Word) : $Builtin.Int64 // users: %85, %83
  %83 = builtin "cmp_slt_Int64"(%82 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %84
  cond_fail %83 : $Builtin.Int1, "Negative value is not representable" // id: %84
  %85 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%80 : $Builtin.RawPointer, %78 : $Builtin.RawPointer, %82 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %76 : $*UInt8                     // id: %86
  %87 = apply %52(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %88
  %88 = struct_extract %87 : $Int, #Int._value    // user: %89
  %89 = builtin "cmp_eq_Int64"(%75 : $Builtin.Int64, %88 : $Builtin.Int64) : $Builtin.Int1 // user: %90
  cond_br %89, bb12, bb11                         // id: %90

bb11:                                             // Preds: bb10
  br bb10(%75 : $Builtin.Int64, undef : $Int)     // id: %91

bb12:                                             // Preds: bb10
  br bb13                                         // id: %92

bb13:                                             // Preds: bb12 bb8
  br bb9                                          // id: %93
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #6018, stage HighLevel,Function+EarlyLoopOpt, pass 62: HighLevelCSE (high-level-cse)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy **, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // users: %53, %69, %67, %65, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %57, %55, %83, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %85, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %80, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb9                                          // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb9                                          // id: %51

bb6:                                              // Preds: bb3
  // function_ref specialized Array._getCount()
  %52 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %53
  %53 = apply %52(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %54
  %54 = struct_extract %53 : $Int, #Int._value    // users: %87, %55
  %55 = builtin "cmp_eq_Int64"(%26 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %56
  cond_br %55, bb8, bb7                           // id: %56

bb7:                                              // Preds: bb6
  br bb10(%26 : $Builtin.Int64, undef : $Int)     // id: %57

bb8:                                              // Preds: bb6
  br bb13                                         // id: %58

bb9:                                              // Preds: bb4 bb13 bb5
  %59 = tuple ()                                  // user: %60
  return %59 : $()                                // id: %60

// %61                                            // users: %63, %79, %72
bb10(%61 : $Builtin.Int64, %62 : $Int):           // Preds: bb11 bb7
  %63 = struct $Int (%61 : $Builtin.Int64)        // users: %67, %69
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %64 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %65
  %65 = apply %64(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %69, %67
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %66 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %67
  %67 = apply %66(%63, %65, %0) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %69
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %68 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %69
  %69 = apply %68(%63, %65, %67, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %77
  %70 = integer_literal $Builtin.Int64, 1         // user: %72
  %71 = integer_literal $Builtin.Int1, -1         // user: %72
  %72 = builtin "sadd_with_overflow_Int64"(%61 : $Builtin.Int64, %70 : $Builtin.Int64, %71 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %75, %73
  %73 = tuple_extract %72 : $(Builtin.Int64, Builtin.Int1), 1 // user: %74
  cond_fail %73 : $Builtin.Int1, "arithmetic overflow" // id: %74
  %75 = tuple_extract %72 : $(Builtin.Int64, Builtin.Int1), 0 // users: %89, %87
  %76 = alloc_stack $UInt8                        // users: %86, %78, %77
  store %69 to %76 : $*UInt8                      // id: %77
  %78 = address_to_pointer [stack_protection] %76 : $*UInt8 to $Builtin.RawPointer // user: %85
  %79 = builtin "truncOrBitCast_Int64_Word"(%61 : $Builtin.Int64) : $Builtin.Word // user: %80
  %80 = index_raw_pointer %42 : $Builtin.RawPointer, %79 : $Builtin.Word // user: %85
  %81 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %82
  %82 = builtin "sextOrBitCast_Word_Int64"(%81 : $Builtin.Word) : $Builtin.Int64 // users: %85, %83
  %83 = builtin "cmp_slt_Int64"(%82 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %84
  cond_fail %83 : $Builtin.Int1, "Negative value is not representable" // id: %84
  %85 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%80 : $Builtin.RawPointer, %78 : $Builtin.RawPointer, %82 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %76 : $*UInt8                     // id: %86
  %87 = builtin "cmp_eq_Int64"(%75 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %88
  cond_br %87, bb12, bb11                         // id: %88

bb11:                                             // Preds: bb10
  br bb10(%75 : $Builtin.Int64, undef : $Int)     // id: %89

bb12:                                             // Preds: bb10
  br bb13                                         // id: %90

bb13:                                             // Preds: bb12 bb8
  br bb9                                          // id: %91
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #6019, stage HighLevel,Function+EarlyLoopOpt, pass 63: SILCombine (sil-combine)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy **, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // users: %53, %69, %67, %65, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %55, %57, %83, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %85, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %80, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb9                                          // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb9                                          // id: %51

bb6:                                              // Preds: bb3
  // function_ref specialized Array._getCount()
  %52 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %53
  %53 = apply %52(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %54
  %54 = struct_extract %53 : $Int, #Int._value    // users: %55, %87
  %55 = builtin "cmp_eq_Int64"(%54 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %56
  cond_br %55, bb8, bb7                           // id: %56

bb7:                                              // Preds: bb6
  br bb10(%26 : $Builtin.Int64, undef : $Int)     // id: %57

bb8:                                              // Preds: bb6
  br bb13                                         // id: %58

bb9:                                              // Preds: bb4 bb13 bb5
  %59 = tuple ()                                  // user: %60
  return %59 : $()                                // id: %60

// %61                                            // users: %63, %79, %72
bb10(%61 : $Builtin.Int64, %62 : $Int):           // Preds: bb11 bb7
  %63 = struct $Int (%61 : $Builtin.Int64)        // users: %67, %69
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %64 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %65
  %65 = apply %64(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %69, %67
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %66 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %67
  %67 = apply %66(%63, %65, %0) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %69
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %68 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %69
  %69 = apply %68(%63, %65, %67, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %77
  %70 = integer_literal $Builtin.Int64, 1         // user: %72
  %71 = integer_literal $Builtin.Int1, -1         // user: %72
  %72 = builtin "sadd_with_overflow_Int64"(%61 : $Builtin.Int64, %70 : $Builtin.Int64, %71 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %75, %73
  %73 = tuple_extract %72 : $(Builtin.Int64, Builtin.Int1), 1 // user: %74
  cond_fail %73 : $Builtin.Int1, "arithmetic overflow" // id: %74
  %75 = tuple_extract %72 : $(Builtin.Int64, Builtin.Int1), 0 // users: %89, %87
  %76 = alloc_stack $UInt8                        // users: %86, %78, %77
  store %69 to %76 : $*UInt8                      // id: %77
  %78 = address_to_pointer [stack_protection] %76 : $*UInt8 to $Builtin.RawPointer // user: %85
  %79 = builtin "truncOrBitCast_Int64_Word"(%61 : $Builtin.Int64) : $Builtin.Word // user: %80
  %80 = index_raw_pointer %42 : $Builtin.RawPointer, %79 : $Builtin.Word // user: %85
  %81 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %82
  %82 = builtin "sextOrBitCast_Word_Int64"(%81 : $Builtin.Word) : $Builtin.Int64 // users: %85, %83
  %83 = builtin "cmp_slt_Int64"(%82 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %84
  cond_fail %83 : $Builtin.Int1, "Negative value is not representable" // id: %84
  %85 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%80 : $Builtin.RawPointer, %78 : $Builtin.RawPointer, %82 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %76 : $*UInt8                     // id: %86
  %87 = builtin "cmp_eq_Int64"(%75 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %88
  cond_br %87, bb12, bb11                         // id: %88

bb11:                                             // Preds: bb10
  br bb10(%75 : $Builtin.Int64, undef : $Int)     // id: %89

bb12:                                             // Preds: bb10
  br bb13                                         // id: %90

bb13:                                             // Preds: bb12 bb8
  br bb9                                          // id: %91
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #6020, stage HighLevel,Function+EarlyLoopOpt, pass 64: SimplifyCFG (simplify-cfg)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy **, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // users: %53, %67, %65, %63, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %57, %55, %81, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %83, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %78, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb8                                          // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb8                                          // id: %51

bb6:                                              // Preds: bb3
  // function_ref specialized Array._getCount()
  %52 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %53
  %53 = apply %52(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %54
  %54 = struct_extract %53 : $Int, #Int._value    // users: %55, %85
  %55 = builtin "cmp_eq_Int64"(%54 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %56
  cond_br %55, bb12, bb7                          // id: %56

bb7:                                              // Preds: bb6
  br bb9(%26 : $Builtin.Int64)                    // id: %57

bb8:                                              // Preds: bb11 bb4 bb12 bb5
  %58 = tuple ()                                  // user: %59
  return %58 : $()                                // id: %59

// %60                                            // users: %61, %77, %70
bb9(%60 : $Builtin.Int64):                        // Preds: bb7 bb10
  %61 = struct $Int (%60 : $Builtin.Int64)        // users: %65, %67
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %62 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %63
  %63 = apply %62(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %67, %65
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %64 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %65
  %65 = apply %64(%61, %63, %0) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %67
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %66 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %67
  %67 = apply %66(%61, %63, %65, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %75
  %68 = integer_literal $Builtin.Int64, 1         // user: %70
  %69 = integer_literal $Builtin.Int1, -1         // user: %70
  %70 = builtin "sadd_with_overflow_Int64"(%60 : $Builtin.Int64, %68 : $Builtin.Int64, %69 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %73, %71
  %71 = tuple_extract %70 : $(Builtin.Int64, Builtin.Int1), 1 // user: %72
  cond_fail %71 : $Builtin.Int1, "arithmetic overflow" // id: %72
  %73 = tuple_extract %70 : $(Builtin.Int64, Builtin.Int1), 0 // users: %87, %85
  %74 = alloc_stack $UInt8                        // users: %84, %76, %75
  store %67 to %74 : $*UInt8                      // id: %75
  %76 = address_to_pointer [stack_protection] %74 : $*UInt8 to $Builtin.RawPointer // user: %83
  %77 = builtin "truncOrBitCast_Int64_Word"(%60 : $Builtin.Int64) : $Builtin.Word // user: %78
  %78 = index_raw_pointer %42 : $Builtin.RawPointer, %77 : $Builtin.Word // user: %83
  %79 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %80
  %80 = builtin "sextOrBitCast_Word_Int64"(%79 : $Builtin.Word) : $Builtin.Int64 // users: %83, %81
  %81 = builtin "cmp_slt_Int64"(%80 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %82
  cond_fail %81 : $Builtin.Int1, "Negative value is not representable" // id: %82
  %83 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%78 : $Builtin.RawPointer, %76 : $Builtin.RawPointer, %80 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %74 : $*UInt8                     // id: %84
  %85 = builtin "cmp_eq_Int64"(%73 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %86
  cond_br %85, bb11, bb10                         // id: %86

bb10:                                             // Preds: bb9
  br bb9(%73 : $Builtin.Int64)                    // id: %87

bb11:                                             // Preds: bb9
  br bb8                                          // id: %88

bb12:                                             // Preds: bb6
  br bb8                                          // id: %89
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #6023, stage HighLevel,Function+EarlyLoopOpt, pass 67: HighLevelLICM (high-level-licm)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy **, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // users: %53, %73, %72, %71, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %66, %55, %64, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %83, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %82, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb8                                          // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb8                                          // id: %51

bb6:                                              // Preds: bb3
  // function_ref specialized Array._getCount()
  %52 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %53
  %53 = apply %52(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %54
  %54 = struct_extract %53 : $Int, #Int._value    // users: %55, %85
  %55 = builtin "cmp_eq_Int64"(%54 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %56
  cond_br %55, bb12, bb7                          // id: %56

bb7:                                              // Preds: bb6
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %57 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %71
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %58 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %72
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %59 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %73
  %60 = integer_literal $Builtin.Int64, 1         // user: %74
  %61 = integer_literal $Builtin.Int1, -1         // user: %74
  %62 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %63
  %63 = builtin "sextOrBitCast_Word_Int64"(%62 : $Builtin.Word) : $Builtin.Int64 // users: %83, %64
  %64 = builtin "cmp_slt_Int64"(%63 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %65
  cond_fail %64 : $Builtin.Int1, "Negative value is not representable" // id: %65
  br bb9(%26 : $Builtin.Int64)                    // id: %66

bb8:                                              // Preds: bb11 bb4 bb12 bb5
  %67 = tuple ()                                  // user: %68
  return %67 : $()                                // id: %68

// %69                                            // users: %70, %81, %74
bb9(%69 : $Builtin.Int64):                        // Preds: bb7 bb10
  %70 = struct $Int (%69 : $Builtin.Int64)        // users: %72, %73
  %71 = apply %57(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // users: %73, %72
  %72 = apply %58(%70, %71, %0) : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken // user: %73
  %73 = apply %59(%70, %71, %72, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %79
  %74 = builtin "sadd_with_overflow_Int64"(%69 : $Builtin.Int64, %60 : $Builtin.Int64, %61 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %77, %75
  %75 = tuple_extract %74 : $(Builtin.Int64, Builtin.Int1), 1 // user: %76
  cond_fail %75 : $Builtin.Int1, "arithmetic overflow" // id: %76
  %77 = tuple_extract %74 : $(Builtin.Int64, Builtin.Int1), 0 // users: %87, %85
  %78 = alloc_stack $UInt8                        // users: %84, %80, %79
  store %73 to %78 : $*UInt8                      // id: %79
  %80 = address_to_pointer [stack_protection] %78 : $*UInt8 to $Builtin.RawPointer // user: %83
  %81 = builtin "truncOrBitCast_Int64_Word"(%69 : $Builtin.Int64) : $Builtin.Word // user: %82
  %82 = index_raw_pointer %42 : $Builtin.RawPointer, %81 : $Builtin.Word // user: %83
  %83 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%82 : $Builtin.RawPointer, %80 : $Builtin.RawPointer, %63 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %78 : $*UInt8                     // id: %84
  %85 = builtin "cmp_eq_Int64"(%77 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %86
  cond_br %85, bb11, bb10                         // id: %86

bb10:                                             // Preds: bb9
  br bb9(%77 : $Builtin.Int64)                    // id: %87

bb11:                                             // Preds: bb9
  br bb8                                          // id: %88

bb12:                                             // Preds: bb6
  br bb8                                          // id: %89
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #6032, stage HighLevel,Function+EarlyLoopOpt, pass 78: ABCOpt (abcopts)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy **, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // users: %53, %75, %73, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %66, %68, %55, %64, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %84, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %83, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb8                                          // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb8                                          // id: %51

bb6:                                              // Preds: bb3
  // function_ref specialized Array._getCount()
  %52 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %53
  %53 = apply %52(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %54
  %54 = struct_extract %53 : $Int, #Int._value    // users: %66, %55, %86
  %55 = builtin "cmp_eq_Int64"(%54 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %56
  cond_br %55, bb12, bb7                          // id: %56

bb7:                                              // Preds: bb6
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %57 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %73
  // function_ref specialized Array._checkSubscript(_:wasNativeTypeChecked:)
  %58 = function_ref @$sSa15_checkSubscript_20wasNativeTypeCheckeds16_DependenceTokenVSi_SbtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, @guaranteed Array<UInt8>) -> _DependenceToken
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %59 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %75
  %60 = integer_literal $Builtin.Int64, 1         // user: %76
  %61 = integer_literal $Builtin.Int1, -1         // user: %76
  %62 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %63
  %63 = builtin "sextOrBitCast_Word_Int64"(%62 : $Builtin.Word) : $Builtin.Int64 // users: %84, %64
  %64 = builtin "cmp_slt_Int64"(%63 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %65
  cond_fail %64 : $Builtin.Int1, "Negative value is not representable" // id: %65
  %66 = builtin "cmp_sge_Int64"(%26 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %67
  cond_fail %66 : $Builtin.Int1, "loop induction variable overflowed" // id: %67
  br bb9(%26 : $Builtin.Int64)                    // id: %68

bb8:                                              // Preds: bb11 bb4 bb12 bb5
  %69 = tuple ()                                  // user: %70
  return %69 : $()                                // id: %70

// %71                                            // users: %72, %82, %76
bb9(%71 : $Builtin.Int64):                        // Preds: bb7 bb10
  %72 = struct $Int (%71 : $Builtin.Int64)        // user: %75
  %73 = apply %57(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %75
  %74 = struct $_DependenceToken ()               // user: %75
  %75 = apply %59(%72, %73, %74, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %80
  %76 = builtin "sadd_with_overflow_Int64"(%71 : $Builtin.Int64, %60 : $Builtin.Int64, %61 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %78, %77
  %77 = tuple_extract %76 : $(Builtin.Int64, Builtin.Int1), 1
  %78 = tuple_extract %76 : $(Builtin.Int64, Builtin.Int1), 0 // users: %88, %86
  %79 = alloc_stack $UInt8                        // users: %85, %81, %80
  store %75 to %79 : $*UInt8                      // id: %80
  %81 = address_to_pointer [stack_protection] %79 : $*UInt8 to $Builtin.RawPointer // user: %84
  %82 = builtin "truncOrBitCast_Int64_Word"(%71 : $Builtin.Int64) : $Builtin.Word // user: %83
  %83 = index_raw_pointer %42 : $Builtin.RawPointer, %82 : $Builtin.Word // user: %84
  %84 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%83 : $Builtin.RawPointer, %81 : $Builtin.RawPointer, %63 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %79 : $*UInt8                     // id: %85
  %86 = builtin "cmp_eq_Int64"(%78 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %87
  cond_br %86, bb11, bb10                         // id: %87

bb10:                                             // Preds: bb9
  br bb9(%78 : $Builtin.Int64)                    // id: %88

bb11:                                             // Preds: bb9
  br bb8                                          // id: %89

bb12:                                             // Preds: bb6
  br bb8                                          // id: %90
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #6033, stage HighLevel,Function+EarlyLoopOpt, pass 79: DCE (dce)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy **, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // users: %53, %74, %72, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %65, %67, %55, %63, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %82, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %81, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb8                                          // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb8                                          // id: %51

bb6:                                              // Preds: bb3
  // function_ref specialized Array._getCount()
  %52 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %53
  %53 = apply %52(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %54
  %54 = struct_extract %53 : $Int, #Int._value    // users: %65, %55, %84
  %55 = builtin "cmp_eq_Int64"(%54 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %56
  cond_br %55, bb12, bb7                          // id: %56

bb7:                                              // Preds: bb6
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %57 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %72
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %58 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %74
  %59 = integer_literal $Builtin.Int64, 1         // user: %75
  %60 = integer_literal $Builtin.Int1, -1         // user: %75
  %61 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %62
  %62 = builtin "sextOrBitCast_Word_Int64"(%61 : $Builtin.Word) : $Builtin.Int64 // users: %82, %63
  %63 = builtin "cmp_slt_Int64"(%62 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %64
  cond_fail %63 : $Builtin.Int1, "Negative value is not representable" // id: %64
  %65 = builtin "cmp_sge_Int64"(%26 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %66
  cond_fail %65 : $Builtin.Int1, "loop induction variable overflowed" // id: %66
  br bb9(%26 : $Builtin.Int64)                    // id: %67

bb8:                                              // Preds: bb11 bb4 bb12 bb5
  %68 = tuple ()                                  // user: %69
  return %68 : $()                                // id: %69

// %70                                            // users: %71, %80, %75
bb9(%70 : $Builtin.Int64):                        // Preds: bb7 bb10
  %71 = struct $Int (%70 : $Builtin.Int64)        // user: %74
  %72 = apply %57(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %74
  %73 = struct $_DependenceToken ()               // user: %74
  %74 = apply %58(%71, %72, %73, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %78
  %75 = builtin "sadd_with_overflow_Int64"(%70 : $Builtin.Int64, %59 : $Builtin.Int64, %60 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %76
  %76 = tuple_extract %75 : $(Builtin.Int64, Builtin.Int1), 0 // users: %86, %84
  %77 = alloc_stack $UInt8                        // users: %83, %79, %78
  store %74 to %77 : $*UInt8                      // id: %78
  %79 = address_to_pointer [stack_protection] %77 : $*UInt8 to $Builtin.RawPointer // user: %82
  %80 = builtin "truncOrBitCast_Int64_Word"(%70 : $Builtin.Int64) : $Builtin.Word // user: %81
  %81 = index_raw_pointer %42 : $Builtin.RawPointer, %80 : $Builtin.Word // user: %82
  %82 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%81 : $Builtin.RawPointer, %79 : $Builtin.RawPointer, %62 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %77 : $*UInt8                     // id: %83
  %84 = builtin "cmp_eq_Int64"(%76 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %85
  cond_br %84, bb11, bb10                         // id: %85

bb10:                                             // Preds: bb9
  br bb9(%76 : $Builtin.Int64)                    // id: %86

bb11:                                             // Preds: bb9
  br bb8                                          // id: %87

bb12:                                             // Preds: bb6
  br bb8                                          // id: %88
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #6035, stage HighLevel,Function+EarlyLoopOpt, pass 81: DCE (dce)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy **, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // users: %53, %74, %72, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %65, %67, %55, %63, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %82, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %81, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb8                                          // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb8                                          // id: %51

bb6:                                              // Preds: bb3
  // function_ref specialized Array._getCount()
  %52 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %53
  %53 = apply %52(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %54
  %54 = struct_extract %53 : $Int, #Int._value    // users: %65, %55, %84
  %55 = builtin "cmp_eq_Int64"(%54 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %56
  cond_br %55, bb12, bb7                          // id: %56

bb7:                                              // Preds: bb6
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %57 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %72
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %58 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %74
  %59 = integer_literal $Builtin.Int64, 1         // user: %75
  %60 = integer_literal $Builtin.Int1, -1         // user: %75
  %61 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %62
  %62 = builtin "sextOrBitCast_Word_Int64"(%61 : $Builtin.Word) : $Builtin.Int64 // users: %82, %63
  %63 = builtin "cmp_slt_Int64"(%62 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %64
  cond_fail %63 : $Builtin.Int1, "Negative value is not representable" // id: %64
  %65 = builtin "cmp_sge_Int64"(%26 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %66
  cond_fail %65 : $Builtin.Int1, "loop induction variable overflowed" // id: %66
  br bb9(%26 : $Builtin.Int64)                    // id: %67

bb8:                                              // Preds: bb11 bb4 bb12 bb5
  %68 = tuple ()                                  // user: %69
  return %68 : $()                                // id: %69

// %70                                            // users: %71, %80, %75
bb9(%70 : $Builtin.Int64):                        // Preds: bb7 bb10
  %71 = struct $Int (%70 : $Builtin.Int64)        // user: %74
  %72 = apply %57(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %74
  %73 = struct $_DependenceToken ()               // user: %74
  %74 = apply %58(%71, %72, %73, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %78
  %75 = builtin "sadd_with_overflow_Int64"(%70 : $Builtin.Int64, %59 : $Builtin.Int64, %60 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %76
  %76 = tuple_extract %75 : $(Builtin.Int64, Builtin.Int1), 0 // users: %86, %84
  %77 = alloc_stack $UInt8                        // users: %83, %79, %78
  store %74 to %77 : $*UInt8                      // id: %78
  %79 = address_to_pointer [stack_protection] %77 : $*UInt8 to $Builtin.RawPointer // user: %82
  %80 = builtin "truncOrBitCast_Int64_Word"(%70 : $Builtin.Int64) : $Builtin.Word // user: %81
  %81 = index_raw_pointer %42 : $Builtin.RawPointer, %80 : $Builtin.Word // user: %82
  %82 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%81 : $Builtin.RawPointer, %79 : $Builtin.RawPointer, %62 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %77 : $*UInt8                     // id: %83
  %84 = builtin "cmp_eq_Int64"(%76 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %85
  cond_br %84, bb11, bb10                         // id: %85

bb10:                                             // Preds: bb9
  br bb9(%76 : $Builtin.Int64)                    // id: %86

bb11:                                             // Preds: bb9
  br bb8                                          // id: %87

bb12:                                             // Preds: bb6
  br bb8                                          // id: %88
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #6038, stage HighLevel,Function+EarlyLoopOpt, pass 84: ComputeEscapeEffects (compute-escape-effects)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy **, destroy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // users: %53, %74, %72, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %65, %67, %55, %63, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %82, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %81, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb8                                          // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb8                                          // id: %51

bb6:                                              // Preds: bb3
  // function_ref specialized Array._getCount()
  %52 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %53
  %53 = apply %52(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %54
  %54 = struct_extract %53 : $Int, #Int._value    // users: %65, %55, %84
  %55 = builtin "cmp_eq_Int64"(%54 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %56
  cond_br %55, bb12, bb7                          // id: %56

bb7:                                              // Preds: bb6
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %57 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %72
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %58 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %74
  %59 = integer_literal $Builtin.Int64, 1         // user: %75
  %60 = integer_literal $Builtin.Int1, -1         // user: %75
  %61 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %62
  %62 = builtin "sextOrBitCast_Word_Int64"(%61 : $Builtin.Word) : $Builtin.Int64 // users: %82, %63
  %63 = builtin "cmp_slt_Int64"(%62 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %64
  cond_fail %63 : $Builtin.Int1, "Negative value is not representable" // id: %64
  %65 = builtin "cmp_sge_Int64"(%26 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %66
  cond_fail %65 : $Builtin.Int1, "loop induction variable overflowed" // id: %66
  br bb9(%26 : $Builtin.Int64)                    // id: %67

bb8:                                              // Preds: bb11 bb4 bb12 bb5
  %68 = tuple ()                                  // user: %69
  return %68 : $()                                // id: %69

// %70                                            // users: %71, %80, %75
bb9(%70 : $Builtin.Int64):                        // Preds: bb7 bb10
  %71 = struct $Int (%70 : $Builtin.Int64)        // user: %74
  %72 = apply %57(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %74
  %73 = struct $_DependenceToken ()               // user: %74
  %74 = apply %58(%71, %72, %73, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %78
  %75 = builtin "sadd_with_overflow_Int64"(%70 : $Builtin.Int64, %59 : $Builtin.Int64, %60 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %76
  %76 = tuple_extract %75 : $(Builtin.Int64, Builtin.Int1), 0 // users: %86, %84
  %77 = alloc_stack $UInt8                        // users: %83, %79, %78
  store %74 to %77 : $*UInt8                      // id: %78
  %79 = address_to_pointer [stack_protection] %77 : $*UInt8 to $Builtin.RawPointer // user: %82
  %80 = builtin "truncOrBitCast_Int64_Word"(%70 : $Builtin.Int64) : $Builtin.Word // user: %81
  %81 = index_raw_pointer %42 : $Builtin.RawPointer, %80 : $Builtin.Word // user: %82
  %82 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%81 : $Builtin.RawPointer, %79 : $Builtin.RawPointer, %62 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %77 : $*UInt8                     // id: %83
  %84 = builtin "cmp_eq_Int64"(%76 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %85
  cond_br %84, bb11, bb10                         // id: %85

bb10:                                             // Preds: bb9
  br bb9(%76 : $Builtin.Int64)                    // id: %86

bb11:                                             // Preds: bb9
  br bb8                                          // id: %87

bb12:                                             // Preds: bb6
  br bb8                                          // id: %88
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #6039, stage HighLevel,Function+EarlyLoopOpt, pass 85: ComputeSideEffects (compute-side-effects)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy]
// %0                                             // users: %53, %74, %72, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %65, %67, %55, %63, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %82, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %81, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb8                                          // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb8                                          // id: %51

bb6:                                              // Preds: bb3
  // function_ref specialized Array._getCount()
  %52 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %53
  %53 = apply %52(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %54
  %54 = struct_extract %53 : $Int, #Int._value    // users: %65, %55, %84
  %55 = builtin "cmp_eq_Int64"(%54 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %56
  cond_br %55, bb12, bb7                          // id: %56

bb7:                                              // Preds: bb6
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %57 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %72
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %58 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %74
  %59 = integer_literal $Builtin.Int64, 1         // user: %75
  %60 = integer_literal $Builtin.Int1, -1         // user: %75
  %61 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %62
  %62 = builtin "sextOrBitCast_Word_Int64"(%61 : $Builtin.Word) : $Builtin.Int64 // users: %82, %63
  %63 = builtin "cmp_slt_Int64"(%62 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %64
  cond_fail %63 : $Builtin.Int1, "Negative value is not representable" // id: %64
  %65 = builtin "cmp_sge_Int64"(%26 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %66
  cond_fail %65 : $Builtin.Int1, "loop induction variable overflowed" // id: %66
  br bb9(%26 : $Builtin.Int64)                    // id: %67

bb8:                                              // Preds: bb11 bb4 bb12 bb5
  %68 = tuple ()                                  // user: %69
  return %68 : $()                                // id: %69

// %70                                            // users: %71, %80, %75
bb9(%70 : $Builtin.Int64):                        // Preds: bb7 bb10
  %71 = struct $Int (%70 : $Builtin.Int64)        // user: %74
  %72 = apply %57(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %74
  %73 = struct $_DependenceToken ()               // user: %74
  %74 = apply %58(%71, %72, %73, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %78
  %75 = builtin "sadd_with_overflow_Int64"(%70 : $Builtin.Int64, %59 : $Builtin.Int64, %60 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %76
  %76 = tuple_extract %75 : $(Builtin.Int64, Builtin.Int1), 0 // users: %86, %84
  %77 = alloc_stack $UInt8                        // users: %83, %79, %78
  store %74 to %77 : $*UInt8                      // id: %78
  %79 = address_to_pointer [stack_protection] %77 : $*UInt8 to $Builtin.RawPointer // user: %82
  %80 = builtin "truncOrBitCast_Int64_Word"(%70 : $Builtin.Int64) : $Builtin.Word // user: %81
  %81 = index_raw_pointer %42 : $Builtin.RawPointer, %80 : $Builtin.Word // user: %82
  %82 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%81 : $Builtin.RawPointer, %79 : $Builtin.RawPointer, %62 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %77 : $*UInt8                     // id: %83
  %84 = builtin "cmp_eq_Int64"(%76 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %85
  cond_br %84, bb11, bb10                         // id: %85

bb10:                                             // Preds: bb9
  br bb9(%76 : $Builtin.Int64)                    // id: %86

bb11:                                             // Preds: bb9
  br bb8                                          // id: %87

bb12:                                             // Preds: bb6
  br bb8                                          // id: %88
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #6101, stage HighLevel,Function+EarlyLoopOpt, pass 22: CopyPropagation (copy-propagation)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden [ossa] @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %4, %13, %1
bb0(%0 : @guaranteed $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = metatype $@thick DataWrapper.Type          // user: %6
  // function_ref specialized Array.count.getter
  %3 = function_ref @$sSa5countSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %4
  %4 = apply %3(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %6
  // function_ref DataWrapper.__allocating_init(count:)
  %5 = function_ref @$s4main11DataWrapperC5countACSi_tcfC : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper // user: %6
  %6 = apply %5(%4, %2) : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper // user: %7
  %7 = move_value [lexical] [var_decl] %6 : $DataWrapper // users: %11, %9, %10, %8
  debug_value %7 : $DataWrapper, let, name "data" // id: %8
  %9 = class_method %7 : $DataWrapper, #DataWrapper.bytes!getter : (DataWrapper) -> () -> UnsafeMutableRawBufferPointer, $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %10
  %10 = apply %9(%7) : $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %16
  destroy_value %7 : $DataWrapper                 // id: %11
  %12 = alloc_stack $Array<UInt8>                 // users: %19, %13
  %13 = store_borrow %0 to %12 : $*Array<UInt8>   // users: %15, %18
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %14 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %16
  %15 = load_borrow %13 : $*Array<UInt8>          // users: %16, %17
  %16 = apply %14(%15, %10) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  end_borrow %15 : $Array<UInt8>                  // id: %17
  end_borrow %13 : $*Array<UInt8>                 // id: %18
  dealloc_stack %12 : $*Array<UInt8>              // id: %19
  %20 = tuple ()                                  // user: %21
  return %20 : $()                                // id: %21
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #6103, stage HighLevel,Function+EarlyLoopOpt, pass 24: NonTransparentFunctionOwnershipModelEliminator (non-transparent-func-ownership-model-eliminator)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %12, %4, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = metatype $@thick DataWrapper.Type          // user: %6
  // function_ref specialized Array.count.getter
  %3 = function_ref @$sSa5countSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %4
  %4 = apply %3(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %6
  // function_ref DataWrapper.__allocating_init(count:)
  %5 = function_ref @$s4main11DataWrapperC5countACSi_tcfC : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper // user: %6
  %6 = apply %5(%4, %2) : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper // users: %10, %7, %9, %8
  debug_value %6 : $DataWrapper, let, name "data" // id: %7
  %8 = class_method %6 : $DataWrapper, #DataWrapper.bytes!getter : (DataWrapper) -> () -> UnsafeMutableRawBufferPointer, $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %9
  %9 = apply %8(%6) : $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %15
  strong_release %6 : $DataWrapper                // id: %10
  %11 = alloc_stack $Array<UInt8>                 // users: %14, %12, %16
  store %0 to %11 : $*Array<UInt8>                // id: %12
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %13 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %15
  %14 = load %11 : $*Array<UInt8>                 // user: %15
  %15 = apply %13(%14, %9) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  dealloc_stack %11 : $*Array<UInt8>              // id: %16
  %17 = tuple ()                                  // user: %18
  return %17 : $()                                // id: %18
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #6104, stage HighLevel,Function+EarlyLoopOpt, pass 25: EarlyPerfInliner (early-inline)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %51, %3, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  // function_ref specialized Array.count.getter
  %2 = function_ref @$sSa5countSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // users: %8, %5
  %4 = alloc_ref $DataWrapper                     // users: %7, %6
  debug_value %3 : $Int, let, name "count", argno 1 // id: %5
  debug_value %4 : $DataWrapper, let, name "self", argno 2, implicit // id: %6
  %7 = end_init_let_ref %4 : $DataWrapper         // users: %49, %46, %48, %47, %44
  %8 = struct_extract %3 : $Int, #Int._value      // users: %38, %27, %9
  %9 = builtin "truncOrBitCast_Int64_Word"(%8 : $Builtin.Int64) : $Builtin.Word // user: %11
  %10 = integer_literal $Builtin.Word, 0          // users: %25, %11
  %11 = builtin "allocRaw"(%9 : $Builtin.Word, %10 : $Builtin.Word) : $Builtin.RawPointer // users: %40, %12
  %12 = struct $UnsafeMutableRawPointer (%11 : $Builtin.RawPointer) // user: %13
  %13 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %12 : $UnsafeMutableRawPointer // user: %43
  %14 = integer_literal $Builtin.Int8, 2          // users: %33, %25, %20
  %15 = integer_literal $Builtin.Int32, 0         // user: %34
  %16 = integer_literal $Builtin.Int1, 0          // user: %28
  %17 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %19
  %18 = integer_literal $Builtin.Word, 24         // user: %20
  %19 = builtin "ptrtoint_Word"(%17 : $Builtin.RawPointer) : $Builtin.Word // user: %20
  %20 = struct $StaticString (%19 : $Builtin.Word, %18 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %21 = integer_literal $Builtin.Int64, 15505     // user: %22
  %22 = struct $UInt (%21 : $Builtin.Int64)       // user: %36
  %23 = string_literal utf8 ""                    // user: %24
  %24 = builtin "ptrtoint_Word"(%23 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %10 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %26 = integer_literal $Builtin.Int64, 0         // user: %27
  %27 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %28
  %28 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %16 : $Builtin.Int1) : $Builtin.Int1 // user: %29
  cond_br %28, bb1, bb2                           // id: %29

bb1:                                              // Preds: bb0
  %30 = string_literal utf8 "Fatal error"         // user: %32
  %31 = integer_literal $Builtin.Word, 11         // user: %33
  %32 = builtin "ptrtoint_Word"(%30 : $Builtin.RawPointer) : $Builtin.Word // user: %33
  %33 = struct $StaticString (%32 : $Builtin.Word, %31 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %34 = struct $UInt32 (%15 : $Builtin.Int32)     // user: %36
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %35 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %36
  %36 = apply %35(%33, %25, %20, %22, %34) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %37

bb2:                                              // Preds: bb0
  %38 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // user: %39
  %39 = builtin "truncOrBitCast_Int64_Word"(%38 : $Builtin.Int64) : $Builtin.Word // user: %40
  %40 = index_raw_pointer %11 : $Builtin.RawPointer, %39 : $Builtin.Word // user: %41
  %41 = struct $UnsafeMutableRawPointer (%40 : $Builtin.RawPointer) // user: %42
  %42 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %41 : $UnsafeMutableRawPointer // user: %43
  %43 = struct $UnsafeMutableRawBufferPointer (%13 : $Optional<UnsafeMutableRawPointer>, %42 : $Optional<UnsafeMutableRawPointer>) // user: %45
  %44 = ref_element_addr %7 : $DataWrapper, #DataWrapper.pointer // user: %45
  store %43 to %44 : $*UnsafeMutableRawBufferPointer // id: %45
  debug_value %7 : $DataWrapper, let, name "data" // id: %46
  %47 = class_method %7 : $DataWrapper, #DataWrapper.bytes!getter : (DataWrapper) -> () -> UnsafeMutableRawBufferPointer, $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %48
  %48 = apply %47(%7) : $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %54
  strong_release %7 : $DataWrapper                // id: %49
  %50 = alloc_stack $Array<UInt8>                 // users: %53, %51, %55
  store %0 to %50 : $*Array<UInt8>                // id: %51
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %52 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %54
  %53 = load %50 : $*Array<UInt8>                 // user: %54
  %54 = apply %52(%53, %48) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  dealloc_stack %50 : $*Array<UInt8>              // id: %55
  %56 = tuple ()                                  // user: %57
  return %56 : $()                                // id: %57
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #6114, stage HighLevel,Function+EarlyLoopOpt, pass 9: Mem2Reg (mem2reg)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %51, %3, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  // function_ref specialized Array.count.getter
  %2 = function_ref @$sSa5countSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // users: %8, %5
  %4 = alloc_ref $DataWrapper                     // users: %7, %6
  debug_value %3 : $Int, let, name "count", argno 1 // id: %5
  debug_value %4 : $DataWrapper, let, name "self", argno 2, implicit // id: %6
  %7 = end_init_let_ref %4 : $DataWrapper         // users: %49, %46, %48, %47, %44
  %8 = struct_extract %3 : $Int, #Int._value      // users: %38, %27, %9
  %9 = builtin "truncOrBitCast_Int64_Word"(%8 : $Builtin.Int64) : $Builtin.Word // user: %11
  %10 = integer_literal $Builtin.Word, 0          // users: %25, %11
  %11 = builtin "allocRaw"(%9 : $Builtin.Word, %10 : $Builtin.Word) : $Builtin.RawPointer // users: %40, %12
  %12 = struct $UnsafeMutableRawPointer (%11 : $Builtin.RawPointer) // user: %13
  %13 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %12 : $UnsafeMutableRawPointer // user: %43
  %14 = integer_literal $Builtin.Int8, 2          // users: %33, %25, %20
  %15 = integer_literal $Builtin.Int32, 0         // user: %34
  %16 = integer_literal $Builtin.Int1, 0          // user: %28
  %17 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %19
  %18 = integer_literal $Builtin.Word, 24         // user: %20
  %19 = builtin "ptrtoint_Word"(%17 : $Builtin.RawPointer) : $Builtin.Word // user: %20
  %20 = struct $StaticString (%19 : $Builtin.Word, %18 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %21 = integer_literal $Builtin.Int64, 15505     // user: %22
  %22 = struct $UInt (%21 : $Builtin.Int64)       // user: %36
  %23 = string_literal utf8 ""                    // user: %24
  %24 = builtin "ptrtoint_Word"(%23 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %10 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %26 = integer_literal $Builtin.Int64, 0         // user: %27
  %27 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %28
  %28 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %16 : $Builtin.Int1) : $Builtin.Int1 // user: %29
  cond_br %28, bb1, bb2                           // id: %29

bb1:                                              // Preds: bb0
  %30 = string_literal utf8 "Fatal error"         // user: %32
  %31 = integer_literal $Builtin.Word, 11         // user: %33
  %32 = builtin "ptrtoint_Word"(%30 : $Builtin.RawPointer) : $Builtin.Word // user: %33
  %33 = struct $StaticString (%32 : $Builtin.Word, %31 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %34 = struct $UInt32 (%15 : $Builtin.Int32)     // user: %36
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %35 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %36
  %36 = apply %35(%33, %25, %20, %22, %34) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %37

bb2:                                              // Preds: bb0
  %38 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // user: %39
  %39 = builtin "truncOrBitCast_Int64_Word"(%38 : $Builtin.Int64) : $Builtin.Word // user: %40
  %40 = index_raw_pointer %11 : $Builtin.RawPointer, %39 : $Builtin.Word // user: %41
  %41 = struct $UnsafeMutableRawPointer (%40 : $Builtin.RawPointer) // user: %42
  %42 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %41 : $UnsafeMutableRawPointer // user: %43
  %43 = struct $UnsafeMutableRawBufferPointer (%13 : $Optional<UnsafeMutableRawPointer>, %42 : $Optional<UnsafeMutableRawPointer>) // user: %45
  %44 = ref_element_addr %7 : $DataWrapper, #DataWrapper.pointer // user: %45
  store %43 to %44 : $*UnsafeMutableRawBufferPointer // id: %45
  debug_value %7 : $DataWrapper, let, name "data" // id: %46
  %47 = class_method %7 : $DataWrapper, #DataWrapper.bytes!getter : (DataWrapper) -> () -> UnsafeMutableRawBufferPointer, $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %48
  %48 = apply %47(%7) : $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %51
  strong_release %7 : $DataWrapper                // id: %49
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %50 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %51
  %51 = apply %50(%0, %48) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %52 = tuple ()                                  // user: %53
  return %52 : $()                                // id: %53
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #6121, stage HighLevel,Function+EarlyLoopOpt, pass 17: Devirtualizer (devirtualizer)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %51, %3, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  // function_ref specialized Array.count.getter
  %2 = function_ref @$sSa5countSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // users: %8, %5
  %4 = alloc_ref $DataWrapper                     // users: %7, %6
  debug_value %3 : $Int, let, name "count", argno 1 // id: %5
  debug_value %4 : $DataWrapper, let, name "self", argno 2, implicit // id: %6
  %7 = end_init_let_ref %4 : $DataWrapper         // users: %48, %49, %46, %44
  %8 = struct_extract %3 : $Int, #Int._value      // users: %38, %27, %9
  %9 = builtin "truncOrBitCast_Int64_Word"(%8 : $Builtin.Int64) : $Builtin.Word // user: %11
  %10 = integer_literal $Builtin.Word, 0          // users: %25, %11
  %11 = builtin "allocRaw"(%9 : $Builtin.Word, %10 : $Builtin.Word) : $Builtin.RawPointer // users: %40, %12
  %12 = struct $UnsafeMutableRawPointer (%11 : $Builtin.RawPointer) // user: %13
  %13 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %12 : $UnsafeMutableRawPointer // user: %43
  %14 = integer_literal $Builtin.Int8, 2          // users: %33, %25, %20
  %15 = integer_literal $Builtin.Int32, 0         // user: %34
  %16 = integer_literal $Builtin.Int1, 0          // user: %28
  %17 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %19
  %18 = integer_literal $Builtin.Word, 24         // user: %20
  %19 = builtin "ptrtoint_Word"(%17 : $Builtin.RawPointer) : $Builtin.Word // user: %20
  %20 = struct $StaticString (%19 : $Builtin.Word, %18 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %21 = integer_literal $Builtin.Int64, 15505     // user: %22
  %22 = struct $UInt (%21 : $Builtin.Int64)       // user: %36
  %23 = string_literal utf8 ""                    // user: %24
  %24 = builtin "ptrtoint_Word"(%23 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %10 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %26 = integer_literal $Builtin.Int64, 0         // user: %27
  %27 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %28
  %28 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %16 : $Builtin.Int1) : $Builtin.Int1 // user: %29
  cond_br %28, bb1, bb2                           // id: %29

bb1:                                              // Preds: bb0
  %30 = string_literal utf8 "Fatal error"         // user: %32
  %31 = integer_literal $Builtin.Word, 11         // user: %33
  %32 = builtin "ptrtoint_Word"(%30 : $Builtin.RawPointer) : $Builtin.Word // user: %33
  %33 = struct $StaticString (%32 : $Builtin.Word, %31 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %34 = struct $UInt32 (%15 : $Builtin.Int32)     // user: %36
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %35 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %36
  %36 = apply %35(%33, %25, %20, %22, %34) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %37

bb2:                                              // Preds: bb0
  %38 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // user: %39
  %39 = builtin "truncOrBitCast_Int64_Word"(%38 : $Builtin.Int64) : $Builtin.Word // user: %40
  %40 = index_raw_pointer %11 : $Builtin.RawPointer, %39 : $Builtin.Word // user: %41
  %41 = struct $UnsafeMutableRawPointer (%40 : $Builtin.RawPointer) // user: %42
  %42 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %41 : $UnsafeMutableRawPointer // user: %43
  %43 = struct $UnsafeMutableRawBufferPointer (%13 : $Optional<UnsafeMutableRawPointer>, %42 : $Optional<UnsafeMutableRawPointer>) // user: %45
  %44 = ref_element_addr %7 : $DataWrapper, #DataWrapper.pointer // user: %45
  store %43 to %44 : $*UnsafeMutableRawBufferPointer // id: %45
  debug_value %7 : $DataWrapper, let, name "data" // id: %46
  // function_ref DataWrapper.bytes.getter
  %47 = function_ref @$s4main11DataWrapperC5bytesSwvg : $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %48
  %48 = apply %47(%7) : $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %51
  strong_release %7 : $DataWrapper                // id: %49
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %50 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %51
  %51 = apply %50(%0, %48) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %52 = tuple ()                                  // user: %53
  return %52 : $()                                // id: %53
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #6127, stage HighLevel,Function+EarlyLoopOpt, pass 21: ComputeSideEffects (compute-side-effects)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %51, %3, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  // function_ref specialized Array.count.getter
  %2 = function_ref @$sSa5countSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // users: %8, %5
  %4 = alloc_ref $DataWrapper                     // users: %7, %6
  debug_value %3 : $Int, let, name "count", argno 1 // id: %5
  debug_value %4 : $DataWrapper, let, name "self", argno 2, implicit // id: %6
  %7 = end_init_let_ref %4 : $DataWrapper         // users: %48, %49, %46, %44
  %8 = struct_extract %3 : $Int, #Int._value      // users: %38, %27, %9
  %9 = builtin "truncOrBitCast_Int64_Word"(%8 : $Builtin.Int64) : $Builtin.Word // user: %11
  %10 = integer_literal $Builtin.Word, 0          // users: %25, %11
  %11 = builtin "allocRaw"(%9 : $Builtin.Word, %10 : $Builtin.Word) : $Builtin.RawPointer // users: %40, %12
  %12 = struct $UnsafeMutableRawPointer (%11 : $Builtin.RawPointer) // user: %13
  %13 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %12 : $UnsafeMutableRawPointer // user: %43
  %14 = integer_literal $Builtin.Int8, 2          // users: %33, %25, %20
  %15 = integer_literal $Builtin.Int32, 0         // user: %34
  %16 = integer_literal $Builtin.Int1, 0          // user: %28
  %17 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %19
  %18 = integer_literal $Builtin.Word, 24         // user: %20
  %19 = builtin "ptrtoint_Word"(%17 : $Builtin.RawPointer) : $Builtin.Word // user: %20
  %20 = struct $StaticString (%19 : $Builtin.Word, %18 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %21 = integer_literal $Builtin.Int64, 15505     // user: %22
  %22 = struct $UInt (%21 : $Builtin.Int64)       // user: %36
  %23 = string_literal utf8 ""                    // user: %24
  %24 = builtin "ptrtoint_Word"(%23 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %10 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %26 = integer_literal $Builtin.Int64, 0         // user: %27
  %27 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %28
  %28 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %16 : $Builtin.Int1) : $Builtin.Int1 // user: %29
  cond_br %28, bb1, bb2                           // id: %29

bb1:                                              // Preds: bb0
  %30 = string_literal utf8 "Fatal error"         // user: %32
  %31 = integer_literal $Builtin.Word, 11         // user: %33
  %32 = builtin "ptrtoint_Word"(%30 : $Builtin.RawPointer) : $Builtin.Word // user: %33
  %33 = struct $StaticString (%32 : $Builtin.Word, %31 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %34 = struct $UInt32 (%15 : $Builtin.Int32)     // user: %36
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %35 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %36
  %36 = apply %35(%33, %25, %20, %22, %34) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %37

bb2:                                              // Preds: bb0
  %38 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // user: %39
  %39 = builtin "truncOrBitCast_Int64_Word"(%38 : $Builtin.Int64) : $Builtin.Word // user: %40
  %40 = index_raw_pointer %11 : $Builtin.RawPointer, %39 : $Builtin.Word // user: %41
  %41 = struct $UnsafeMutableRawPointer (%40 : $Builtin.RawPointer) // user: %42
  %42 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %41 : $UnsafeMutableRawPointer // user: %43
  %43 = struct $UnsafeMutableRawBufferPointer (%13 : $Optional<UnsafeMutableRawPointer>, %42 : $Optional<UnsafeMutableRawPointer>) // user: %45
  %44 = ref_element_addr %7 : $DataWrapper, #DataWrapper.pointer // user: %45
  store %43 to %44 : $*UnsafeMutableRawBufferPointer // id: %45
  debug_value %7 : $DataWrapper, let, name "data" // id: %46
  // function_ref DataWrapper.bytes.getter
  %47 = function_ref @$s4main11DataWrapperC5bytesSwvg : $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %48
  %48 = apply %47(%7) : $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %51
  strong_release %7 : $DataWrapper                // id: %49
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %50 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %51
  %51 = apply %50(%0, %48) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %52 = tuple ()                                  // user: %53
  return %52 : $()                                // id: %53
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #6131, stage HighLevel,Function+EarlyLoopOpt, pass 25: EarlyPerfInliner (early-inline)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %52, %3, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  // function_ref specialized Array.count.getter
  %2 = function_ref @$sSa5countSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // users: %8, %5
  %4 = alloc_ref $DataWrapper                     // users: %7, %6
  debug_value %3 : $Int, let, name "count", argno 1 // id: %5
  debug_value %4 : $DataWrapper, let, name "self", argno 2, implicit // id: %6
  %7 = end_init_let_ref %4 : $DataWrapper         // users: %49, %48, %47, %50, %46, %44
  %8 = struct_extract %3 : $Int, #Int._value      // users: %38, %27, %9
  %9 = builtin "truncOrBitCast_Int64_Word"(%8 : $Builtin.Int64) : $Builtin.Word // user: %11
  %10 = integer_literal $Builtin.Word, 0          // users: %25, %11
  %11 = builtin "allocRaw"(%9 : $Builtin.Word, %10 : $Builtin.Word) : $Builtin.RawPointer // users: %40, %12
  %12 = struct $UnsafeMutableRawPointer (%11 : $Builtin.RawPointer) // user: %13
  %13 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %12 : $UnsafeMutableRawPointer // user: %43
  %14 = integer_literal $Builtin.Int8, 2          // users: %33, %25, %20
  %15 = integer_literal $Builtin.Int32, 0         // user: %34
  %16 = integer_literal $Builtin.Int1, 0          // user: %28
  %17 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %19
  %18 = integer_literal $Builtin.Word, 24         // user: %20
  %19 = builtin "ptrtoint_Word"(%17 : $Builtin.RawPointer) : $Builtin.Word // user: %20
  %20 = struct $StaticString (%19 : $Builtin.Word, %18 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %21 = integer_literal $Builtin.Int64, 15505     // user: %22
  %22 = struct $UInt (%21 : $Builtin.Int64)       // user: %36
  %23 = string_literal utf8 ""                    // user: %24
  %24 = builtin "ptrtoint_Word"(%23 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %10 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %26 = integer_literal $Builtin.Int64, 0         // user: %27
  %27 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %28
  %28 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %16 : $Builtin.Int1) : $Builtin.Int1 // user: %29
  cond_br %28, bb1, bb2                           // id: %29

bb1:                                              // Preds: bb0
  %30 = string_literal utf8 "Fatal error"         // user: %32
  %31 = integer_literal $Builtin.Word, 11         // user: %33
  %32 = builtin "ptrtoint_Word"(%30 : $Builtin.RawPointer) : $Builtin.Word // user: %33
  %33 = struct $StaticString (%32 : $Builtin.Word, %31 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %34 = struct $UInt32 (%15 : $Builtin.Int32)     // user: %36
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %35 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %36
  %36 = apply %35(%33, %25, %20, %22, %34) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %37

bb2:                                              // Preds: bb0
  %38 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // user: %39
  %39 = builtin "truncOrBitCast_Int64_Word"(%38 : $Builtin.Int64) : $Builtin.Word // user: %40
  %40 = index_raw_pointer %11 : $Builtin.RawPointer, %39 : $Builtin.Word // user: %41
  %41 = struct $UnsafeMutableRawPointer (%40 : $Builtin.RawPointer) // user: %42
  %42 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %41 : $UnsafeMutableRawPointer // user: %43
  %43 = struct $UnsafeMutableRawBufferPointer (%13 : $Optional<UnsafeMutableRawPointer>, %42 : $Optional<UnsafeMutableRawPointer>) // user: %45
  %44 = ref_element_addr %7 : $DataWrapper, #DataWrapper.pointer // user: %45
  store %43 to %44 : $*UnsafeMutableRawBufferPointer // id: %45
  debug_value %7 : $DataWrapper, let, name "data" // id: %46
  debug_value %7 : $DataWrapper, let, name "self", argno 1, implicit // id: %47
  %48 = class_method %7 : $DataWrapper, #DataWrapper.pointer!getter : (DataWrapper) -> () -> UnsafeMutableRawBufferPointer, $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %49
  %49 = apply %48(%7) : $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %52
  strong_release %7 : $DataWrapper                // id: %50
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %51 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %52
  %52 = apply %51(%0, %49) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %53 = tuple ()                                  // user: %54
  return %53 : $()                                // id: %54
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #6148, stage HighLevel,Function+EarlyLoopOpt, pass 17: Devirtualizer (devirtualizer)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %52, %3, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  // function_ref specialized Array.count.getter
  %2 = function_ref @$sSa5countSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // users: %8, %5
  %4 = alloc_ref $DataWrapper                     // users: %7, %6
  debug_value %3 : $Int, let, name "count", argno 1 // id: %5
  debug_value %4 : $DataWrapper, let, name "self", argno 2, implicit // id: %6
  %7 = end_init_let_ref %4 : $DataWrapper         // users: %49, %47, %50, %46, %44
  %8 = struct_extract %3 : $Int, #Int._value      // users: %38, %27, %9
  %9 = builtin "truncOrBitCast_Int64_Word"(%8 : $Builtin.Int64) : $Builtin.Word // user: %11
  %10 = integer_literal $Builtin.Word, 0          // users: %25, %11
  %11 = builtin "allocRaw"(%9 : $Builtin.Word, %10 : $Builtin.Word) : $Builtin.RawPointer // users: %40, %12
  %12 = struct $UnsafeMutableRawPointer (%11 : $Builtin.RawPointer) // user: %13
  %13 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %12 : $UnsafeMutableRawPointer // user: %43
  %14 = integer_literal $Builtin.Int8, 2          // users: %33, %25, %20
  %15 = integer_literal $Builtin.Int32, 0         // user: %34
  %16 = integer_literal $Builtin.Int1, 0          // user: %28
  %17 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %19
  %18 = integer_literal $Builtin.Word, 24         // user: %20
  %19 = builtin "ptrtoint_Word"(%17 : $Builtin.RawPointer) : $Builtin.Word // user: %20
  %20 = struct $StaticString (%19 : $Builtin.Word, %18 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %21 = integer_literal $Builtin.Int64, 15505     // user: %22
  %22 = struct $UInt (%21 : $Builtin.Int64)       // user: %36
  %23 = string_literal utf8 ""                    // user: %24
  %24 = builtin "ptrtoint_Word"(%23 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %10 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %26 = integer_literal $Builtin.Int64, 0         // user: %27
  %27 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %28
  %28 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %16 : $Builtin.Int1) : $Builtin.Int1 // user: %29
  cond_br %28, bb1, bb2                           // id: %29

bb1:                                              // Preds: bb0
  %30 = string_literal utf8 "Fatal error"         // user: %32
  %31 = integer_literal $Builtin.Word, 11         // user: %33
  %32 = builtin "ptrtoint_Word"(%30 : $Builtin.RawPointer) : $Builtin.Word // user: %33
  %33 = struct $StaticString (%32 : $Builtin.Word, %31 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %34 = struct $UInt32 (%15 : $Builtin.Int32)     // user: %36
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %35 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %36
  %36 = apply %35(%33, %25, %20, %22, %34) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %37

bb2:                                              // Preds: bb0
  %38 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // user: %39
  %39 = builtin "truncOrBitCast_Int64_Word"(%38 : $Builtin.Int64) : $Builtin.Word // user: %40
  %40 = index_raw_pointer %11 : $Builtin.RawPointer, %39 : $Builtin.Word // user: %41
  %41 = struct $UnsafeMutableRawPointer (%40 : $Builtin.RawPointer) // user: %42
  %42 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %41 : $UnsafeMutableRawPointer // user: %43
  %43 = struct $UnsafeMutableRawBufferPointer (%13 : $Optional<UnsafeMutableRawPointer>, %42 : $Optional<UnsafeMutableRawPointer>) // user: %45
  %44 = ref_element_addr %7 : $DataWrapper, #DataWrapper.pointer // user: %45
  store %43 to %44 : $*UnsafeMutableRawBufferPointer // id: %45
  debug_value %7 : $DataWrapper, let, name "data" // id: %46
  debug_value %7 : $DataWrapper, let, name "self", argno 1, implicit // id: %47
  // function_ref DataWrapper.pointer.getter
  %48 = function_ref @$s4main11DataWrapperC7pointerSwvg : $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %49
  %49 = apply %48(%7) : $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %52
  strong_release %7 : $DataWrapper                // id: %50
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %51 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %52
  %52 = apply %51(%0, %49) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %53 = tuple ()                                  // user: %54
  return %53 : $()                                // id: %54
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #6201, stage HighLevel,Function+EarlyLoopOpt, pass 25: EarlyPerfInliner (early-inline)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %55, %3, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  // function_ref specialized Array.count.getter
  %2 = function_ref @$sSa5countSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // users: %8, %5
  %4 = alloc_ref $DataWrapper                     // users: %7, %6
  debug_value %3 : $Int, let, name "count", argno 1 // id: %5
  debug_value %4 : $DataWrapper, let, name "self", argno 2, implicit // id: %6
  %7 = end_init_let_ref %4 : $DataWrapper         // users: %49, %48, %47, %53, %46, %44
  %8 = struct_extract %3 : $Int, #Int._value      // users: %38, %27, %9
  %9 = builtin "truncOrBitCast_Int64_Word"(%8 : $Builtin.Int64) : $Builtin.Word // user: %11
  %10 = integer_literal $Builtin.Word, 0          // users: %25, %11
  %11 = builtin "allocRaw"(%9 : $Builtin.Word, %10 : $Builtin.Word) : $Builtin.RawPointer // users: %40, %12
  %12 = struct $UnsafeMutableRawPointer (%11 : $Builtin.RawPointer) // user: %13
  %13 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %12 : $UnsafeMutableRawPointer // user: %43
  %14 = integer_literal $Builtin.Int8, 2          // users: %33, %25, %20
  %15 = integer_literal $Builtin.Int32, 0         // user: %34
  %16 = integer_literal $Builtin.Int1, 0          // user: %28
  %17 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %19
  %18 = integer_literal $Builtin.Word, 24         // user: %20
  %19 = builtin "ptrtoint_Word"(%17 : $Builtin.RawPointer) : $Builtin.Word // user: %20
  %20 = struct $StaticString (%19 : $Builtin.Word, %18 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %21 = integer_literal $Builtin.Int64, 15505     // user: %22
  %22 = struct $UInt (%21 : $Builtin.Int64)       // user: %36
  %23 = string_literal utf8 ""                    // user: %24
  %24 = builtin "ptrtoint_Word"(%23 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %10 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %26 = integer_literal $Builtin.Int64, 0         // user: %27
  %27 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %28
  %28 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %16 : $Builtin.Int1) : $Builtin.Int1 // user: %29
  cond_br %28, bb1, bb2                           // id: %29

bb1:                                              // Preds: bb0
  %30 = string_literal utf8 "Fatal error"         // user: %32
  %31 = integer_literal $Builtin.Word, 11         // user: %33
  %32 = builtin "ptrtoint_Word"(%30 : $Builtin.RawPointer) : $Builtin.Word // user: %33
  %33 = struct $StaticString (%32 : $Builtin.Word, %31 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %34 = struct $UInt32 (%15 : $Builtin.Int32)     // user: %36
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %35 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %36
  %36 = apply %35(%33, %25, %20, %22, %34) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %37

bb2:                                              // Preds: bb0
  %38 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // user: %39
  %39 = builtin "truncOrBitCast_Int64_Word"(%38 : $Builtin.Int64) : $Builtin.Word // user: %40
  %40 = index_raw_pointer %11 : $Builtin.RawPointer, %39 : $Builtin.Word // user: %41
  %41 = struct $UnsafeMutableRawPointer (%40 : $Builtin.RawPointer) // user: %42
  %42 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %41 : $UnsafeMutableRawPointer // user: %43
  %43 = struct $UnsafeMutableRawBufferPointer (%13 : $Optional<UnsafeMutableRawPointer>, %42 : $Optional<UnsafeMutableRawPointer>) // user: %45
  %44 = ref_element_addr %7 : $DataWrapper, #DataWrapper.pointer // user: %45
  store %43 to %44 : $*UnsafeMutableRawBufferPointer // id: %45
  debug_value %7 : $DataWrapper, let, name "data" // id: %46
  debug_value %7 : $DataWrapper, let, name "self", argno 1, implicit // id: %47
  debug_value %7 : $DataWrapper, let, name "self", argno 1, implicit // id: %48
  %49 = ref_element_addr %7 : $DataWrapper, #DataWrapper.pointer // user: %50
  %50 = begin_access [read] [dynamic] [no_nested_conflict] %49 : $*UnsafeMutableRawBufferPointer // users: %52, %51
  %51 = load %50 : $*UnsafeMutableRawBufferPointer // user: %55
  end_access %50 : $*UnsafeMutableRawBufferPointer // id: %52
  strong_release %7 : $DataWrapper                // id: %53
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %54 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %55
  %55 = apply %54(%0, %51) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %56 = tuple ()                                  // user: %57
  return %56 : $()                                // id: %57
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #6228, stage HighLevel,Function+EarlyLoopOpt, pass 32: CSE (cse)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %54, %3, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  // function_ref specialized Array.count.getter
  %2 = function_ref @$sSa5countSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // users: %8, %5
  %4 = alloc_ref $DataWrapper                     // users: %7, %6
  debug_value %3 : $Int, let, name "count", argno 1 // id: %5
  debug_value %4 : $DataWrapper, let, name "self", argno 2, implicit // id: %6
  %7 = end_init_let_ref %4 : $DataWrapper         // users: %48, %47, %52, %46, %44
  %8 = struct_extract %3 : $Int, #Int._value      // users: %38, %27, %9
  %9 = builtin "truncOrBitCast_Int64_Word"(%8 : $Builtin.Int64) : $Builtin.Word // user: %11
  %10 = integer_literal $Builtin.Word, 0          // users: %25, %11
  %11 = builtin "allocRaw"(%9 : $Builtin.Word, %10 : $Builtin.Word) : $Builtin.RawPointer // users: %40, %12
  %12 = struct $UnsafeMutableRawPointer (%11 : $Builtin.RawPointer) // user: %13
  %13 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %12 : $UnsafeMutableRawPointer // user: %43
  %14 = integer_literal $Builtin.Int8, 2          // users: %33, %25, %20
  %15 = integer_literal $Builtin.Int32, 0         // user: %34
  %16 = integer_literal $Builtin.Int1, 0          // user: %28
  %17 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %19
  %18 = integer_literal $Builtin.Word, 24         // user: %20
  %19 = builtin "ptrtoint_Word"(%17 : $Builtin.RawPointer) : $Builtin.Word // user: %20
  %20 = struct $StaticString (%19 : $Builtin.Word, %18 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %21 = integer_literal $Builtin.Int64, 15505     // user: %22
  %22 = struct $UInt (%21 : $Builtin.Int64)       // user: %36
  %23 = string_literal utf8 ""                    // user: %24
  %24 = builtin "ptrtoint_Word"(%23 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %10 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %26 = integer_literal $Builtin.Int64, 0         // user: %27
  %27 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %28
  %28 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %16 : $Builtin.Int1) : $Builtin.Int1 // user: %29
  cond_br %28, bb1, bb2                           // id: %29

bb1:                                              // Preds: bb0
  %30 = string_literal utf8 "Fatal error"         // user: %32
  %31 = integer_literal $Builtin.Word, 11         // user: %33
  %32 = builtin "ptrtoint_Word"(%30 : $Builtin.RawPointer) : $Builtin.Word // user: %33
  %33 = struct $StaticString (%32 : $Builtin.Word, %31 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %34 = struct $UInt32 (%15 : $Builtin.Int32)     // user: %36
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %35 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %36
  %36 = apply %35(%33, %25, %20, %22, %34) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %37

bb2:                                              // Preds: bb0
  %38 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // user: %39
  %39 = builtin "truncOrBitCast_Int64_Word"(%38 : $Builtin.Int64) : $Builtin.Word // user: %40
  %40 = index_raw_pointer %11 : $Builtin.RawPointer, %39 : $Builtin.Word // user: %41
  %41 = struct $UnsafeMutableRawPointer (%40 : $Builtin.RawPointer) // user: %42
  %42 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %41 : $UnsafeMutableRawPointer // user: %43
  %43 = struct $UnsafeMutableRawBufferPointer (%13 : $Optional<UnsafeMutableRawPointer>, %42 : $Optional<UnsafeMutableRawPointer>) // user: %45
  %44 = ref_element_addr %7 : $DataWrapper, #DataWrapper.pointer // users: %49, %45
  store %43 to %44 : $*UnsafeMutableRawBufferPointer // id: %45
  debug_value %7 : $DataWrapper, let, name "data" // id: %46
  debug_value %7 : $DataWrapper, let, name "self", argno 1, implicit // id: %47
  debug_value %7 : $DataWrapper, let, name "self", argno 1, implicit // id: %48
  %49 = begin_access [read] [dynamic] [no_nested_conflict] %44 : $*UnsafeMutableRawBufferPointer // users: %51, %50
  %50 = load %49 : $*UnsafeMutableRawBufferPointer // user: %54
  end_access %49 : $*UnsafeMutableRawBufferPointer // id: %51
  strong_release %7 : $DataWrapper                // id: %52
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %53 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %54
  %54 = apply %53(%0, %50) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %55 = tuple ()                                  // user: %56
  return %55 : $()                                // id: %56
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #6229, stage HighLevel,Function+EarlyLoopOpt, pass 33: EarlyRedundantLoadElimination (early-redundant-load-elimination)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %53, %3, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  // function_ref specialized Array.count.getter
  %2 = function_ref @$sSa5countSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // users: %8, %5
  %4 = alloc_ref $DataWrapper                     // users: %7, %6
  debug_value %3 : $Int, let, name "count", argno 1 // id: %5
  debug_value %4 : $DataWrapper, let, name "self", argno 2, implicit // id: %6
  %7 = end_init_let_ref %4 : $DataWrapper         // users: %48, %47, %51, %46, %44
  %8 = struct_extract %3 : $Int, #Int._value      // users: %38, %27, %9
  %9 = builtin "truncOrBitCast_Int64_Word"(%8 : $Builtin.Int64) : $Builtin.Word // user: %11
  %10 = integer_literal $Builtin.Word, 0          // users: %25, %11
  %11 = builtin "allocRaw"(%9 : $Builtin.Word, %10 : $Builtin.Word) : $Builtin.RawPointer // users: %40, %12
  %12 = struct $UnsafeMutableRawPointer (%11 : $Builtin.RawPointer) // user: %13
  %13 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %12 : $UnsafeMutableRawPointer // user: %43
  %14 = integer_literal $Builtin.Int8, 2          // users: %33, %25, %20
  %15 = integer_literal $Builtin.Int32, 0         // user: %34
  %16 = integer_literal $Builtin.Int1, 0          // user: %28
  %17 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %19
  %18 = integer_literal $Builtin.Word, 24         // user: %20
  %19 = builtin "ptrtoint_Word"(%17 : $Builtin.RawPointer) : $Builtin.Word // user: %20
  %20 = struct $StaticString (%19 : $Builtin.Word, %18 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %21 = integer_literal $Builtin.Int64, 15505     // user: %22
  %22 = struct $UInt (%21 : $Builtin.Int64)       // user: %36
  %23 = string_literal utf8 ""                    // user: %24
  %24 = builtin "ptrtoint_Word"(%23 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %10 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %26 = integer_literal $Builtin.Int64, 0         // user: %27
  %27 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %28
  %28 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %16 : $Builtin.Int1) : $Builtin.Int1 // user: %29
  cond_br %28, bb1, bb2                           // id: %29

bb1:                                              // Preds: bb0
  %30 = string_literal utf8 "Fatal error"         // user: %32
  %31 = integer_literal $Builtin.Word, 11         // user: %33
  %32 = builtin "ptrtoint_Word"(%30 : $Builtin.RawPointer) : $Builtin.Word // user: %33
  %33 = struct $StaticString (%32 : $Builtin.Word, %31 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %34 = struct $UInt32 (%15 : $Builtin.Int32)     // user: %36
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %35 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %36
  %36 = apply %35(%33, %25, %20, %22, %34) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %37

bb2:                                              // Preds: bb0
  %38 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // user: %39
  %39 = builtin "truncOrBitCast_Int64_Word"(%38 : $Builtin.Int64) : $Builtin.Word // user: %40
  %40 = index_raw_pointer %11 : $Builtin.RawPointer, %39 : $Builtin.Word // user: %41
  %41 = struct $UnsafeMutableRawPointer (%40 : $Builtin.RawPointer) // user: %42
  %42 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %41 : $UnsafeMutableRawPointer // user: %43
  %43 = struct $UnsafeMutableRawBufferPointer (%13 : $Optional<UnsafeMutableRawPointer>, %42 : $Optional<UnsafeMutableRawPointer>) // users: %53, %45
  %44 = ref_element_addr %7 : $DataWrapper, #DataWrapper.pointer // users: %49, %45
  store %43 to %44 : $*UnsafeMutableRawBufferPointer // id: %45
  debug_value %7 : $DataWrapper, let, name "data" // id: %46
  debug_value %7 : $DataWrapper, let, name "self", argno 1, implicit // id: %47
  debug_value %7 : $DataWrapper, let, name "self", argno 1, implicit // id: %48
  %49 = begin_access [read] [dynamic] [no_nested_conflict] %44 : $*UnsafeMutableRawBufferPointer // user: %50
  end_access %49 : $*UnsafeMutableRawBufferPointer // id: %50
  strong_release %7 : $DataWrapper                // id: %51
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %52 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %53
  %53 = apply %52(%0, %43) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %54 = tuple ()                                  // user: %55
  return %54 : $()                                // id: %55
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #6234, stage HighLevel,Function+EarlyLoopOpt, pass 38: CSE (cse)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %51, %3, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  // function_ref specialized Array.count.getter
  %2 = function_ref @$sSa5countSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // users: %8, %5
  %4 = alloc_ref $DataWrapper                     // users: %7, %6
  debug_value %3 : $Int, let, name "count", argno 1 // id: %5
  debug_value %4 : $DataWrapper, let, name "self", argno 2, implicit // id: %6
  %7 = end_init_let_ref %4 : $DataWrapper         // users: %48, %47, %49, %46, %44
  %8 = struct_extract %3 : $Int, #Int._value      // users: %38, %27, %9
  %9 = builtin "truncOrBitCast_Int64_Word"(%8 : $Builtin.Int64) : $Builtin.Word // user: %11
  %10 = integer_literal $Builtin.Word, 0          // users: %25, %11
  %11 = builtin "allocRaw"(%9 : $Builtin.Word, %10 : $Builtin.Word) : $Builtin.RawPointer // users: %40, %12
  %12 = struct $UnsafeMutableRawPointer (%11 : $Builtin.RawPointer) // user: %13
  %13 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %12 : $UnsafeMutableRawPointer // user: %43
  %14 = integer_literal $Builtin.Int8, 2          // users: %33, %25, %20
  %15 = integer_literal $Builtin.Int32, 0         // user: %34
  %16 = integer_literal $Builtin.Int1, 0          // user: %28
  %17 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %19
  %18 = integer_literal $Builtin.Word, 24         // user: %20
  %19 = builtin "ptrtoint_Word"(%17 : $Builtin.RawPointer) : $Builtin.Word // user: %20
  %20 = struct $StaticString (%19 : $Builtin.Word, %18 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %21 = integer_literal $Builtin.Int64, 15505     // user: %22
  %22 = struct $UInt (%21 : $Builtin.Int64)       // user: %36
  %23 = string_literal utf8 ""                    // user: %24
  %24 = builtin "ptrtoint_Word"(%23 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %10 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %26 = integer_literal $Builtin.Int64, 0         // user: %27
  %27 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %28
  %28 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %16 : $Builtin.Int1) : $Builtin.Int1 // user: %29
  cond_br %28, bb1, bb2                           // id: %29

bb1:                                              // Preds: bb0
  %30 = string_literal utf8 "Fatal error"         // user: %32
  %31 = integer_literal $Builtin.Word, 11         // user: %33
  %32 = builtin "ptrtoint_Word"(%30 : $Builtin.RawPointer) : $Builtin.Word // user: %33
  %33 = struct $StaticString (%32 : $Builtin.Word, %31 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %34 = struct $UInt32 (%15 : $Builtin.Int32)     // user: %36
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %35 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %36
  %36 = apply %35(%33, %25, %20, %22, %34) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %37

bb2:                                              // Preds: bb0
  %38 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // user: %39
  %39 = builtin "truncOrBitCast_Int64_Word"(%38 : $Builtin.Int64) : $Builtin.Word // user: %40
  %40 = index_raw_pointer %11 : $Builtin.RawPointer, %39 : $Builtin.Word // user: %41
  %41 = struct $UnsafeMutableRawPointer (%40 : $Builtin.RawPointer) // user: %42
  %42 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %41 : $UnsafeMutableRawPointer // user: %43
  %43 = struct $UnsafeMutableRawBufferPointer (%13 : $Optional<UnsafeMutableRawPointer>, %42 : $Optional<UnsafeMutableRawPointer>) // users: %51, %45
  %44 = ref_element_addr %7 : $DataWrapper, #DataWrapper.pointer // user: %45
  store %43 to %44 : $*UnsafeMutableRawBufferPointer // id: %45
  debug_value %7 : $DataWrapper, let, name "data" // id: %46
  debug_value %7 : $DataWrapper, let, name "self", argno 1, implicit // id: %47
  debug_value %7 : $DataWrapper, let, name "self", argno 1, implicit // id: %48
  strong_release %7 : $DataWrapper                // id: %49
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %50 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %51
  %51 = apply %50(%0, %43) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %52 = tuple ()                                  // user: %53
  return %52 : $()                                // id: %53
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #6237, stage HighLevel,Function+EarlyLoopOpt, pass 41: ReleaseHoisting (release-hoisting)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %51, %3, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  // function_ref specialized Array.count.getter
  %2 = function_ref @$sSa5countSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // users: %8, %5
  %4 = alloc_ref $DataWrapper                     // users: %7, %6
  debug_value %3 : $Int, let, name "count", argno 1 // id: %5
  debug_value %4 : $DataWrapper, let, name "self", argno 2, implicit // id: %6
  %7 = end_init_let_ref %4 : $DataWrapper         // users: %46, %49, %48, %47, %44
  %8 = struct_extract %3 : $Int, #Int._value      // users: %38, %27, %9
  %9 = builtin "truncOrBitCast_Int64_Word"(%8 : $Builtin.Int64) : $Builtin.Word // user: %11
  %10 = integer_literal $Builtin.Word, 0          // users: %25, %11
  %11 = builtin "allocRaw"(%9 : $Builtin.Word, %10 : $Builtin.Word) : $Builtin.RawPointer // users: %40, %12
  %12 = struct $UnsafeMutableRawPointer (%11 : $Builtin.RawPointer) // user: %13
  %13 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %12 : $UnsafeMutableRawPointer // user: %43
  %14 = integer_literal $Builtin.Int8, 2          // users: %33, %25, %20
  %15 = integer_literal $Builtin.Int32, 0         // user: %34
  %16 = integer_literal $Builtin.Int1, 0          // user: %28
  %17 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %19
  %18 = integer_literal $Builtin.Word, 24         // user: %20
  %19 = builtin "ptrtoint_Word"(%17 : $Builtin.RawPointer) : $Builtin.Word // user: %20
  %20 = struct $StaticString (%19 : $Builtin.Word, %18 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %21 = integer_literal $Builtin.Int64, 15505     // user: %22
  %22 = struct $UInt (%21 : $Builtin.Int64)       // user: %36
  %23 = string_literal utf8 ""                    // user: %24
  %24 = builtin "ptrtoint_Word"(%23 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %10 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %26 = integer_literal $Builtin.Int64, 0         // user: %27
  %27 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %28
  %28 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %16 : $Builtin.Int1) : $Builtin.Int1 // user: %29
  cond_br %28, bb1, bb2                           // id: %29

bb1:                                              // Preds: bb0
  %30 = string_literal utf8 "Fatal error"         // user: %32
  %31 = integer_literal $Builtin.Word, 11         // user: %33
  %32 = builtin "ptrtoint_Word"(%30 : $Builtin.RawPointer) : $Builtin.Word // user: %33
  %33 = struct $StaticString (%32 : $Builtin.Word, %31 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %34 = struct $UInt32 (%15 : $Builtin.Int32)     // user: %36
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %35 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %36
  %36 = apply %35(%33, %25, %20, %22, %34) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %37

bb2:                                              // Preds: bb0
  %38 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // user: %39
  %39 = builtin "truncOrBitCast_Int64_Word"(%38 : $Builtin.Int64) : $Builtin.Word // user: %40
  %40 = index_raw_pointer %11 : $Builtin.RawPointer, %39 : $Builtin.Word // user: %41
  %41 = struct $UnsafeMutableRawPointer (%40 : $Builtin.RawPointer) // user: %42
  %42 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %41 : $UnsafeMutableRawPointer // user: %43
  %43 = struct $UnsafeMutableRawBufferPointer (%13 : $Optional<UnsafeMutableRawPointer>, %42 : $Optional<UnsafeMutableRawPointer>) // users: %51, %45
  %44 = ref_element_addr %7 : $DataWrapper, #DataWrapper.pointer // user: %45
  store %43 to %44 : $*UnsafeMutableRawBufferPointer // id: %45
  strong_release %7 : $DataWrapper                // id: %46
  debug_value %7 : $DataWrapper, let, name "data" // id: %47
  debug_value %7 : $DataWrapper, let, name "self", argno 1, implicit // id: %48
  debug_value %7 : $DataWrapper, let, name "self", argno 1, implicit // id: %49
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %50 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %51
  %51 = apply %50(%0, %43) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %52 = tuple ()                                  // user: %53
  return %52 : $()                                // id: %53
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #6243, stage HighLevel,Function+EarlyLoopOpt, pass 48: ReleaseHoisting (release-hoisting)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %51, %3, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  // function_ref specialized Array.count.getter
  %2 = function_ref @$sSa5countSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // users: %8, %5
  %4 = alloc_ref $DataWrapper                     // users: %7, %6
  debug_value %3 : $Int, let, name "count", argno 1 // id: %5
  debug_value %4 : $DataWrapper, let, name "self", argno 2, implicit // id: %6
  %7 = end_init_let_ref %4 : $DataWrapper         // users: %46, %49, %48, %47, %44
  %8 = struct_extract %3 : $Int, #Int._value      // users: %38, %27, %9
  %9 = builtin "truncOrBitCast_Int64_Word"(%8 : $Builtin.Int64) : $Builtin.Word // user: %11
  %10 = integer_literal $Builtin.Word, 0          // users: %25, %11
  %11 = builtin "allocRaw"(%9 : $Builtin.Word, %10 : $Builtin.Word) : $Builtin.RawPointer // users: %40, %12
  %12 = struct $UnsafeMutableRawPointer (%11 : $Builtin.RawPointer) // user: %13
  %13 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %12 : $UnsafeMutableRawPointer // user: %43
  %14 = integer_literal $Builtin.Int8, 2          // users: %33, %25, %20
  %15 = integer_literal $Builtin.Int32, 0         // user: %34
  %16 = integer_literal $Builtin.Int1, 0          // user: %28
  %17 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %19
  %18 = integer_literal $Builtin.Word, 24         // user: %20
  %19 = builtin "ptrtoint_Word"(%17 : $Builtin.RawPointer) : $Builtin.Word // user: %20
  %20 = struct $StaticString (%19 : $Builtin.Word, %18 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %21 = integer_literal $Builtin.Int64, 15505     // user: %22
  %22 = struct $UInt (%21 : $Builtin.Int64)       // user: %36
  %23 = string_literal utf8 ""                    // user: %24
  %24 = builtin "ptrtoint_Word"(%23 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %10 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %26 = integer_literal $Builtin.Int64, 0         // user: %27
  %27 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %28
  %28 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %16 : $Builtin.Int1) : $Builtin.Int1 // user: %29
  cond_br %28, bb1, bb2                           // id: %29

bb1:                                              // Preds: bb0
  %30 = string_literal utf8 "Fatal error"         // user: %32
  %31 = integer_literal $Builtin.Word, 11         // user: %33
  %32 = builtin "ptrtoint_Word"(%30 : $Builtin.RawPointer) : $Builtin.Word // user: %33
  %33 = struct $StaticString (%32 : $Builtin.Word, %31 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %34 = struct $UInt32 (%15 : $Builtin.Int32)     // user: %36
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %35 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %36
  %36 = apply %35(%33, %25, %20, %22, %34) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %37

bb2:                                              // Preds: bb0
  %38 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // user: %39
  %39 = builtin "truncOrBitCast_Int64_Word"(%38 : $Builtin.Int64) : $Builtin.Word // user: %40
  %40 = index_raw_pointer %11 : $Builtin.RawPointer, %39 : $Builtin.Word // user: %41
  %41 = struct $UnsafeMutableRawPointer (%40 : $Builtin.RawPointer) // user: %42
  %42 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %41 : $UnsafeMutableRawPointer // user: %43
  %43 = struct $UnsafeMutableRawBufferPointer (%13 : $Optional<UnsafeMutableRawPointer>, %42 : $Optional<UnsafeMutableRawPointer>) // users: %51, %45
  %44 = ref_element_addr %7 : $DataWrapper, #DataWrapper.pointer // user: %45
  store %43 to %44 : $*UnsafeMutableRawBufferPointer // id: %45
  strong_release %7 : $DataWrapper                // id: %46
  debug_value %7 : $DataWrapper, let, name "data" // id: %47
  debug_value %7 : $DataWrapper, let, name "self", argno 1, implicit // id: %48
  debug_value %7 : $DataWrapper, let, name "self", argno 1, implicit // id: %49
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %50 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %51
  %51 = apply %50(%0, %43) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %52 = tuple ()                                  // user: %53
  return %52 : $()                                // id: %53
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #6265, stage HighLevel,Function+EarlyLoopOpt, pass 84: ComputeEscapeEffects (compute-escape-effects)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %51, %3, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  // function_ref specialized Array.count.getter
  %2 = function_ref @$sSa5countSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // users: %8, %5
  %4 = alloc_ref $DataWrapper                     // users: %7, %6
  debug_value %3 : $Int, let, name "count", argno 1 // id: %5
  debug_value %4 : $DataWrapper, let, name "self", argno 2, implicit // id: %6
  %7 = end_init_let_ref %4 : $DataWrapper         // users: %46, %49, %48, %47, %44
  %8 = struct_extract %3 : $Int, #Int._value      // users: %38, %27, %9
  %9 = builtin "truncOrBitCast_Int64_Word"(%8 : $Builtin.Int64) : $Builtin.Word // user: %11
  %10 = integer_literal $Builtin.Word, 0          // users: %25, %11
  %11 = builtin "allocRaw"(%9 : $Builtin.Word, %10 : $Builtin.Word) : $Builtin.RawPointer // users: %40, %12
  %12 = struct $UnsafeMutableRawPointer (%11 : $Builtin.RawPointer) // user: %13
  %13 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %12 : $UnsafeMutableRawPointer // user: %43
  %14 = integer_literal $Builtin.Int8, 2          // users: %33, %25, %20
  %15 = integer_literal $Builtin.Int32, 0         // user: %34
  %16 = integer_literal $Builtin.Int1, 0          // user: %28
  %17 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %19
  %18 = integer_literal $Builtin.Word, 24         // user: %20
  %19 = builtin "ptrtoint_Word"(%17 : $Builtin.RawPointer) : $Builtin.Word // user: %20
  %20 = struct $StaticString (%19 : $Builtin.Word, %18 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %21 = integer_literal $Builtin.Int64, 15505     // user: %22
  %22 = struct $UInt (%21 : $Builtin.Int64)       // user: %36
  %23 = string_literal utf8 ""                    // user: %24
  %24 = builtin "ptrtoint_Word"(%23 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %10 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %26 = integer_literal $Builtin.Int64, 0         // user: %27
  %27 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %28
  %28 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %16 : $Builtin.Int1) : $Builtin.Int1 // user: %29
  cond_br %28, bb1, bb2                           // id: %29

bb1:                                              // Preds: bb0
  %30 = string_literal utf8 "Fatal error"         // user: %32
  %31 = integer_literal $Builtin.Word, 11         // user: %33
  %32 = builtin "ptrtoint_Word"(%30 : $Builtin.RawPointer) : $Builtin.Word // user: %33
  %33 = struct $StaticString (%32 : $Builtin.Word, %31 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %34 = struct $UInt32 (%15 : $Builtin.Int32)     // user: %36
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %35 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %36
  %36 = apply %35(%33, %25, %20, %22, %34) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %37

bb2:                                              // Preds: bb0
  %38 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // user: %39
  %39 = builtin "truncOrBitCast_Int64_Word"(%38 : $Builtin.Int64) : $Builtin.Word // user: %40
  %40 = index_raw_pointer %11 : $Builtin.RawPointer, %39 : $Builtin.Word // user: %41
  %41 = struct $UnsafeMutableRawPointer (%40 : $Builtin.RawPointer) // user: %42
  %42 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %41 : $UnsafeMutableRawPointer // user: %43
  %43 = struct $UnsafeMutableRawBufferPointer (%13 : $Optional<UnsafeMutableRawPointer>, %42 : $Optional<UnsafeMutableRawPointer>) // users: %51, %45
  %44 = ref_element_addr %7 : $DataWrapper, #DataWrapper.pointer // user: %45
  store %43 to %44 : $*UnsafeMutableRawBufferPointer // id: %45
  strong_release %7 : $DataWrapper                // id: %46
  debug_value %7 : $DataWrapper, let, name "data" // id: %47
  debug_value %7 : $DataWrapper, let, name "self", argno 1, implicit // id: %48
  debug_value %7 : $DataWrapper, let, name "self", argno 1, implicit // id: %49
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %50 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %51
  %51 = apply %50(%0, %43) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %52 = tuple ()                                  // user: %53
  return %52 : $()                                // id: %53
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL module after #11189, stage HighLevel,Module+StackPromote, pass 0: DeadFunctionAndGlobalElimination (sil-deadfuncelim)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %51, %3, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  // function_ref specialized Array.count.getter
  %2 = function_ref @$sSa5countSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // users: %8, %5
  %4 = alloc_ref $DataWrapper                     // users: %7, %6
  debug_value %3 : $Int, let, name "count", argno 1 // id: %5
  debug_value %4 : $DataWrapper, let, name "self", argno 2, implicit // id: %6
  %7 = end_init_let_ref %4 : $DataWrapper         // users: %46, %49, %48, %47, %44
  %8 = struct_extract %3 : $Int, #Int._value      // users: %38, %27, %9
  %9 = builtin "truncOrBitCast_Int64_Word"(%8 : $Builtin.Int64) : $Builtin.Word // user: %11
  %10 = integer_literal $Builtin.Word, 0          // users: %25, %11
  %11 = builtin "allocRaw"(%9 : $Builtin.Word, %10 : $Builtin.Word) : $Builtin.RawPointer // users: %40, %12
  %12 = struct $UnsafeMutableRawPointer (%11 : $Builtin.RawPointer) // user: %13
  %13 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %12 : $UnsafeMutableRawPointer // user: %43
  %14 = integer_literal $Builtin.Int8, 2          // users: %33, %25, %20
  %15 = integer_literal $Builtin.Int32, 0         // user: %34
  %16 = integer_literal $Builtin.Int1, 0          // user: %28
  %17 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %19
  %18 = integer_literal $Builtin.Word, 24         // user: %20
  %19 = builtin "ptrtoint_Word"(%17 : $Builtin.RawPointer) : $Builtin.Word // user: %20
  %20 = struct $StaticString (%19 : $Builtin.Word, %18 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %21 = integer_literal $Builtin.Int64, 15505     // user: %22
  %22 = struct $UInt (%21 : $Builtin.Int64)       // user: %36
  %23 = string_literal utf8 ""                    // user: %24
  %24 = builtin "ptrtoint_Word"(%23 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %10 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %26 = integer_literal $Builtin.Int64, 0         // user: %27
  %27 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %28
  %28 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %16 : $Builtin.Int1) : $Builtin.Int1 // user: %29
  cond_br %28, bb1, bb2                           // id: %29

bb1:                                              // Preds: bb0
  %30 = string_literal utf8 "Fatal error"         // user: %32
  %31 = integer_literal $Builtin.Word, 11         // user: %33
  %32 = builtin "ptrtoint_Word"(%30 : $Builtin.RawPointer) : $Builtin.Word // user: %33
  %33 = struct $StaticString (%32 : $Builtin.Word, %31 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %34 = struct $UInt32 (%15 : $Builtin.Int32)     // user: %36
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %35 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %36
  %36 = apply %35(%33, %25, %20, %22, %34) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %37

bb2:                                              // Preds: bb0
  %38 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // user: %39
  %39 = builtin "truncOrBitCast_Int64_Word"(%38 : $Builtin.Int64) : $Builtin.Word // user: %40
  %40 = index_raw_pointer %11 : $Builtin.RawPointer, %39 : $Builtin.Word // user: %41
  %41 = struct $UnsafeMutableRawPointer (%40 : $Builtin.RawPointer) // user: %42
  %42 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %41 : $UnsafeMutableRawPointer // user: %43
  %43 = struct $UnsafeMutableRawBufferPointer (%13 : $Optional<UnsafeMutableRawPointer>, %42 : $Optional<UnsafeMutableRawPointer>) // users: %51, %45
  %44 = ref_element_addr %7 : $DataWrapper, #DataWrapper.pointer // user: %45
  store %43 to %44 : $*UnsafeMutableRawBufferPointer // id: %45
  strong_release %7 : $DataWrapper                // id: %46
  debug_value %7 : $DataWrapper, let, name "data" // id: %47
  debug_value %7 : $DataWrapper, let, name "self", argno 1, implicit // id: %48
  debug_value %7 : $DataWrapper, let, name "self", argno 1, implicit // id: %49
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %50 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %51
  %51 = apply %50(%0, %43) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %52 = tuple ()                                  // user: %53
  return %52 : $()                                // id: %53
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy]
// %0                                             // users: %53, %74, %72, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %65, %67, %55, %63, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %82, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %81, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb8                                          // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb8                                          // id: %51

bb6:                                              // Preds: bb3
  // function_ref specialized Array._getCount()
  %52 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %53
  %53 = apply %52(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %54
  %54 = struct_extract %53 : $Int, #Int._value    // users: %65, %55, %84
  %55 = builtin "cmp_eq_Int64"(%54 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %56
  cond_br %55, bb12, bb7                          // id: %56

bb7:                                              // Preds: bb6
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %57 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %72
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %58 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %74
  %59 = integer_literal $Builtin.Int64, 1         // user: %75
  %60 = integer_literal $Builtin.Int1, -1         // user: %75
  %61 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %62
  %62 = builtin "sextOrBitCast_Word_Int64"(%61 : $Builtin.Word) : $Builtin.Int64 // users: %82, %63
  %63 = builtin "cmp_slt_Int64"(%62 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %64
  cond_fail %63 : $Builtin.Int1, "Negative value is not representable" // id: %64
  %65 = builtin "cmp_sge_Int64"(%26 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %66
  cond_fail %65 : $Builtin.Int1, "loop induction variable overflowed" // id: %66
  br bb9(%26 : $Builtin.Int64)                    // id: %67

bb8:                                              // Preds: bb11 bb4 bb12 bb5
  %68 = tuple ()                                  // user: %69
  return %68 : $()                                // id: %69

// %70                                            // users: %71, %80, %75
bb9(%70 : $Builtin.Int64):                        // Preds: bb7 bb10
  %71 = struct $Int (%70 : $Builtin.Int64)        // user: %74
  %72 = apply %57(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %74
  %73 = struct $_DependenceToken ()               // user: %74
  %74 = apply %58(%71, %72, %73, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %78
  %75 = builtin "sadd_with_overflow_Int64"(%70 : $Builtin.Int64, %59 : $Builtin.Int64, %60 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %76
  %76 = tuple_extract %75 : $(Builtin.Int64, Builtin.Int1), 0 // users: %86, %84
  %77 = alloc_stack $UInt8                        // users: %83, %79, %78
  store %74 to %77 : $*UInt8                      // id: %78
  %79 = address_to_pointer [stack_protection] %77 : $*UInt8 to $Builtin.RawPointer // user: %82
  %80 = builtin "truncOrBitCast_Int64_Word"(%70 : $Builtin.Int64) : $Builtin.Word // user: %81
  %81 = index_raw_pointer %42 : $Builtin.RawPointer, %80 : $Builtin.Word // user: %82
  %82 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%81 : $Builtin.RawPointer, %79 : $Builtin.RawPointer, %62 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %77 : $*UInt8                     // id: %83
  %84 = builtin "cmp_eq_Int64"(%76 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %85
  cond_br %84, bb11, bb10                         // id: %85

bb10:                                             // Preds: bb9
  br bb9(%76 : $Builtin.Int64)                    // id: %86

bb11:                                             // Preds: bb9
  br bb8                                          // id: %87

bb12:                                             // Preds: bb6
  br bb8                                          // id: %88
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL module after #11190, stage HighLevel,Module+StackPromote, pass 1: PerformanceSILLinker (performance-linker)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %51, %3, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  // function_ref specialized Array.count.getter
  %2 = function_ref @$sSa5countSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // users: %8, %5
  %4 = alloc_ref $DataWrapper                     // users: %7, %6
  debug_value %3 : $Int, let, name "count", argno 1 // id: %5
  debug_value %4 : $DataWrapper, let, name "self", argno 2, implicit // id: %6
  %7 = end_init_let_ref %4 : $DataWrapper         // users: %46, %49, %48, %47, %44
  %8 = struct_extract %3 : $Int, #Int._value      // users: %38, %27, %9
  %9 = builtin "truncOrBitCast_Int64_Word"(%8 : $Builtin.Int64) : $Builtin.Word // user: %11
  %10 = integer_literal $Builtin.Word, 0          // users: %25, %11
  %11 = builtin "allocRaw"(%9 : $Builtin.Word, %10 : $Builtin.Word) : $Builtin.RawPointer // users: %40, %12
  %12 = struct $UnsafeMutableRawPointer (%11 : $Builtin.RawPointer) // user: %13
  %13 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %12 : $UnsafeMutableRawPointer // user: %43
  %14 = integer_literal $Builtin.Int8, 2          // users: %33, %25, %20
  %15 = integer_literal $Builtin.Int32, 0         // user: %34
  %16 = integer_literal $Builtin.Int1, 0          // user: %28
  %17 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %19
  %18 = integer_literal $Builtin.Word, 24         // user: %20
  %19 = builtin "ptrtoint_Word"(%17 : $Builtin.RawPointer) : $Builtin.Word // user: %20
  %20 = struct $StaticString (%19 : $Builtin.Word, %18 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %21 = integer_literal $Builtin.Int64, 15505     // user: %22
  %22 = struct $UInt (%21 : $Builtin.Int64)       // user: %36
  %23 = string_literal utf8 ""                    // user: %24
  %24 = builtin "ptrtoint_Word"(%23 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %10 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %26 = integer_literal $Builtin.Int64, 0         // user: %27
  %27 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %28
  %28 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %16 : $Builtin.Int1) : $Builtin.Int1 // user: %29
  cond_br %28, bb1, bb2                           // id: %29

bb1:                                              // Preds: bb0
  %30 = string_literal utf8 "Fatal error"         // user: %32
  %31 = integer_literal $Builtin.Word, 11         // user: %33
  %32 = builtin "ptrtoint_Word"(%30 : $Builtin.RawPointer) : $Builtin.Word // user: %33
  %33 = struct $StaticString (%32 : $Builtin.Word, %31 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %34 = struct $UInt32 (%15 : $Builtin.Int32)     // user: %36
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %35 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %36
  %36 = apply %35(%33, %25, %20, %22, %34) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %37

bb2:                                              // Preds: bb0
  %38 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // user: %39
  %39 = builtin "truncOrBitCast_Int64_Word"(%38 : $Builtin.Int64) : $Builtin.Word // user: %40
  %40 = index_raw_pointer %11 : $Builtin.RawPointer, %39 : $Builtin.Word // user: %41
  %41 = struct $UnsafeMutableRawPointer (%40 : $Builtin.RawPointer) // user: %42
  %42 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %41 : $UnsafeMutableRawPointer // user: %43
  %43 = struct $UnsafeMutableRawBufferPointer (%13 : $Optional<UnsafeMutableRawPointer>, %42 : $Optional<UnsafeMutableRawPointer>) // users: %51, %45
  %44 = ref_element_addr %7 : $DataWrapper, #DataWrapper.pointer // user: %45
  store %43 to %44 : $*UnsafeMutableRawBufferPointer // id: %45
  strong_release %7 : $DataWrapper                // id: %46
  debug_value %7 : $DataWrapper, let, name "data" // id: %47
  debug_value %7 : $DataWrapper, let, name "self", argno 1, implicit // id: %48
  debug_value %7 : $DataWrapper, let, name "self", argno 1, implicit // id: %49
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %50 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %51
  %51 = apply %50(%0, %43) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %52 = tuple ()                                  // user: %53
  return %52 : $()                                // id: %53
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy]
// %0                                             // users: %53, %74, %72, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %65, %67, %55, %63, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %82, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %81, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb8                                          // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb8                                          // id: %51

bb6:                                              // Preds: bb3
  // function_ref specialized Array._getCount()
  %52 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %53
  %53 = apply %52(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %54
  %54 = struct_extract %53 : $Int, #Int._value    // users: %65, %55, %84
  %55 = builtin "cmp_eq_Int64"(%54 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %56
  cond_br %55, bb12, bb7                          // id: %56

bb7:                                              // Preds: bb6
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %57 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %72
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %58 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %74
  %59 = integer_literal $Builtin.Int64, 1         // user: %75
  %60 = integer_literal $Builtin.Int1, -1         // user: %75
  %61 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %62
  %62 = builtin "sextOrBitCast_Word_Int64"(%61 : $Builtin.Word) : $Builtin.Int64 // users: %82, %63
  %63 = builtin "cmp_slt_Int64"(%62 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %64
  cond_fail %63 : $Builtin.Int1, "Negative value is not representable" // id: %64
  %65 = builtin "cmp_sge_Int64"(%26 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %66
  cond_fail %65 : $Builtin.Int1, "loop induction variable overflowed" // id: %66
  br bb9(%26 : $Builtin.Int64)                    // id: %67

bb8:                                              // Preds: bb11 bb4 bb12 bb5
  %68 = tuple ()                                  // user: %69
  return %68 : $()                                // id: %69

// %70                                            // users: %71, %80, %75
bb9(%70 : $Builtin.Int64):                        // Preds: bb7 bb10
  %71 = struct $Int (%70 : $Builtin.Int64)        // user: %74
  %72 = apply %57(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %74
  %73 = struct $_DependenceToken ()               // user: %74
  %74 = apply %58(%71, %72, %73, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %78
  %75 = builtin "sadd_with_overflow_Int64"(%70 : $Builtin.Int64, %59 : $Builtin.Int64, %60 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %76
  %76 = tuple_extract %75 : $(Builtin.Int64, Builtin.Int1), 0 // users: %86, %84
  %77 = alloc_stack $UInt8                        // users: %83, %79, %78
  store %74 to %77 : $*UInt8                      // id: %78
  %79 = address_to_pointer [stack_protection] %77 : $*UInt8 to $Builtin.RawPointer // user: %82
  %80 = builtin "truncOrBitCast_Int64_Word"(%70 : $Builtin.Int64) : $Builtin.Word // user: %81
  %81 = index_raw_pointer %42 : $Builtin.RawPointer, %80 : $Builtin.Word // user: %82
  %82 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%81 : $Builtin.RawPointer, %79 : $Builtin.RawPointer, %62 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %77 : $*UInt8                     // id: %83
  %84 = builtin "cmp_eq_Int64"(%76 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %85
  cond_br %84, bb11, bb10                         // id: %85

bb10:                                             // Preds: bb9
  br bb9(%76 : $Builtin.Int64)                    // id: %86

bb11:                                             // Preds: bb9
  br bb8                                          // id: %87

bb12:                                             // Preds: bb6
  br bb8                                          // id: %88
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL module after #11318, stage HighLevel,Module+StackPromote, pass 3: GlobalPropertyOpt (global-property-opt)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %51, %3, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  // function_ref specialized Array.count.getter
  %2 = function_ref @$sSa5countSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // users: %8, %5
  %4 = alloc_ref $DataWrapper                     // users: %7, %6
  debug_value %3 : $Int, let, name "count", argno 1 // id: %5
  debug_value %4 : $DataWrapper, let, name "self", argno 2, implicit // id: %6
  %7 = end_init_let_ref %4 : $DataWrapper         // users: %46, %49, %48, %47, %44
  %8 = struct_extract %3 : $Int, #Int._value      // users: %38, %27, %9
  %9 = builtin "truncOrBitCast_Int64_Word"(%8 : $Builtin.Int64) : $Builtin.Word // user: %11
  %10 = integer_literal $Builtin.Word, 0          // users: %25, %11
  %11 = builtin "allocRaw"(%9 : $Builtin.Word, %10 : $Builtin.Word) : $Builtin.RawPointer // users: %40, %12
  %12 = struct $UnsafeMutableRawPointer (%11 : $Builtin.RawPointer) // user: %13
  %13 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %12 : $UnsafeMutableRawPointer // user: %43
  %14 = integer_literal $Builtin.Int8, 2          // users: %33, %25, %20
  %15 = integer_literal $Builtin.Int32, 0         // user: %34
  %16 = integer_literal $Builtin.Int1, 0          // user: %28
  %17 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %19
  %18 = integer_literal $Builtin.Word, 24         // user: %20
  %19 = builtin "ptrtoint_Word"(%17 : $Builtin.RawPointer) : $Builtin.Word // user: %20
  %20 = struct $StaticString (%19 : $Builtin.Word, %18 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %21 = integer_literal $Builtin.Int64, 15505     // user: %22
  %22 = struct $UInt (%21 : $Builtin.Int64)       // user: %36
  %23 = string_literal utf8 ""                    // user: %24
  %24 = builtin "ptrtoint_Word"(%23 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %10 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %26 = integer_literal $Builtin.Int64, 0         // user: %27
  %27 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %28
  %28 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %16 : $Builtin.Int1) : $Builtin.Int1 // user: %29
  cond_br %28, bb1, bb2                           // id: %29

bb1:                                              // Preds: bb0
  %30 = string_literal utf8 "Fatal error"         // user: %32
  %31 = integer_literal $Builtin.Word, 11         // user: %33
  %32 = builtin "ptrtoint_Word"(%30 : $Builtin.RawPointer) : $Builtin.Word // user: %33
  %33 = struct $StaticString (%32 : $Builtin.Word, %31 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %34 = struct $UInt32 (%15 : $Builtin.Int32)     // user: %36
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %35 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %36
  %36 = apply %35(%33, %25, %20, %22, %34) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %37

bb2:                                              // Preds: bb0
  %38 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // user: %39
  %39 = builtin "truncOrBitCast_Int64_Word"(%38 : $Builtin.Int64) : $Builtin.Word // user: %40
  %40 = index_raw_pointer %11 : $Builtin.RawPointer, %39 : $Builtin.Word // user: %41
  %41 = struct $UnsafeMutableRawPointer (%40 : $Builtin.RawPointer) // user: %42
  %42 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %41 : $UnsafeMutableRawPointer // user: %43
  %43 = struct $UnsafeMutableRawBufferPointer (%13 : $Optional<UnsafeMutableRawPointer>, %42 : $Optional<UnsafeMutableRawPointer>) // users: %51, %45
  %44 = ref_element_addr %7 : $DataWrapper, #DataWrapper.pointer // user: %45
  store %43 to %44 : $*UnsafeMutableRawBufferPointer // id: %45
  strong_release %7 : $DataWrapper                // id: %46
  debug_value %7 : $DataWrapper, let, name "data" // id: %47
  debug_value %7 : $DataWrapper, let, name "self", argno 1, implicit // id: %48
  debug_value %7 : $DataWrapper, let, name "self", argno 1, implicit // id: %49
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %50 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %51
  %51 = apply %50(%0, %43) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %52 = tuple ()                                  // user: %53
  return %52 : $()                                // id: %53
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy]
// %0                                             // users: %53, %74, %72, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %65, %67, %55, %63, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %82, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %81, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb8                                          // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb8                                          // id: %51

bb6:                                              // Preds: bb3
  // function_ref specialized Array._getCount()
  %52 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %53
  %53 = apply %52(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %54
  %54 = struct_extract %53 : $Int, #Int._value    // users: %65, %55, %84
  %55 = builtin "cmp_eq_Int64"(%54 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %56
  cond_br %55, bb12, bb7                          // id: %56

bb7:                                              // Preds: bb6
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %57 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %72
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %58 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %74
  %59 = integer_literal $Builtin.Int64, 1         // user: %75
  %60 = integer_literal $Builtin.Int1, -1         // user: %75
  %61 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %62
  %62 = builtin "sextOrBitCast_Word_Int64"(%61 : $Builtin.Word) : $Builtin.Int64 // users: %82, %63
  %63 = builtin "cmp_slt_Int64"(%62 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %64
  cond_fail %63 : $Builtin.Int1, "Negative value is not representable" // id: %64
  %65 = builtin "cmp_sge_Int64"(%26 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %66
  cond_fail %65 : $Builtin.Int1, "loop induction variable overflowed" // id: %66
  br bb9(%26 : $Builtin.Int64)                    // id: %67

bb8:                                              // Preds: bb11 bb4 bb12 bb5
  %68 = tuple ()                                  // user: %69
  return %68 : $()                                // id: %69

// %70                                            // users: %71, %80, %75
bb9(%70 : $Builtin.Int64):                        // Preds: bb7 bb10
  %71 = struct $Int (%70 : $Builtin.Int64)        // user: %74
  %72 = apply %57(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %74
  %73 = struct $_DependenceToken ()               // user: %74
  %74 = apply %58(%71, %72, %73, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %78
  %75 = builtin "sadd_with_overflow_Int64"(%70 : $Builtin.Int64, %59 : $Builtin.Int64, %60 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %76
  %76 = tuple_extract %75 : $(Builtin.Int64, Builtin.Int1), 0 // users: %86, %84
  %77 = alloc_stack $UInt8                        // users: %83, %79, %78
  store %74 to %77 : $*UInt8                      // id: %78
  %79 = address_to_pointer [stack_protection] %77 : $*UInt8 to $Builtin.RawPointer // user: %82
  %80 = builtin "truncOrBitCast_Int64_Word"(%70 : $Builtin.Int64) : $Builtin.Word // user: %81
  %81 = index_raw_pointer %42 : $Builtin.RawPointer, %80 : $Builtin.Word // user: %82
  %82 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%81 : $Builtin.RawPointer, %79 : $Builtin.RawPointer, %62 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %77 : $*UInt8                     // id: %83
  %84 = builtin "cmp_eq_Int64"(%76 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %85
  cond_br %84, bb11, bb10                         // id: %85

bb10:                                             // Preds: bb9
  br bb9(%76 : $Builtin.Int64)                    // id: %86

bb11:                                             // Preds: bb9
  br bb8                                          // id: %87

bb12:                                             // Preds: bb6
  br bb8                                          // id: %88
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #11340, stage HighLevel,Module+StackPromote, pass 6: StackPromotion (stack-promotion)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %52, %3, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  // function_ref specialized Array.count.getter
  %2 = function_ref @$sSa5countSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // users: %8, %5
  %4 = alloc_ref [stack] $DataWrapper             // users: %50, %7, %6
  debug_value %3 : $Int, let, name "count", argno 1 // id: %5
  debug_value %4 : $DataWrapper, let, name "self", argno 2, implicit // id: %6
  %7 = end_init_let_ref %4 : $DataWrapper         // users: %46, %49, %48, %47, %44
  %8 = struct_extract %3 : $Int, #Int._value      // users: %38, %27, %9
  %9 = builtin "truncOrBitCast_Int64_Word"(%8 : $Builtin.Int64) : $Builtin.Word // user: %11
  %10 = integer_literal $Builtin.Word, 0          // users: %25, %11
  %11 = builtin "allocRaw"(%9 : $Builtin.Word, %10 : $Builtin.Word) : $Builtin.RawPointer // users: %40, %12
  %12 = struct $UnsafeMutableRawPointer (%11 : $Builtin.RawPointer) // user: %13
  %13 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %12 : $UnsafeMutableRawPointer // user: %43
  %14 = integer_literal $Builtin.Int8, 2          // users: %33, %25, %20
  %15 = integer_literal $Builtin.Int32, 0         // user: %34
  %16 = integer_literal $Builtin.Int1, 0          // user: %28
  %17 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %19
  %18 = integer_literal $Builtin.Word, 24         // user: %20
  %19 = builtin "ptrtoint_Word"(%17 : $Builtin.RawPointer) : $Builtin.Word // user: %20
  %20 = struct $StaticString (%19 : $Builtin.Word, %18 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %21 = integer_literal $Builtin.Int64, 15505     // user: %22
  %22 = struct $UInt (%21 : $Builtin.Int64)       // user: %36
  %23 = string_literal utf8 ""                    // user: %24
  %24 = builtin "ptrtoint_Word"(%23 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %10 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %26 = integer_literal $Builtin.Int64, 0         // user: %27
  %27 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %28
  %28 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %16 : $Builtin.Int1) : $Builtin.Int1 // user: %29
  cond_br %28, bb1, bb2                           // id: %29

bb1:                                              // Preds: bb0
  %30 = string_literal utf8 "Fatal error"         // user: %32
  %31 = integer_literal $Builtin.Word, 11         // user: %33
  %32 = builtin "ptrtoint_Word"(%30 : $Builtin.RawPointer) : $Builtin.Word // user: %33
  %33 = struct $StaticString (%32 : $Builtin.Word, %31 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %34 = struct $UInt32 (%15 : $Builtin.Int32)     // user: %36
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %35 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %36
  %36 = apply %35(%33, %25, %20, %22, %34) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %37

bb2:                                              // Preds: bb0
  %38 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // user: %39
  %39 = builtin "truncOrBitCast_Int64_Word"(%38 : $Builtin.Int64) : $Builtin.Word // user: %40
  %40 = index_raw_pointer %11 : $Builtin.RawPointer, %39 : $Builtin.Word // user: %41
  %41 = struct $UnsafeMutableRawPointer (%40 : $Builtin.RawPointer) // user: %42
  %42 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %41 : $UnsafeMutableRawPointer // user: %43
  %43 = struct $UnsafeMutableRawBufferPointer (%13 : $Optional<UnsafeMutableRawPointer>, %42 : $Optional<UnsafeMutableRawPointer>) // users: %52, %45
  %44 = ref_element_addr %7 : $DataWrapper, #DataWrapper.pointer // user: %45
  store %43 to %44 : $*UnsafeMutableRawBufferPointer // id: %45
  strong_release %7 : $DataWrapper                // id: %46
  debug_value %7 : $DataWrapper, let, name "data" // id: %47
  debug_value %7 : $DataWrapper, let, name "self", argno 1, implicit // id: %48
  debug_value %7 : $DataWrapper, let, name "self", argno 1, implicit // id: %49
  dealloc_stack_ref %4 : $DataWrapper             // id: %50
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %51 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %52
  %52 = apply %51(%0, %43) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %53 = tuple ()                                  // user: %54
  return %53 : $()                                // id: %54
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL module after #11604, stage HighLevel,Module+StackPromote, pass 9: SerializeSILPass (serialize-sil)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %52, %3, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  // function_ref specialized Array.count.getter
  %2 = function_ref @$sSa5countSivgs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // users: %8, %5
  %4 = alloc_ref [stack] $DataWrapper             // users: %50, %7, %6
  debug_value %3 : $Int, let, name "count", argno 1 // id: %5
  debug_value %4 : $DataWrapper, let, name "self", argno 2, implicit // id: %6
  %7 = end_init_let_ref %4 : $DataWrapper         // users: %46, %49, %48, %47, %44
  %8 = struct_extract %3 : $Int, #Int._value      // users: %38, %27, %9
  %9 = builtin "truncOrBitCast_Int64_Word"(%8 : $Builtin.Int64) : $Builtin.Word // user: %11
  %10 = integer_literal $Builtin.Word, 0          // users: %25, %11
  %11 = builtin "allocRaw"(%9 : $Builtin.Word, %10 : $Builtin.Word) : $Builtin.RawPointer // users: %40, %12
  %12 = struct $UnsafeMutableRawPointer (%11 : $Builtin.RawPointer) // user: %13
  %13 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %12 : $UnsafeMutableRawPointer // user: %43
  %14 = integer_literal $Builtin.Int8, 2          // users: %33, %25, %20
  %15 = integer_literal $Builtin.Int32, 0         // user: %34
  %16 = integer_literal $Builtin.Int1, 0          // user: %28
  %17 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %19
  %18 = integer_literal $Builtin.Word, 24         // user: %20
  %19 = builtin "ptrtoint_Word"(%17 : $Builtin.RawPointer) : $Builtin.Word // user: %20
  %20 = struct $StaticString (%19 : $Builtin.Word, %18 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %21 = integer_literal $Builtin.Int64, 15505     // user: %22
  %22 = struct $UInt (%21 : $Builtin.Int64)       // user: %36
  %23 = string_literal utf8 ""                    // user: %24
  %24 = builtin "ptrtoint_Word"(%23 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %10 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %26 = integer_literal $Builtin.Int64, 0         // user: %27
  %27 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %28
  %28 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %16 : $Builtin.Int1) : $Builtin.Int1 // user: %29
  cond_br %28, bb1, bb2                           // id: %29

bb1:                                              // Preds: bb0
  %30 = string_literal utf8 "Fatal error"         // user: %32
  %31 = integer_literal $Builtin.Word, 11         // user: %33
  %32 = builtin "ptrtoint_Word"(%30 : $Builtin.RawPointer) : $Builtin.Word // user: %33
  %33 = struct $StaticString (%32 : $Builtin.Word, %31 : $Builtin.Word, %14 : $Builtin.Int8) // user: %36
  %34 = struct $UInt32 (%15 : $Builtin.Int32)     // user: %36
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %35 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %36
  %36 = apply %35(%33, %25, %20, %22, %34) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %37

bb2:                                              // Preds: bb0
  %38 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // user: %39
  %39 = builtin "truncOrBitCast_Int64_Word"(%38 : $Builtin.Int64) : $Builtin.Word // user: %40
  %40 = index_raw_pointer %11 : $Builtin.RawPointer, %39 : $Builtin.Word // user: %41
  %41 = struct $UnsafeMutableRawPointer (%40 : $Builtin.RawPointer) // user: %42
  %42 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %41 : $UnsafeMutableRawPointer // user: %43
  %43 = struct $UnsafeMutableRawBufferPointer (%13 : $Optional<UnsafeMutableRawPointer>, %42 : $Optional<UnsafeMutableRawPointer>) // users: %52, %45
  %44 = ref_element_addr %7 : $DataWrapper, #DataWrapper.pointer // user: %45
  store %43 to %44 : $*UnsafeMutableRawBufferPointer // id: %45
  strong_release %7 : $DataWrapper                // id: %46
  debug_value %7 : $DataWrapper, let, name "data" // id: %47
  debug_value %7 : $DataWrapper, let, name "self", argno 1, implicit // id: %48
  debug_value %7 : $DataWrapper, let, name "self", argno 1, implicit // id: %49
  dealloc_stack_ref %4 : $DataWrapper             // id: %50
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %51 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %52
  %52 = apply %51(%0, %43) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %53 = tuple ()                                  // user: %54
  return %53 : $()                                // id: %54
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy]
// %0                                             // users: %53, %74, %72, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %65, %67, %55, %63, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %82, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %81, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb8                                          // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb8                                          // id: %51

bb6:                                              // Preds: bb3
  // function_ref specialized Array._getCount()
  %52 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %53
  %53 = apply %52(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %54
  %54 = struct_extract %53 : $Int, #Int._value    // users: %65, %55, %84
  %55 = builtin "cmp_eq_Int64"(%54 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %56
  cond_br %55, bb12, bb7                          // id: %56

bb7:                                              // Preds: bb6
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %57 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %72
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %58 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %74
  %59 = integer_literal $Builtin.Int64, 1         // user: %75
  %60 = integer_literal $Builtin.Int1, -1         // user: %75
  %61 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %62
  %62 = builtin "sextOrBitCast_Word_Int64"(%61 : $Builtin.Word) : $Builtin.Int64 // users: %82, %63
  %63 = builtin "cmp_slt_Int64"(%62 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %64
  cond_fail %63 : $Builtin.Int1, "Negative value is not representable" // id: %64
  %65 = builtin "cmp_sge_Int64"(%26 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %66
  cond_fail %65 : $Builtin.Int1, "loop induction variable overflowed" // id: %66
  br bb9(%26 : $Builtin.Int64)                    // id: %67

bb8:                                              // Preds: bb11 bb4 bb12 bb5
  %68 = tuple ()                                  // user: %69
  return %68 : $()                                // id: %69

// %70                                            // users: %71, %80, %75
bb9(%70 : $Builtin.Int64):                        // Preds: bb7 bb10
  %71 = struct $Int (%70 : $Builtin.Int64)        // user: %74
  %72 = apply %57(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %74
  %73 = struct $_DependenceToken ()               // user: %74
  %74 = apply %58(%71, %72, %73, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %78
  %75 = builtin "sadd_with_overflow_Int64"(%70 : $Builtin.Int64, %59 : $Builtin.Int64, %60 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %76
  %76 = tuple_extract %75 : $(Builtin.Int64, Builtin.Int1), 0 // users: %86, %84
  %77 = alloc_stack $UInt8                        // users: %83, %79, %78
  store %74 to %77 : $*UInt8                      // id: %78
  %79 = address_to_pointer [stack_protection] %77 : $*UInt8 to $Builtin.RawPointer // user: %82
  %80 = builtin "truncOrBitCast_Int64_Word"(%70 : $Builtin.Int64) : $Builtin.Word // user: %81
  %81 = index_raw_pointer %42 : $Builtin.RawPointer, %80 : $Builtin.Word // user: %82
  %82 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%81 : $Builtin.RawPointer, %79 : $Builtin.RawPointer, %62 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %77 : $*UInt8                     // id: %83
  %84 = builtin "cmp_eq_Int64"(%76 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %85
  cond_br %84, bb11, bb10                         // id: %85

bb10:                                             // Preds: bb9
  br bb9(%76 : $Builtin.Int64)                    // id: %86

bb11:                                             // Preds: bb9
  br bb8                                          // id: %87

bb12:                                             // Preds: bb6
  br bb8                                          // id: %88
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #12198, stage MidLevel,Function, pass 3: DCE (dce)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy]
// %0                                             // users: %53, %74, %72, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %65, %67, %55, %63, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %82, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %81, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb8                                          // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb8                                          // id: %51

bb6:                                              // Preds: bb3
  // function_ref specialized Array._getCount()
  %52 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %53
  %53 = apply %52(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %54
  %54 = struct_extract %53 : $Int, #Int._value    // users: %65, %55, %84
  %55 = builtin "cmp_eq_Int64"(%54 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %56
  cond_br %55, bb12, bb7                          // id: %56

bb7:                                              // Preds: bb6
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %57 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %72
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %58 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %74
  %59 = integer_literal $Builtin.Int64, 1         // user: %75
  %60 = integer_literal $Builtin.Int1, -1         // user: %75
  %61 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %62
  %62 = builtin "sextOrBitCast_Word_Int64"(%61 : $Builtin.Word) : $Builtin.Int64 // users: %82, %63
  %63 = builtin "cmp_slt_Int64"(%62 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %64
  cond_fail %63 : $Builtin.Int1, "Negative value is not representable" // id: %64
  %65 = builtin "cmp_sge_Int64"(%26 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %66
  cond_fail %65 : $Builtin.Int1, "loop induction variable overflowed" // id: %66
  br bb9(%26 : $Builtin.Int64)                    // id: %67

bb8:                                              // Preds: bb11 bb4 bb12 bb5
  %68 = tuple ()                                  // user: %69
  return %68 : $()                                // id: %69

// %70                                            // users: %71, %80, %75
bb9(%70 : $Builtin.Int64):                        // Preds: bb7 bb10
  %71 = struct $Int (%70 : $Builtin.Int64)        // user: %74
  %72 = apply %57(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %74
  %73 = struct $_DependenceToken ()               // user: %74
  %74 = apply %58(%71, %72, %73, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %78
  %75 = builtin "sadd_with_overflow_Int64"(%70 : $Builtin.Int64, %59 : $Builtin.Int64, %60 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %76
  %76 = tuple_extract %75 : $(Builtin.Int64, Builtin.Int1), 0 // users: %86, %84
  %77 = alloc_stack $UInt8                        // users: %83, %79, %78
  store %74 to %77 : $*UInt8                      // id: %78
  %79 = address_to_pointer [stack_protection] %77 : $*UInt8 to $Builtin.RawPointer // user: %82
  %80 = builtin "truncOrBitCast_Int64_Word"(%70 : $Builtin.Int64) : $Builtin.Word // user: %81
  %81 = index_raw_pointer %42 : $Builtin.RawPointer, %80 : $Builtin.Word // user: %82
  %82 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%81 : $Builtin.RawPointer, %79 : $Builtin.RawPointer, %62 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %77 : $*UInt8                     // id: %83
  %84 = builtin "cmp_eq_Int64"(%76 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %85
  cond_br %84, bb11, bb10                         // id: %85

bb10:                                             // Preds: bb9
  br bb9(%76 : $Builtin.Int64)                    // id: %86

bb11:                                             // Preds: bb9
  br bb8                                          // id: %87

bb12:                                             // Preds: bb6
  br bb8                                          // id: %88
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #12209, stage MidLevel,Function, pass 15: HighLevelLICM (high-level-licm)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy]
// %0                                             // users: %53, %74, %73, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %65, %68, %55, %63, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %82, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %81, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb8                                          // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb8                                          // id: %51

bb6:                                              // Preds: bb3
  // function_ref specialized Array._getCount()
  %52 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %53
  %53 = apply %52(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %54
  %54 = struct_extract %53 : $Int, #Int._value    // users: %65, %55, %84
  %55 = builtin "cmp_eq_Int64"(%54 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %56
  cond_br %55, bb12, bb7                          // id: %56

bb7:                                              // Preds: bb6
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %57 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %73
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %58 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %74
  %59 = integer_literal $Builtin.Int64, 1         // user: %75
  %60 = integer_literal $Builtin.Int1, -1         // user: %75
  %61 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %62
  %62 = builtin "sextOrBitCast_Word_Int64"(%61 : $Builtin.Word) : $Builtin.Int64 // users: %82, %63
  %63 = builtin "cmp_slt_Int64"(%62 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %64
  cond_fail %63 : $Builtin.Int1, "Negative value is not representable" // id: %64
  %65 = builtin "cmp_sge_Int64"(%26 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %66
  cond_fail %65 : $Builtin.Int1, "loop induction variable overflowed" // id: %66
  %67 = struct $_DependenceToken ()               // user: %74
  br bb9(%26 : $Builtin.Int64)                    // id: %68

bb8:                                              // Preds: bb11 bb4 bb12 bb5
  %69 = tuple ()                                  // user: %70
  return %69 : $()                                // id: %70

// %71                                            // users: %72, %80, %75
bb9(%71 : $Builtin.Int64):                        // Preds: bb7 bb10
  %72 = struct $Int (%71 : $Builtin.Int64)        // user: %74
  %73 = apply %57(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %74
  %74 = apply %58(%72, %73, %67, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %78
  %75 = builtin "sadd_with_overflow_Int64"(%71 : $Builtin.Int64, %59 : $Builtin.Int64, %60 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %76
  %76 = tuple_extract %75 : $(Builtin.Int64, Builtin.Int1), 0 // users: %86, %84
  %77 = alloc_stack $UInt8                        // users: %83, %79, %78
  store %74 to %77 : $*UInt8                      // id: %78
  %79 = address_to_pointer [stack_protection] %77 : $*UInt8 to $Builtin.RawPointer // user: %82
  %80 = builtin "truncOrBitCast_Int64_Word"(%71 : $Builtin.Int64) : $Builtin.Word // user: %81
  %81 = index_raw_pointer %42 : $Builtin.RawPointer, %80 : $Builtin.Word // user: %82
  %82 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%81 : $Builtin.RawPointer, %79 : $Builtin.RawPointer, %62 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %77 : $*UInt8                     // id: %83
  %84 = builtin "cmp_eq_Int64"(%76 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %85
  cond_br %84, bb11, bb10                         // id: %85

bb10:                                             // Preds: bb9
  br bb9(%76 : $Builtin.Int64)                    // id: %86

bb11:                                             // Preds: bb9
  br bb8                                          // id: %87

bb12:                                             // Preds: bb6
  br bb8                                          // id: %88
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #12212, stage MidLevel,Function, pass 18: DCE (dce)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy]
// %0                                             // users: %53, %74, %73, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %65, %68, %55, %63, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %82, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %81, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb8                                          // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb8                                          // id: %51

bb6:                                              // Preds: bb3
  // function_ref specialized Array._getCount()
  %52 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %53
  %53 = apply %52(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %54
  %54 = struct_extract %53 : $Int, #Int._value    // users: %65, %55, %84
  %55 = builtin "cmp_eq_Int64"(%54 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %56
  cond_br %55, bb12, bb7                          // id: %56

bb7:                                              // Preds: bb6
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %57 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %73
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %58 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %74
  %59 = integer_literal $Builtin.Int64, 1         // user: %75
  %60 = integer_literal $Builtin.Int1, -1         // user: %75
  %61 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %62
  %62 = builtin "sextOrBitCast_Word_Int64"(%61 : $Builtin.Word) : $Builtin.Int64 // users: %82, %63
  %63 = builtin "cmp_slt_Int64"(%62 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %64
  cond_fail %63 : $Builtin.Int1, "Negative value is not representable" // id: %64
  %65 = builtin "cmp_sge_Int64"(%26 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %66
  cond_fail %65 : $Builtin.Int1, "loop induction variable overflowed" // id: %66
  %67 = struct $_DependenceToken ()               // user: %74
  br bb9(%26 : $Builtin.Int64)                    // id: %68

bb8:                                              // Preds: bb11 bb4 bb12 bb5
  %69 = tuple ()                                  // user: %70
  return %69 : $()                                // id: %70

// %71                                            // users: %72, %80, %75
bb9(%71 : $Builtin.Int64):                        // Preds: bb7 bb10
  %72 = struct $Int (%71 : $Builtin.Int64)        // user: %74
  %73 = apply %57(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %74
  %74 = apply %58(%72, %73, %67, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %78
  %75 = builtin "sadd_with_overflow_Int64"(%71 : $Builtin.Int64, %59 : $Builtin.Int64, %60 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %76
  %76 = tuple_extract %75 : $(Builtin.Int64, Builtin.Int1), 0 // users: %86, %84
  %77 = alloc_stack $UInt8                        // users: %83, %79, %78
  store %74 to %77 : $*UInt8                      // id: %78
  %79 = address_to_pointer [stack_protection] %77 : $*UInt8 to $Builtin.RawPointer // user: %82
  %80 = builtin "truncOrBitCast_Int64_Word"(%71 : $Builtin.Int64) : $Builtin.Word // user: %81
  %81 = index_raw_pointer %42 : $Builtin.RawPointer, %80 : $Builtin.Word // user: %82
  %82 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%81 : $Builtin.RawPointer, %79 : $Builtin.RawPointer, %62 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %77 : $*UInt8                     // id: %83
  %84 = builtin "cmp_eq_Int64"(%76 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %85
  cond_br %84, bb11, bb10                         // id: %85

bb10:                                             // Preds: bb9
  br bb9(%76 : $Builtin.Int64)                    // id: %86

bb11:                                             // Preds: bb9
  br bb8                                          // id: %87

bb12:                                             // Preds: bb6
  br bb8                                          // id: %88
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #12214, stage MidLevel,Function, pass 20: DCE (dce)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy]
// %0                                             // users: %53, %74, %73, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %65, %68, %55, %63, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %82, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %81, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb8                                          // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb8                                          // id: %51

bb6:                                              // Preds: bb3
  // function_ref specialized Array._getCount()
  %52 = function_ref @$sSa9_getCountSiyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %53
  %53 = apply %52(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Int // user: %54
  %54 = struct_extract %53 : $Int, #Int._value    // users: %65, %55, %84
  %55 = builtin "cmp_eq_Int64"(%54 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %56
  cond_br %55, bb12, bb7                          // id: %56

bb7:                                              // Preds: bb6
  // function_ref specialized Array._hoistableIsNativeTypeChecked()
  %57 = function_ref @$sSa29_hoistableIsNativeTypeCheckedSbyFs5UInt8V_Tg5 : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %73
  // function_ref specialized Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)
  %58 = function_ref @$sSa11_getElement_20wasNativeTypeChecked22matchingSubscriptCheckxSi_Sbs16_DependenceTokenVtFs5UInt8V_Tg5 : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %74
  %59 = integer_literal $Builtin.Int64, 1         // user: %75
  %60 = integer_literal $Builtin.Int1, -1         // user: %75
  %61 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %62
  %62 = builtin "sextOrBitCast_Word_Int64"(%61 : $Builtin.Word) : $Builtin.Int64 // users: %82, %63
  %63 = builtin "cmp_slt_Int64"(%62 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %64
  cond_fail %63 : $Builtin.Int1, "Negative value is not representable" // id: %64
  %65 = builtin "cmp_sge_Int64"(%26 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %66
  cond_fail %65 : $Builtin.Int1, "loop induction variable overflowed" // id: %66
  %67 = struct $_DependenceToken ()               // user: %74
  br bb9(%26 : $Builtin.Int64)                    // id: %68

bb8:                                              // Preds: bb11 bb4 bb12 bb5
  %69 = tuple ()                                  // user: %70
  return %69 : $()                                // id: %70

// %71                                            // users: %72, %80, %75
bb9(%71 : $Builtin.Int64):                        // Preds: bb7 bb10
  %72 = struct $Int (%71 : $Builtin.Int64)        // user: %74
  %73 = apply %57(%0) : $@convention(method) (@guaranteed Array<UInt8>) -> Bool // user: %74
  %74 = apply %58(%72, %73, %67, %0) : $@convention(method) (Int, Bool, _DependenceToken, @guaranteed Array<UInt8>) -> UInt8 // user: %78
  %75 = builtin "sadd_with_overflow_Int64"(%71 : $Builtin.Int64, %59 : $Builtin.Int64, %60 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %76
  %76 = tuple_extract %75 : $(Builtin.Int64, Builtin.Int1), 0 // users: %86, %84
  %77 = alloc_stack $UInt8                        // users: %83, %79, %78
  store %74 to %77 : $*UInt8                      // id: %78
  %79 = address_to_pointer [stack_protection] %77 : $*UInt8 to $Builtin.RawPointer // user: %82
  %80 = builtin "truncOrBitCast_Int64_Word"(%71 : $Builtin.Int64) : $Builtin.Word // user: %81
  %81 = index_raw_pointer %42 : $Builtin.RawPointer, %80 : $Builtin.Word // user: %82
  %82 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%81 : $Builtin.RawPointer, %79 : $Builtin.RawPointer, %62 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %77 : $*UInt8                     // id: %83
  %84 = builtin "cmp_eq_Int64"(%76 : $Builtin.Int64, %54 : $Builtin.Int64) : $Builtin.Int1 // user: %85
  cond_br %84, bb11, bb10                         // id: %85

bb10:                                             // Preds: bb9
  br bb9(%76 : $Builtin.Int64)                    // id: %86

bb11:                                             // Preds: bb9
  br bb8                                          // id: %87

bb12:                                             // Preds: bb6
  br bb8                                          // id: %88
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #12224, stage MidLevel,Function, pass 31: PerfInliner (inline)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy]
// %0                                             // users: %104, %52, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %95, %97, %87, %93, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %174, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %173, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb10                                         // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb10                                         // id: %51

bb6:                                              // Preds: bb3
  %52 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %53
  %53 = struct_extract %52 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %54
  %54 = ref_element_addr [immutable] %53 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %55
  %55 = struct_element_addr %54 : $*_ArrayBody, #_ArrayBody._storage // user: %56
  %56 = struct_element_addr %55 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %57
  %57 = struct_element_addr %56 : $*Int, #Int._value // user: %58
  %58 = load %57 : $*Builtin.Int64                // users: %84, %71
  %59 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %61
  %60 = integer_literal $Builtin.Word, 24         // user: %63
  %61 = builtin "ptrtoint_Word"(%59 : $Builtin.RawPointer) : $Builtin.Word // user: %63
  %62 = integer_literal $Builtin.Int8, 2          // users: %78, %69, %63
  %63 = struct $StaticString (%61 : $Builtin.Word, %60 : $Builtin.Word, %62 : $Builtin.Int8) // user: %82
  %64 = integer_literal $Builtin.Int64, 15505     // user: %65
  %65 = struct $UInt (%64 : $Builtin.Int64)       // user: %82
  %66 = string_literal utf8 ""                    // user: %68
  %67 = integer_literal $Builtin.Word, 0          // user: %69
  %68 = builtin "ptrtoint_Word"(%66 : $Builtin.RawPointer) : $Builtin.Word // user: %69
  %69 = struct $StaticString (%68 : $Builtin.Word, %67 : $Builtin.Word, %62 : $Builtin.Int8) // user: %82
  %70 = integer_literal $Builtin.Int64, 0         // user: %71
  %71 = builtin "cmp_slt_Int64"(%58 : $Builtin.Int64, %70 : $Builtin.Int64) : $Builtin.Int1 // user: %73
  %72 = integer_literal $Builtin.Int1, 0          // user: %73
  %73 = builtin "int_expect_Int1"(%71 : $Builtin.Int1, %72 : $Builtin.Int1) : $Builtin.Int1 // user: %74
  cond_br %73, bb7, bb8                           // id: %74

bb7:                                              // Preds: bb6
  %75 = string_literal utf8 "Fatal error"         // user: %77
  %76 = integer_literal $Builtin.Word, 11         // user: %78
  %77 = builtin "ptrtoint_Word"(%75 : $Builtin.RawPointer) : $Builtin.Word // user: %78
  %78 = struct $StaticString (%77 : $Builtin.Word, %76 : $Builtin.Word, %62 : $Builtin.Int8) // user: %82
  %79 = integer_literal $Builtin.Int32, 0         // user: %80
  %80 = struct $UInt32 (%79 : $Builtin.Int32)     // user: %82
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %81 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %82
  %82 = apply %81(%78, %69, %63, %65, %80) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %83

bb8:                                              // Preds: bb6
  %84 = builtin "assumeNonNegative_Int64"(%58 : $Builtin.Int64) : $Builtin.Int64 // user: %85
  %85 = struct $Int (%84 : $Builtin.Int64)        // user: %86
  %86 = struct_extract %85 : $Int, #Int._value    // users: %95, %87, %176
  %87 = builtin "cmp_eq_Int64"(%86 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %88
  cond_br %87, bb21, bb9                          // id: %88

bb9:                                              // Preds: bb8
  %89 = integer_literal $Builtin.Int64, 1         // user: %167
  %90 = integer_literal $Builtin.Int1, -1         // user: %167
  %91 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %92
  %92 = builtin "sextOrBitCast_Word_Int64"(%91 : $Builtin.Word) : $Builtin.Int64 // users: %174, %93
  %93 = builtin "cmp_slt_Int64"(%92 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %94
  cond_fail %93 : $Builtin.Int1, "Negative value is not representable" // id: %94
  %95 = builtin "cmp_sge_Int64"(%26 : $Builtin.Int64, %86 : $Builtin.Int64) : $Builtin.Int1 // user: %96
  cond_fail %95 : $Builtin.Int1, "loop induction variable overflowed" // id: %96
  br bb11(%26 : $Builtin.Int64)                   // id: %97

bb10:                                             // Preds: bb20 bb4 bb21 bb5
  %98 = tuple ()                                  // user: %99
  return %98 : $()                                // id: %99

// %100                                           // users: %101, %172, %167
bb11(%100 : $Builtin.Int64):                      // Preds: bb9 bb19
  %101 = struct $Int (%100 : $Builtin.Int64)      // user: %117
  %102 = integer_literal $Builtin.Int1, -1        // user: %103
  %103 = struct $Bool (%102 : $Builtin.Int1)
  %104 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %121
  %105 = string_literal utf8 "Array index out of range" // user: %107
  %106 = integer_literal $Builtin.Word, 24        // users: %129, %109
  %107 = builtin "ptrtoint_Word"(%105 : $Builtin.RawPointer) : $Builtin.Word // user: %109
  %108 = integer_literal $Builtin.Int8, 2         // users: %152, %135, %129, %143, %113, %109
  %109 = struct $StaticString (%107 : $Builtin.Word, %106 : $Builtin.Word, %108 : $Builtin.Int8) // user: %147
  %110 = string_literal utf8 "Swift/ContiguousArrayBuffer.swift" // user: %112
  %111 = integer_literal $Builtin.Word, 33        // user: %113
  %112 = builtin "ptrtoint_Word"(%110 : $Builtin.RawPointer) : $Builtin.Word // user: %113
  %113 = struct $StaticString (%112 : $Builtin.Word, %111 : $Builtin.Word, %108 : $Builtin.Int8) // user: %147
  %114 = integer_literal $Builtin.Int64, 502      // user: %115
  %115 = struct $UInt (%114 : $Builtin.Int64)     // user: %147
  %116 = integer_literal $Builtin.Int64, 0        // users: %136, %118
  %117 = struct_extract %101 : $Int, #Int._value  // users: %163, %159, %118
  %118 = builtin "cmp_slt_Int64"(%117 : $Builtin.Int64, %116 : $Builtin.Int64) : $Builtin.Int1 // user: %119
  cond_br %118, bb12, bb13                        // id: %119

bb12:                                             // Preds: bb11
  br bb14                                         // id: %120

bb13:                                             // Preds: bb11
  %121 = struct_extract %104 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %164, %122
  %122 = ref_element_addr %121 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %123
  %123 = struct_element_addr %122 : $*_ArrayBody, #_ArrayBody._storage // user: %124
  %124 = struct_element_addr %123 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %125
  %125 = struct_element_addr %124 : $*Int, #Int._value // user: %126
  %126 = load %125 : $*Builtin.Int64              // users: %158, %136
  %127 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %128
  %128 = builtin "ptrtoint_Word"(%127 : $Builtin.RawPointer) : $Builtin.Word // user: %129
  %129 = struct $StaticString (%128 : $Builtin.Word, %106 : $Builtin.Word, %108 : $Builtin.Int8) // user: %156
  %130 = integer_literal $Builtin.Int64, 15505    // user: %131
  %131 = struct $UInt (%130 : $Builtin.Int64)     // user: %156
  %132 = string_literal utf8 ""                   // user: %134
  %133 = integer_literal $Builtin.Word, 0         // user: %135
  %134 = builtin "ptrtoint_Word"(%132 : $Builtin.RawPointer) : $Builtin.Word // user: %135
  %135 = struct $StaticString (%134 : $Builtin.Word, %133 : $Builtin.Word, %108 : $Builtin.Int8) // user: %156
  %136 = builtin "cmp_slt_Int64"(%126 : $Builtin.Int64, %116 : $Builtin.Int64) : $Builtin.Int1 // user: %138
  %137 = integer_literal $Builtin.Int1, 0         // user: %138
  %138 = builtin "int_expect_Int1"(%136 : $Builtin.Int1, %137 : $Builtin.Int1) : $Builtin.Int1 // user: %139
  cond_br %138, bb15, bb16                        // id: %139

bb14:                                             // Preds: bb18 bb12
  %140 = string_literal utf8 "Fatal error"        // user: %142
  %141 = integer_literal $Builtin.Word, 11        // user: %143
  %142 = builtin "ptrtoint_Word"(%140 : $Builtin.RawPointer) : $Builtin.Word // user: %143
  %143 = struct $StaticString (%142 : $Builtin.Word, %141 : $Builtin.Word, %108 : $Builtin.Int8) // user: %147
  %144 = integer_literal $Builtin.Int32, 0        // user: %145
  %145 = struct $UInt32 (%144 : $Builtin.Int32)   // user: %147
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %146 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %147
  %147 = apply %146(%143, %109, %113, %115, %145) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %148

bb15:                                             // Preds: bb13
  %149 = string_literal utf8 "Fatal error"        // user: %151
  %150 = integer_literal $Builtin.Word, 11        // user: %152
  %151 = builtin "ptrtoint_Word"(%149 : $Builtin.RawPointer) : $Builtin.Word // user: %152
  %152 = struct $StaticString (%151 : $Builtin.Word, %150 : $Builtin.Word, %108 : $Builtin.Int8) // user: %156
  %153 = integer_literal $Builtin.Int32, 0        // user: %154
  %154 = struct $UInt32 (%153 : $Builtin.Int32)   // user: %156
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %155 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %156
  %156 = apply %155(%152, %135, %129, %131, %154) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %157

bb16:                                             // Preds: bb13
  %158 = builtin "assumeNonNegative_Int64"(%126 : $Builtin.Int64) : $Builtin.Int64 // user: %159
  %159 = builtin "cmp_slt_Int64"(%117 : $Builtin.Int64, %158 : $Builtin.Int64) : $Builtin.Int1 // user: %161
  %160 = integer_literal $Builtin.Int1, -1        // user: %161
  %161 = builtin "int_expect_Int1"(%159 : $Builtin.Int1, %160 : $Builtin.Int1) : $Builtin.Int1 // user: %162
  cond_br %161, bb17, bb18                        // id: %162

bb17:                                             // Preds: bb16
  %163 = builtin "truncOrBitCast_Int64_Word"(%117 : $Builtin.Int64) : $Builtin.Word // user: %165
  %164 = ref_tail_addr [immutable] %121 : $__ContiguousArrayStorageBase, $UInt8 // user: %165
  %165 = index_addr [stack_protection] %164 : $*UInt8, %163 : $Builtin.Word // user: %166
  %166 = load %165 : $*UInt8                      // user: %170
  %167 = builtin "sadd_with_overflow_Int64"(%100 : $Builtin.Int64, %89 : $Builtin.Int64, %90 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %168
  %168 = tuple_extract %167 : $(Builtin.Int64, Builtin.Int1), 0 // users: %179, %176
  %169 = alloc_stack $UInt8                       // users: %175, %171, %170
  store %166 to %169 : $*UInt8                    // id: %170
  %171 = address_to_pointer [stack_protection] %169 : $*UInt8 to $Builtin.RawPointer // user: %174
  %172 = builtin "truncOrBitCast_Int64_Word"(%100 : $Builtin.Int64) : $Builtin.Word // user: %173
  %173 = index_raw_pointer %42 : $Builtin.RawPointer, %172 : $Builtin.Word // user: %174
  %174 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%173 : $Builtin.RawPointer, %171 : $Builtin.RawPointer, %92 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %169 : $*UInt8                    // id: %175
  %176 = builtin "cmp_eq_Int64"(%168 : $Builtin.Int64, %86 : $Builtin.Int64) : $Builtin.Int1 // user: %177
  cond_br %176, bb20, bb19                        // id: %177

bb18:                                             // Preds: bb16
  br bb14                                         // id: %178

bb19:                                             // Preds: bb17
  br bb11(%168 : $Builtin.Int64)                  // id: %179

bb20:                                             // Preds: bb17
  br bb10                                         // id: %180

bb21:                                             // Preds: bb8
  br bb10                                         // id: %181
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #12228, stage MidLevel,Function, pass 3: DCE (dce)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy]
// %0                                             // users: %102, %52, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %95, %97, %87, %93, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %172, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %171, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb10                                         // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb10                                         // id: %51

bb6:                                              // Preds: bb3
  %52 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %53
  %53 = struct_extract %52 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %54
  %54 = ref_element_addr [immutable] %53 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %55
  %55 = struct_element_addr %54 : $*_ArrayBody, #_ArrayBody._storage // user: %56
  %56 = struct_element_addr %55 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %57
  %57 = struct_element_addr %56 : $*Int, #Int._value // user: %58
  %58 = load %57 : $*Builtin.Int64                // users: %84, %71
  %59 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %61
  %60 = integer_literal $Builtin.Word, 24         // user: %63
  %61 = builtin "ptrtoint_Word"(%59 : $Builtin.RawPointer) : $Builtin.Word // user: %63
  %62 = integer_literal $Builtin.Int8, 2          // users: %78, %69, %63
  %63 = struct $StaticString (%61 : $Builtin.Word, %60 : $Builtin.Word, %62 : $Builtin.Int8) // user: %82
  %64 = integer_literal $Builtin.Int64, 15505     // user: %65
  %65 = struct $UInt (%64 : $Builtin.Int64)       // user: %82
  %66 = string_literal utf8 ""                    // user: %68
  %67 = integer_literal $Builtin.Word, 0          // user: %69
  %68 = builtin "ptrtoint_Word"(%66 : $Builtin.RawPointer) : $Builtin.Word // user: %69
  %69 = struct $StaticString (%68 : $Builtin.Word, %67 : $Builtin.Word, %62 : $Builtin.Int8) // user: %82
  %70 = integer_literal $Builtin.Int64, 0         // user: %71
  %71 = builtin "cmp_slt_Int64"(%58 : $Builtin.Int64, %70 : $Builtin.Int64) : $Builtin.Int1 // user: %73
  %72 = integer_literal $Builtin.Int1, 0          // user: %73
  %73 = builtin "int_expect_Int1"(%71 : $Builtin.Int1, %72 : $Builtin.Int1) : $Builtin.Int1 // user: %74
  cond_br %73, bb7, bb8                           // id: %74

bb7:                                              // Preds: bb6
  %75 = string_literal utf8 "Fatal error"         // user: %77
  %76 = integer_literal $Builtin.Word, 11         // user: %78
  %77 = builtin "ptrtoint_Word"(%75 : $Builtin.RawPointer) : $Builtin.Word // user: %78
  %78 = struct $StaticString (%77 : $Builtin.Word, %76 : $Builtin.Word, %62 : $Builtin.Int8) // user: %82
  %79 = integer_literal $Builtin.Int32, 0         // user: %80
  %80 = struct $UInt32 (%79 : $Builtin.Int32)     // user: %82
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %81 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %82
  %82 = apply %81(%78, %69, %63, %65, %80) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %83

bb8:                                              // Preds: bb6
  %84 = builtin "assumeNonNegative_Int64"(%58 : $Builtin.Int64) : $Builtin.Int64 // user: %85
  %85 = struct $Int (%84 : $Builtin.Int64)        // user: %86
  %86 = struct_extract %85 : $Int, #Int._value    // users: %95, %87, %174
  %87 = builtin "cmp_eq_Int64"(%86 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %88
  cond_br %87, bb21, bb9                          // id: %88

bb9:                                              // Preds: bb8
  %89 = integer_literal $Builtin.Int64, 1         // user: %165
  %90 = integer_literal $Builtin.Int1, -1         // user: %165
  %91 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %92
  %92 = builtin "sextOrBitCast_Word_Int64"(%91 : $Builtin.Word) : $Builtin.Int64 // users: %172, %93
  %93 = builtin "cmp_slt_Int64"(%92 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %94
  cond_fail %93 : $Builtin.Int1, "Negative value is not representable" // id: %94
  %95 = builtin "cmp_sge_Int64"(%26 : $Builtin.Int64, %86 : $Builtin.Int64) : $Builtin.Int1 // user: %96
  cond_fail %95 : $Builtin.Int1, "loop induction variable overflowed" // id: %96
  br bb11(%26 : $Builtin.Int64)                   // id: %97

bb10:                                             // Preds: bb20 bb4 bb21 bb5
  %98 = tuple ()                                  // user: %99
  return %98 : $()                                // id: %99

// %100                                           // users: %101, %170, %165
bb11(%100 : $Builtin.Int64):                      // Preds: bb9 bb19
  %101 = struct $Int (%100 : $Builtin.Int64)      // user: %115
  %102 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %119
  %103 = string_literal utf8 "Array index out of range" // user: %105
  %104 = integer_literal $Builtin.Word, 24        // users: %127, %107
  %105 = builtin "ptrtoint_Word"(%103 : $Builtin.RawPointer) : $Builtin.Word // user: %107
  %106 = integer_literal $Builtin.Int8, 2         // users: %150, %133, %127, %141, %111, %107
  %107 = struct $StaticString (%105 : $Builtin.Word, %104 : $Builtin.Word, %106 : $Builtin.Int8) // user: %145
  %108 = string_literal utf8 "Swift/ContiguousArrayBuffer.swift" // user: %110
  %109 = integer_literal $Builtin.Word, 33        // user: %111
  %110 = builtin "ptrtoint_Word"(%108 : $Builtin.RawPointer) : $Builtin.Word // user: %111
  %111 = struct $StaticString (%110 : $Builtin.Word, %109 : $Builtin.Word, %106 : $Builtin.Int8) // user: %145
  %112 = integer_literal $Builtin.Int64, 502      // user: %113
  %113 = struct $UInt (%112 : $Builtin.Int64)     // user: %145
  %114 = integer_literal $Builtin.Int64, 0        // users: %134, %116
  %115 = struct_extract %101 : $Int, #Int._value  // users: %161, %157, %116
  %116 = builtin "cmp_slt_Int64"(%115 : $Builtin.Int64, %114 : $Builtin.Int64) : $Builtin.Int1 // user: %117
  cond_br %116, bb12, bb13                        // id: %117

bb12:                                             // Preds: bb11
  br bb14                                         // id: %118

bb13:                                             // Preds: bb11
  %119 = struct_extract %102 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %162, %120
  %120 = ref_element_addr %119 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %121
  %121 = struct_element_addr %120 : $*_ArrayBody, #_ArrayBody._storage // user: %122
  %122 = struct_element_addr %121 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %123
  %123 = struct_element_addr %122 : $*Int, #Int._value // user: %124
  %124 = load %123 : $*Builtin.Int64              // users: %156, %134
  %125 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %126
  %126 = builtin "ptrtoint_Word"(%125 : $Builtin.RawPointer) : $Builtin.Word // user: %127
  %127 = struct $StaticString (%126 : $Builtin.Word, %104 : $Builtin.Word, %106 : $Builtin.Int8) // user: %154
  %128 = integer_literal $Builtin.Int64, 15505    // user: %129
  %129 = struct $UInt (%128 : $Builtin.Int64)     // user: %154
  %130 = string_literal utf8 ""                   // user: %132
  %131 = integer_literal $Builtin.Word, 0         // user: %133
  %132 = builtin "ptrtoint_Word"(%130 : $Builtin.RawPointer) : $Builtin.Word // user: %133
  %133 = struct $StaticString (%132 : $Builtin.Word, %131 : $Builtin.Word, %106 : $Builtin.Int8) // user: %154
  %134 = builtin "cmp_slt_Int64"(%124 : $Builtin.Int64, %114 : $Builtin.Int64) : $Builtin.Int1 // user: %136
  %135 = integer_literal $Builtin.Int1, 0         // user: %136
  %136 = builtin "int_expect_Int1"(%134 : $Builtin.Int1, %135 : $Builtin.Int1) : $Builtin.Int1 // user: %137
  cond_br %136, bb15, bb16                        // id: %137

bb14:                                             // Preds: bb18 bb12
  %138 = string_literal utf8 "Fatal error"        // user: %140
  %139 = integer_literal $Builtin.Word, 11        // user: %141
  %140 = builtin "ptrtoint_Word"(%138 : $Builtin.RawPointer) : $Builtin.Word // user: %141
  %141 = struct $StaticString (%140 : $Builtin.Word, %139 : $Builtin.Word, %106 : $Builtin.Int8) // user: %145
  %142 = integer_literal $Builtin.Int32, 0        // user: %143
  %143 = struct $UInt32 (%142 : $Builtin.Int32)   // user: %145
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %144 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %145
  %145 = apply %144(%141, %107, %111, %113, %143) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %146

bb15:                                             // Preds: bb13
  %147 = string_literal utf8 "Fatal error"        // user: %149
  %148 = integer_literal $Builtin.Word, 11        // user: %150
  %149 = builtin "ptrtoint_Word"(%147 : $Builtin.RawPointer) : $Builtin.Word // user: %150
  %150 = struct $StaticString (%149 : $Builtin.Word, %148 : $Builtin.Word, %106 : $Builtin.Int8) // user: %154
  %151 = integer_literal $Builtin.Int32, 0        // user: %152
  %152 = struct $UInt32 (%151 : $Builtin.Int32)   // user: %154
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %153 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %154
  %154 = apply %153(%150, %133, %127, %129, %152) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %155

bb16:                                             // Preds: bb13
  %156 = builtin "assumeNonNegative_Int64"(%124 : $Builtin.Int64) : $Builtin.Int64 // user: %157
  %157 = builtin "cmp_slt_Int64"(%115 : $Builtin.Int64, %156 : $Builtin.Int64) : $Builtin.Int1 // user: %159
  %158 = integer_literal $Builtin.Int1, -1        // user: %159
  %159 = builtin "int_expect_Int1"(%157 : $Builtin.Int1, %158 : $Builtin.Int1) : $Builtin.Int1 // user: %160
  cond_br %159, bb17, bb18                        // id: %160

bb17:                                             // Preds: bb16
  %161 = builtin "truncOrBitCast_Int64_Word"(%115 : $Builtin.Int64) : $Builtin.Word // user: %163
  %162 = ref_tail_addr [immutable] %119 : $__ContiguousArrayStorageBase, $UInt8 // user: %163
  %163 = index_addr [stack_protection] %162 : $*UInt8, %161 : $Builtin.Word // user: %164
  %164 = load %163 : $*UInt8                      // user: %168
  %165 = builtin "sadd_with_overflow_Int64"(%100 : $Builtin.Int64, %89 : $Builtin.Int64, %90 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %166
  %166 = tuple_extract %165 : $(Builtin.Int64, Builtin.Int1), 0 // users: %177, %174
  %167 = alloc_stack $UInt8                       // users: %173, %169, %168
  store %164 to %167 : $*UInt8                    // id: %168
  %169 = address_to_pointer [stack_protection] %167 : $*UInt8 to $Builtin.RawPointer // user: %172
  %170 = builtin "truncOrBitCast_Int64_Word"(%100 : $Builtin.Int64) : $Builtin.Word // user: %171
  %171 = index_raw_pointer %42 : $Builtin.RawPointer, %170 : $Builtin.Word // user: %172
  %172 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%171 : $Builtin.RawPointer, %169 : $Builtin.RawPointer, %92 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %167 : $*UInt8                    // id: %173
  %174 = builtin "cmp_eq_Int64"(%166 : $Builtin.Int64, %86 : $Builtin.Int64) : $Builtin.Int1 // user: %175
  cond_br %174, bb20, bb19                        // id: %175

bb18:                                             // Preds: bb16
  br bb14                                         // id: %176

bb19:                                             // Preds: bb17
  br bb11(%166 : $Builtin.Int64)                  // id: %177

bb20:                                             // Preds: bb17
  br bb10                                         // id: %178

bb21:                                             // Preds: bb8
  br bb10                                         // id: %179
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #12234, stage MidLevel,Function, pass 9: PerformanceConstantPropagation (performance-constant-propagation)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy]
// %0                                             // users: %99, %52, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %93, %95, %85, %91, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %168, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %167, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb10                                         // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb10                                         // id: %51

bb6:                                              // Preds: bb3
  %52 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %53
  %53 = struct_extract %52 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %54
  %54 = ref_element_addr [immutable] %53 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %55
  %55 = struct_element_addr %54 : $*_ArrayBody, #_ArrayBody._storage // user: %56
  %56 = struct_element_addr %55 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %57
  %57 = struct_element_addr %56 : $*Int, #Int._value // user: %58
  %58 = load %57 : $*Builtin.Int64                // users: %84, %71
  %59 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %61
  %60 = integer_literal $Builtin.Word, 24         // user: %63
  %61 = builtin "ptrtoint_Word"(%59 : $Builtin.RawPointer) : $Builtin.Word // user: %63
  %62 = integer_literal $Builtin.Int8, 2          // users: %78, %69, %63
  %63 = struct $StaticString (%61 : $Builtin.Word, %60 : $Builtin.Word, %62 : $Builtin.Int8) // user: %82
  %64 = integer_literal $Builtin.Int64, 15505     // user: %65
  %65 = struct $UInt (%64 : $Builtin.Int64)       // user: %82
  %66 = string_literal utf8 ""                    // user: %68
  %67 = integer_literal $Builtin.Word, 0          // user: %69
  %68 = builtin "ptrtoint_Word"(%66 : $Builtin.RawPointer) : $Builtin.Word // user: %69
  %69 = struct $StaticString (%68 : $Builtin.Word, %67 : $Builtin.Word, %62 : $Builtin.Int8) // user: %82
  %70 = integer_literal $Builtin.Int64, 0         // user: %71
  %71 = builtin "cmp_slt_Int64"(%58 : $Builtin.Int64, %70 : $Builtin.Int64) : $Builtin.Int1 // user: %73
  %72 = integer_literal $Builtin.Int1, 0          // user: %73
  %73 = builtin "int_expect_Int1"(%71 : $Builtin.Int1, %72 : $Builtin.Int1) : $Builtin.Int1 // user: %74
  cond_br %73, bb7, bb8                           // id: %74

bb7:                                              // Preds: bb6
  %75 = string_literal utf8 "Fatal error"         // user: %77
  %76 = integer_literal $Builtin.Word, 11         // user: %78
  %77 = builtin "ptrtoint_Word"(%75 : $Builtin.RawPointer) : $Builtin.Word // user: %78
  %78 = struct $StaticString (%77 : $Builtin.Word, %76 : $Builtin.Word, %62 : $Builtin.Int8) // user: %82
  %79 = integer_literal $Builtin.Int32, 0         // user: %80
  %80 = struct $UInt32 (%79 : $Builtin.Int32)     // user: %82
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %81 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %82
  %82 = apply %81(%78, %69, %63, %65, %80) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %83

bb8:                                              // Preds: bb6
  %84 = builtin "assumeNonNegative_Int64"(%58 : $Builtin.Int64) : $Builtin.Int64 // users: %170, %85, %93
  %85 = builtin "cmp_eq_Int64"(%84 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %86
  cond_br %85, bb21, bb9                          // id: %86

bb9:                                              // Preds: bb8
  %87 = integer_literal $Builtin.Int64, 1         // user: %161
  %88 = integer_literal $Builtin.Int1, -1         // user: %161
  %89 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %90
  %90 = builtin "sextOrBitCast_Word_Int64"(%89 : $Builtin.Word) : $Builtin.Int64 // users: %168, %91
  %91 = builtin "cmp_slt_Int64"(%90 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %92
  cond_fail %91 : $Builtin.Int1, "Negative value is not representable" // id: %92
  %93 = builtin "cmp_sge_Int64"(%26 : $Builtin.Int64, %84 : $Builtin.Int64) : $Builtin.Int1 // user: %94
  cond_fail %93 : $Builtin.Int1, "loop induction variable overflowed" // id: %94
  br bb11(%26 : $Builtin.Int64)                   // id: %95

bb10:                                             // Preds: bb20 bb4 bb21 bb5
  %96 = tuple ()                                  // user: %97
  return %96 : $()                                // id: %97

// %98                                            // users: %112, %153, %157, %166, %161
bb11(%98 : $Builtin.Int64):                       // Preds: bb9 bb19
  %99 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %115
  %100 = string_literal utf8 "Array index out of range" // user: %102
  %101 = integer_literal $Builtin.Word, 24        // users: %123, %104
  %102 = builtin "ptrtoint_Word"(%100 : $Builtin.RawPointer) : $Builtin.Word // user: %104
  %103 = integer_literal $Builtin.Int8, 2         // users: %146, %129, %123, %137, %108, %104
  %104 = struct $StaticString (%102 : $Builtin.Word, %101 : $Builtin.Word, %103 : $Builtin.Int8) // user: %141
  %105 = string_literal utf8 "Swift/ContiguousArrayBuffer.swift" // user: %107
  %106 = integer_literal $Builtin.Word, 33        // user: %108
  %107 = builtin "ptrtoint_Word"(%105 : $Builtin.RawPointer) : $Builtin.Word // user: %108
  %108 = struct $StaticString (%107 : $Builtin.Word, %106 : $Builtin.Word, %103 : $Builtin.Int8) // user: %141
  %109 = integer_literal $Builtin.Int64, 502      // user: %110
  %110 = struct $UInt (%109 : $Builtin.Int64)     // user: %141
  %111 = integer_literal $Builtin.Int64, 0        // users: %130, %112
  %112 = builtin "cmp_slt_Int64"(%98 : $Builtin.Int64, %111 : $Builtin.Int64) : $Builtin.Int1 // user: %113
  cond_br %112, bb12, bb13                        // id: %113

bb12:                                             // Preds: bb11
  br bb14                                         // id: %114

bb13:                                             // Preds: bb11
  %115 = struct_extract %99 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %158, %116
  %116 = ref_element_addr %115 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %117
  %117 = struct_element_addr %116 : $*_ArrayBody, #_ArrayBody._storage // user: %118
  %118 = struct_element_addr %117 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %119
  %119 = struct_element_addr %118 : $*Int, #Int._value // user: %120
  %120 = load %119 : $*Builtin.Int64              // users: %152, %130
  %121 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %122
  %122 = builtin "ptrtoint_Word"(%121 : $Builtin.RawPointer) : $Builtin.Word // user: %123
  %123 = struct $StaticString (%122 : $Builtin.Word, %101 : $Builtin.Word, %103 : $Builtin.Int8) // user: %150
  %124 = integer_literal $Builtin.Int64, 15505    // user: %125
  %125 = struct $UInt (%124 : $Builtin.Int64)     // user: %150
  %126 = string_literal utf8 ""                   // user: %128
  %127 = integer_literal $Builtin.Word, 0         // user: %129
  %128 = builtin "ptrtoint_Word"(%126 : $Builtin.RawPointer) : $Builtin.Word // user: %129
  %129 = struct $StaticString (%128 : $Builtin.Word, %127 : $Builtin.Word, %103 : $Builtin.Int8) // user: %150
  %130 = builtin "cmp_slt_Int64"(%120 : $Builtin.Int64, %111 : $Builtin.Int64) : $Builtin.Int1 // user: %132
  %131 = integer_literal $Builtin.Int1, 0         // user: %132
  %132 = builtin "int_expect_Int1"(%130 : $Builtin.Int1, %131 : $Builtin.Int1) : $Builtin.Int1 // user: %133
  cond_br %132, bb15, bb16                        // id: %133

bb14:                                             // Preds: bb18 bb12
  %134 = string_literal utf8 "Fatal error"        // user: %136
  %135 = integer_literal $Builtin.Word, 11        // user: %137
  %136 = builtin "ptrtoint_Word"(%134 : $Builtin.RawPointer) : $Builtin.Word // user: %137
  %137 = struct $StaticString (%136 : $Builtin.Word, %135 : $Builtin.Word, %103 : $Builtin.Int8) // user: %141
  %138 = integer_literal $Builtin.Int32, 0        // user: %139
  %139 = struct $UInt32 (%138 : $Builtin.Int32)   // user: %141
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %140 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %141
  %141 = apply %140(%137, %104, %108, %110, %139) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %142

bb15:                                             // Preds: bb13
  %143 = string_literal utf8 "Fatal error"        // user: %145
  %144 = integer_literal $Builtin.Word, 11        // user: %146
  %145 = builtin "ptrtoint_Word"(%143 : $Builtin.RawPointer) : $Builtin.Word // user: %146
  %146 = struct $StaticString (%145 : $Builtin.Word, %144 : $Builtin.Word, %103 : $Builtin.Int8) // user: %150
  %147 = integer_literal $Builtin.Int32, 0        // user: %148
  %148 = struct $UInt32 (%147 : $Builtin.Int32)   // user: %150
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %149 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %150
  %150 = apply %149(%146, %129, %123, %125, %148) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %151

bb16:                                             // Preds: bb13
  %152 = builtin "assumeNonNegative_Int64"(%120 : $Builtin.Int64) : $Builtin.Int64 // user: %153
  %153 = builtin "cmp_slt_Int64"(%98 : $Builtin.Int64, %152 : $Builtin.Int64) : $Builtin.Int1 // user: %155
  %154 = integer_literal $Builtin.Int1, -1        // user: %155
  %155 = builtin "int_expect_Int1"(%153 : $Builtin.Int1, %154 : $Builtin.Int1) : $Builtin.Int1 // user: %156
  cond_br %155, bb17, bb18                        // id: %156

bb17:                                             // Preds: bb16
  %157 = builtin "truncOrBitCast_Int64_Word"(%98 : $Builtin.Int64) : $Builtin.Word // user: %159
  %158 = ref_tail_addr [immutable] %115 : $__ContiguousArrayStorageBase, $UInt8 // user: %159
  %159 = index_addr [stack_protection] %158 : $*UInt8, %157 : $Builtin.Word // user: %160
  %160 = load %159 : $*UInt8                      // user: %164
  %161 = builtin "sadd_with_overflow_Int64"(%98 : $Builtin.Int64, %87 : $Builtin.Int64, %88 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %162
  %162 = tuple_extract %161 : $(Builtin.Int64, Builtin.Int1), 0 // users: %173, %170
  %163 = alloc_stack $UInt8                       // users: %169, %165, %164
  store %160 to %163 : $*UInt8                    // id: %164
  %165 = address_to_pointer [stack_protection] %163 : $*UInt8 to $Builtin.RawPointer // user: %168
  %166 = builtin "truncOrBitCast_Int64_Word"(%98 : $Builtin.Int64) : $Builtin.Word // user: %167
  %167 = index_raw_pointer %42 : $Builtin.RawPointer, %166 : $Builtin.Word // user: %168
  %168 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%167 : $Builtin.RawPointer, %165 : $Builtin.RawPointer, %90 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %163 : $*UInt8                    // id: %169
  %170 = builtin "cmp_eq_Int64"(%162 : $Builtin.Int64, %84 : $Builtin.Int64) : $Builtin.Int1 // user: %171
  cond_br %170, bb20, bb19                        // id: %171

bb18:                                             // Preds: bb16
  br bb14                                         // id: %172

bb19:                                             // Preds: bb17
  br bb11(%162 : $Builtin.Int64)                  // id: %173

bb20:                                             // Preds: bb17
  br bb10                                         // id: %174

bb21:                                             // Preds: bb8
  br bb10                                         // id: %175
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #12239, stage MidLevel,Function, pass 15: HighLevelLICM (high-level-licm)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy]
// %0                                             // users: %95, %52, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %93, %108, %85, %91, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %168, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %167, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb10                                         // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb10                                         // id: %51

bb6:                                              // Preds: bb3
  %52 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %53
  %53 = struct_extract %52 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %54
  %54 = ref_element_addr [immutable] %53 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %55
  %55 = struct_element_addr %54 : $*_ArrayBody, #_ArrayBody._storage // user: %56
  %56 = struct_element_addr %55 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %57
  %57 = struct_element_addr %56 : $*Int, #Int._value // user: %58
  %58 = load %57 : $*Builtin.Int64                // users: %84, %71
  %59 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %61
  %60 = integer_literal $Builtin.Word, 24         // user: %63
  %61 = builtin "ptrtoint_Word"(%59 : $Builtin.RawPointer) : $Builtin.Word // user: %63
  %62 = integer_literal $Builtin.Int8, 2          // users: %78, %69, %63
  %63 = struct $StaticString (%61 : $Builtin.Word, %60 : $Builtin.Word, %62 : $Builtin.Int8) // user: %82
  %64 = integer_literal $Builtin.Int64, 15505     // user: %65
  %65 = struct $UInt (%64 : $Builtin.Int64)       // user: %82
  %66 = string_literal utf8 ""                    // user: %68
  %67 = integer_literal $Builtin.Word, 0          // user: %69
  %68 = builtin "ptrtoint_Word"(%66 : $Builtin.RawPointer) : $Builtin.Word // user: %69
  %69 = struct $StaticString (%68 : $Builtin.Word, %67 : $Builtin.Word, %62 : $Builtin.Int8) // user: %82
  %70 = integer_literal $Builtin.Int64, 0         // user: %71
  %71 = builtin "cmp_slt_Int64"(%58 : $Builtin.Int64, %70 : $Builtin.Int64) : $Builtin.Int1 // user: %73
  %72 = integer_literal $Builtin.Int1, 0          // user: %73
  %73 = builtin "int_expect_Int1"(%71 : $Builtin.Int1, %72 : $Builtin.Int1) : $Builtin.Int1 // user: %74
  cond_br %73, bb7, bb8                           // id: %74

bb7:                                              // Preds: bb6
  %75 = string_literal utf8 "Fatal error"         // user: %77
  %76 = integer_literal $Builtin.Word, 11         // user: %78
  %77 = builtin "ptrtoint_Word"(%75 : $Builtin.RawPointer) : $Builtin.Word // user: %78
  %78 = struct $StaticString (%77 : $Builtin.Word, %76 : $Builtin.Word, %62 : $Builtin.Int8) // user: %82
  %79 = integer_literal $Builtin.Int32, 0         // user: %80
  %80 = struct $UInt32 (%79 : $Builtin.Int32)     // user: %82
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %81 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %82
  %82 = apply %81(%78, %69, %63, %65, %80) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %83

bb8:                                              // Preds: bb6
  %84 = builtin "assumeNonNegative_Int64"(%58 : $Builtin.Int64) : $Builtin.Int64 // users: %170, %85, %93
  %85 = builtin "cmp_eq_Int64"(%84 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %86
  cond_br %85, bb21, bb9                          // id: %86

bb9:                                              // Preds: bb8
  %87 = integer_literal $Builtin.Int64, 1         // user: %161
  %88 = integer_literal $Builtin.Int1, -1         // user: %161
  %89 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %90
  %90 = builtin "sextOrBitCast_Word_Int64"(%89 : $Builtin.Word) : $Builtin.Int64 // users: %168, %91
  %91 = builtin "cmp_slt_Int64"(%90 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %92
  cond_fail %91 : $Builtin.Int1, "Negative value is not representable" // id: %92
  %93 = builtin "cmp_sge_Int64"(%26 : $Builtin.Int64, %84 : $Builtin.Int64) : $Builtin.Int1 // user: %94
  cond_fail %93 : $Builtin.Int1, "loop induction variable overflowed" // id: %94
  %95 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %115
  %96 = string_literal utf8 "Array index out of range" // user: %98
  %97 = integer_literal $Builtin.Word, 24         // users: %123, %100
  %98 = builtin "ptrtoint_Word"(%96 : $Builtin.RawPointer) : $Builtin.Word // user: %100
  %99 = integer_literal $Builtin.Int8, 2          // users: %146, %129, %123, %137, %104, %100
  %100 = struct $StaticString (%98 : $Builtin.Word, %97 : $Builtin.Word, %99 : $Builtin.Int8) // user: %141
  %101 = string_literal utf8 "Swift/ContiguousArrayBuffer.swift" // user: %103
  %102 = integer_literal $Builtin.Word, 33        // user: %104
  %103 = builtin "ptrtoint_Word"(%101 : $Builtin.RawPointer) : $Builtin.Word // user: %104
  %104 = struct $StaticString (%103 : $Builtin.Word, %102 : $Builtin.Word, %99 : $Builtin.Int8) // user: %141
  %105 = integer_literal $Builtin.Int64, 502      // user: %106
  %106 = struct $UInt (%105 : $Builtin.Int64)     // user: %141
  %107 = integer_literal $Builtin.Int64, 0        // users: %130, %112
  br bb11(%26 : $Builtin.Int64)                   // id: %108

bb10:                                             // Preds: bb20 bb4 bb21 bb5
  %109 = tuple ()                                 // user: %110
  return %109 : $()                               // id: %110

// %111                                           // users: %112, %153, %157, %166, %161
bb11(%111 : $Builtin.Int64):                      // Preds: bb9 bb19
  %112 = builtin "cmp_slt_Int64"(%111 : $Builtin.Int64, %107 : $Builtin.Int64) : $Builtin.Int1 // user: %113
  cond_br %112, bb12, bb13                        // id: %113

bb12:                                             // Preds: bb11
  br bb14                                         // id: %114

bb13:                                             // Preds: bb11
  %115 = struct_extract %95 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %158, %116
  %116 = ref_element_addr %115 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %117
  %117 = struct_element_addr %116 : $*_ArrayBody, #_ArrayBody._storage // user: %118
  %118 = struct_element_addr %117 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %119
  %119 = struct_element_addr %118 : $*Int, #Int._value // user: %120
  %120 = load %119 : $*Builtin.Int64              // users: %152, %130
  %121 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %122
  %122 = builtin "ptrtoint_Word"(%121 : $Builtin.RawPointer) : $Builtin.Word // user: %123
  %123 = struct $StaticString (%122 : $Builtin.Word, %97 : $Builtin.Word, %99 : $Builtin.Int8) // user: %150
  %124 = integer_literal $Builtin.Int64, 15505    // user: %125
  %125 = struct $UInt (%124 : $Builtin.Int64)     // user: %150
  %126 = string_literal utf8 ""                   // user: %128
  %127 = integer_literal $Builtin.Word, 0         // user: %129
  %128 = builtin "ptrtoint_Word"(%126 : $Builtin.RawPointer) : $Builtin.Word // user: %129
  %129 = struct $StaticString (%128 : $Builtin.Word, %127 : $Builtin.Word, %99 : $Builtin.Int8) // user: %150
  %130 = builtin "cmp_slt_Int64"(%120 : $Builtin.Int64, %107 : $Builtin.Int64) : $Builtin.Int1 // user: %132
  %131 = integer_literal $Builtin.Int1, 0         // user: %132
  %132 = builtin "int_expect_Int1"(%130 : $Builtin.Int1, %131 : $Builtin.Int1) : $Builtin.Int1 // user: %133
  cond_br %132, bb15, bb16                        // id: %133

bb14:                                             // Preds: bb18 bb12
  %134 = string_literal utf8 "Fatal error"        // user: %136
  %135 = integer_literal $Builtin.Word, 11        // user: %137
  %136 = builtin "ptrtoint_Word"(%134 : $Builtin.RawPointer) : $Builtin.Word // user: %137
  %137 = struct $StaticString (%136 : $Builtin.Word, %135 : $Builtin.Word, %99 : $Builtin.Int8) // user: %141
  %138 = integer_literal $Builtin.Int32, 0        // user: %139
  %139 = struct $UInt32 (%138 : $Builtin.Int32)   // user: %141
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %140 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %141
  %141 = apply %140(%137, %100, %104, %106, %139) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %142

bb15:                                             // Preds: bb13
  %143 = string_literal utf8 "Fatal error"        // user: %145
  %144 = integer_literal $Builtin.Word, 11        // user: %146
  %145 = builtin "ptrtoint_Word"(%143 : $Builtin.RawPointer) : $Builtin.Word // user: %146
  %146 = struct $StaticString (%145 : $Builtin.Word, %144 : $Builtin.Word, %99 : $Builtin.Int8) // user: %150
  %147 = integer_literal $Builtin.Int32, 0        // user: %148
  %148 = struct $UInt32 (%147 : $Builtin.Int32)   // user: %150
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %149 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %150
  %150 = apply %149(%146, %129, %123, %125, %148) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %151

bb16:                                             // Preds: bb13
  %152 = builtin "assumeNonNegative_Int64"(%120 : $Builtin.Int64) : $Builtin.Int64 // user: %153
  %153 = builtin "cmp_slt_Int64"(%111 : $Builtin.Int64, %152 : $Builtin.Int64) : $Builtin.Int1 // user: %155
  %154 = integer_literal $Builtin.Int1, -1        // user: %155
  %155 = builtin "int_expect_Int1"(%153 : $Builtin.Int1, %154 : $Builtin.Int1) : $Builtin.Int1 // user: %156
  cond_br %155, bb17, bb18                        // id: %156

bb17:                                             // Preds: bb16
  %157 = builtin "truncOrBitCast_Int64_Word"(%111 : $Builtin.Int64) : $Builtin.Word // user: %159
  %158 = ref_tail_addr [immutable] %115 : $__ContiguousArrayStorageBase, $UInt8 // user: %159
  %159 = index_addr [stack_protection] %158 : $*UInt8, %157 : $Builtin.Word // user: %160
  %160 = load %159 : $*UInt8                      // user: %164
  %161 = builtin "sadd_with_overflow_Int64"(%111 : $Builtin.Int64, %87 : $Builtin.Int64, %88 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %162
  %162 = tuple_extract %161 : $(Builtin.Int64, Builtin.Int1), 0 // users: %173, %170
  %163 = alloc_stack $UInt8                       // users: %169, %165, %164
  store %160 to %163 : $*UInt8                    // id: %164
  %165 = address_to_pointer [stack_protection] %163 : $*UInt8 to $Builtin.RawPointer // user: %168
  %166 = builtin "truncOrBitCast_Int64_Word"(%111 : $Builtin.Int64) : $Builtin.Word // user: %167
  %167 = index_raw_pointer %42 : $Builtin.RawPointer, %166 : $Builtin.Word // user: %168
  %168 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%167 : $Builtin.RawPointer, %165 : $Builtin.RawPointer, %90 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %163 : $*UInt8                    // id: %169
  %170 = builtin "cmp_eq_Int64"(%162 : $Builtin.Int64, %84 : $Builtin.Int64) : $Builtin.Int1 // user: %171
  cond_br %170, bb20, bb19                        // id: %171

bb18:                                             // Preds: bb16
  br bb14                                         // id: %172

bb19:                                             // Preds: bb17
  br bb11(%162 : $Builtin.Int64)                  // id: %173

bb20:                                             // Preds: bb17
  br bb10                                         // id: %174

bb21:                                             // Preds: bb8
  br bb10                                         // id: %175
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #12242, stage MidLevel,Function, pass 18: DCE (dce)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy]
// %0                                             // users: %95, %52, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %93, %108, %85, %91, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %168, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %167, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb10                                         // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb10                                         // id: %51

bb6:                                              // Preds: bb3
  %52 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %53
  %53 = struct_extract %52 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %54
  %54 = ref_element_addr [immutable] %53 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %55
  %55 = struct_element_addr %54 : $*_ArrayBody, #_ArrayBody._storage // user: %56
  %56 = struct_element_addr %55 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %57
  %57 = struct_element_addr %56 : $*Int, #Int._value // user: %58
  %58 = load %57 : $*Builtin.Int64                // users: %84, %71
  %59 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %61
  %60 = integer_literal $Builtin.Word, 24         // user: %63
  %61 = builtin "ptrtoint_Word"(%59 : $Builtin.RawPointer) : $Builtin.Word // user: %63
  %62 = integer_literal $Builtin.Int8, 2          // users: %78, %69, %63
  %63 = struct $StaticString (%61 : $Builtin.Word, %60 : $Builtin.Word, %62 : $Builtin.Int8) // user: %82
  %64 = integer_literal $Builtin.Int64, 15505     // user: %65
  %65 = struct $UInt (%64 : $Builtin.Int64)       // user: %82
  %66 = string_literal utf8 ""                    // user: %68
  %67 = integer_literal $Builtin.Word, 0          // user: %69
  %68 = builtin "ptrtoint_Word"(%66 : $Builtin.RawPointer) : $Builtin.Word // user: %69
  %69 = struct $StaticString (%68 : $Builtin.Word, %67 : $Builtin.Word, %62 : $Builtin.Int8) // user: %82
  %70 = integer_literal $Builtin.Int64, 0         // user: %71
  %71 = builtin "cmp_slt_Int64"(%58 : $Builtin.Int64, %70 : $Builtin.Int64) : $Builtin.Int1 // user: %73
  %72 = integer_literal $Builtin.Int1, 0          // user: %73
  %73 = builtin "int_expect_Int1"(%71 : $Builtin.Int1, %72 : $Builtin.Int1) : $Builtin.Int1 // user: %74
  cond_br %73, bb7, bb8                           // id: %74

bb7:                                              // Preds: bb6
  %75 = string_literal utf8 "Fatal error"         // user: %77
  %76 = integer_literal $Builtin.Word, 11         // user: %78
  %77 = builtin "ptrtoint_Word"(%75 : $Builtin.RawPointer) : $Builtin.Word // user: %78
  %78 = struct $StaticString (%77 : $Builtin.Word, %76 : $Builtin.Word, %62 : $Builtin.Int8) // user: %82
  %79 = integer_literal $Builtin.Int32, 0         // user: %80
  %80 = struct $UInt32 (%79 : $Builtin.Int32)     // user: %82
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %81 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %82
  %82 = apply %81(%78, %69, %63, %65, %80) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %83

bb8:                                              // Preds: bb6
  %84 = builtin "assumeNonNegative_Int64"(%58 : $Builtin.Int64) : $Builtin.Int64 // users: %170, %85, %93
  %85 = builtin "cmp_eq_Int64"(%84 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %86
  cond_br %85, bb21, bb9                          // id: %86

bb9:                                              // Preds: bb8
  %87 = integer_literal $Builtin.Int64, 1         // user: %161
  %88 = integer_literal $Builtin.Int1, -1         // user: %161
  %89 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %90
  %90 = builtin "sextOrBitCast_Word_Int64"(%89 : $Builtin.Word) : $Builtin.Int64 // users: %168, %91
  %91 = builtin "cmp_slt_Int64"(%90 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %92
  cond_fail %91 : $Builtin.Int1, "Negative value is not representable" // id: %92
  %93 = builtin "cmp_sge_Int64"(%26 : $Builtin.Int64, %84 : $Builtin.Int64) : $Builtin.Int1 // user: %94
  cond_fail %93 : $Builtin.Int1, "loop induction variable overflowed" // id: %94
  %95 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %115
  %96 = string_literal utf8 "Array index out of range" // user: %98
  %97 = integer_literal $Builtin.Word, 24         // users: %123, %100
  %98 = builtin "ptrtoint_Word"(%96 : $Builtin.RawPointer) : $Builtin.Word // user: %100
  %99 = integer_literal $Builtin.Int8, 2          // users: %146, %129, %123, %137, %104, %100
  %100 = struct $StaticString (%98 : $Builtin.Word, %97 : $Builtin.Word, %99 : $Builtin.Int8) // user: %141
  %101 = string_literal utf8 "Swift/ContiguousArrayBuffer.swift" // user: %103
  %102 = integer_literal $Builtin.Word, 33        // user: %104
  %103 = builtin "ptrtoint_Word"(%101 : $Builtin.RawPointer) : $Builtin.Word // user: %104
  %104 = struct $StaticString (%103 : $Builtin.Word, %102 : $Builtin.Word, %99 : $Builtin.Int8) // user: %141
  %105 = integer_literal $Builtin.Int64, 502      // user: %106
  %106 = struct $UInt (%105 : $Builtin.Int64)     // user: %141
  %107 = integer_literal $Builtin.Int64, 0        // users: %130, %112
  br bb11(%26 : $Builtin.Int64)                   // id: %108

bb10:                                             // Preds: bb20 bb4 bb21 bb5
  %109 = tuple ()                                 // user: %110
  return %109 : $()                               // id: %110

// %111                                           // users: %112, %153, %157, %166, %161
bb11(%111 : $Builtin.Int64):                      // Preds: bb9 bb19
  %112 = builtin "cmp_slt_Int64"(%111 : $Builtin.Int64, %107 : $Builtin.Int64) : $Builtin.Int1 // user: %113
  cond_br %112, bb12, bb13                        // id: %113

bb12:                                             // Preds: bb11
  br bb14                                         // id: %114

bb13:                                             // Preds: bb11
  %115 = struct_extract %95 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %158, %116
  %116 = ref_element_addr %115 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %117
  %117 = struct_element_addr %116 : $*_ArrayBody, #_ArrayBody._storage // user: %118
  %118 = struct_element_addr %117 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %119
  %119 = struct_element_addr %118 : $*Int, #Int._value // user: %120
  %120 = load %119 : $*Builtin.Int64              // users: %152, %130
  %121 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %122
  %122 = builtin "ptrtoint_Word"(%121 : $Builtin.RawPointer) : $Builtin.Word // user: %123
  %123 = struct $StaticString (%122 : $Builtin.Word, %97 : $Builtin.Word, %99 : $Builtin.Int8) // user: %150
  %124 = integer_literal $Builtin.Int64, 15505    // user: %125
  %125 = struct $UInt (%124 : $Builtin.Int64)     // user: %150
  %126 = string_literal utf8 ""                   // user: %128
  %127 = integer_literal $Builtin.Word, 0         // user: %129
  %128 = builtin "ptrtoint_Word"(%126 : $Builtin.RawPointer) : $Builtin.Word // user: %129
  %129 = struct $StaticString (%128 : $Builtin.Word, %127 : $Builtin.Word, %99 : $Builtin.Int8) // user: %150
  %130 = builtin "cmp_slt_Int64"(%120 : $Builtin.Int64, %107 : $Builtin.Int64) : $Builtin.Int1 // user: %132
  %131 = integer_literal $Builtin.Int1, 0         // user: %132
  %132 = builtin "int_expect_Int1"(%130 : $Builtin.Int1, %131 : $Builtin.Int1) : $Builtin.Int1 // user: %133
  cond_br %132, bb15, bb16                        // id: %133

bb14:                                             // Preds: bb18 bb12
  %134 = string_literal utf8 "Fatal error"        // user: %136
  %135 = integer_literal $Builtin.Word, 11        // user: %137
  %136 = builtin "ptrtoint_Word"(%134 : $Builtin.RawPointer) : $Builtin.Word // user: %137
  %137 = struct $StaticString (%136 : $Builtin.Word, %135 : $Builtin.Word, %99 : $Builtin.Int8) // user: %141
  %138 = integer_literal $Builtin.Int32, 0        // user: %139
  %139 = struct $UInt32 (%138 : $Builtin.Int32)   // user: %141
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %140 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %141
  %141 = apply %140(%137, %100, %104, %106, %139) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %142

bb15:                                             // Preds: bb13
  %143 = string_literal utf8 "Fatal error"        // user: %145
  %144 = integer_literal $Builtin.Word, 11        // user: %146
  %145 = builtin "ptrtoint_Word"(%143 : $Builtin.RawPointer) : $Builtin.Word // user: %146
  %146 = struct $StaticString (%145 : $Builtin.Word, %144 : $Builtin.Word, %99 : $Builtin.Int8) // user: %150
  %147 = integer_literal $Builtin.Int32, 0        // user: %148
  %148 = struct $UInt32 (%147 : $Builtin.Int32)   // user: %150
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %149 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %150
  %150 = apply %149(%146, %129, %123, %125, %148) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %151

bb16:                                             // Preds: bb13
  %152 = builtin "assumeNonNegative_Int64"(%120 : $Builtin.Int64) : $Builtin.Int64 // user: %153
  %153 = builtin "cmp_slt_Int64"(%111 : $Builtin.Int64, %152 : $Builtin.Int64) : $Builtin.Int1 // user: %155
  %154 = integer_literal $Builtin.Int1, -1        // user: %155
  %155 = builtin "int_expect_Int1"(%153 : $Builtin.Int1, %154 : $Builtin.Int1) : $Builtin.Int1 // user: %156
  cond_br %155, bb17, bb18                        // id: %156

bb17:                                             // Preds: bb16
  %157 = builtin "truncOrBitCast_Int64_Word"(%111 : $Builtin.Int64) : $Builtin.Word // user: %159
  %158 = ref_tail_addr [immutable] %115 : $__ContiguousArrayStorageBase, $UInt8 // user: %159
  %159 = index_addr [stack_protection] %158 : $*UInt8, %157 : $Builtin.Word // user: %160
  %160 = load %159 : $*UInt8                      // user: %164
  %161 = builtin "sadd_with_overflow_Int64"(%111 : $Builtin.Int64, %87 : $Builtin.Int64, %88 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %162
  %162 = tuple_extract %161 : $(Builtin.Int64, Builtin.Int1), 0 // users: %173, %170
  %163 = alloc_stack $UInt8                       // users: %169, %165, %164
  store %160 to %163 : $*UInt8                    // id: %164
  %165 = address_to_pointer [stack_protection] %163 : $*UInt8 to $Builtin.RawPointer // user: %168
  %166 = builtin "truncOrBitCast_Int64_Word"(%111 : $Builtin.Int64) : $Builtin.Word // user: %167
  %167 = index_raw_pointer %42 : $Builtin.RawPointer, %166 : $Builtin.Word // user: %168
  %168 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%167 : $Builtin.RawPointer, %165 : $Builtin.RawPointer, %90 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %163 : $*UInt8                    // id: %169
  %170 = builtin "cmp_eq_Int64"(%162 : $Builtin.Int64, %84 : $Builtin.Int64) : $Builtin.Int1 // user: %171
  cond_br %170, bb20, bb19                        // id: %171

bb18:                                             // Preds: bb16
  br bb14                                         // id: %172

bb19:                                             // Preds: bb17
  br bb11(%162 : $Builtin.Int64)                  // id: %173

bb20:                                             // Preds: bb17
  br bb10                                         // id: %174

bb21:                                             // Preds: bb8
  br bb10                                         // id: %175
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #12244, stage MidLevel,Function, pass 20: DCE (dce)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy]
// %0                                             // users: %95, %52, %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // user: %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // user: %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %93, %108, %85, %91, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %168, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %167, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb10                                         // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb10                                         // id: %51

bb6:                                              // Preds: bb3
  %52 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %53
  %53 = struct_extract %52 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %54
  %54 = ref_element_addr [immutable] %53 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %55
  %55 = struct_element_addr %54 : $*_ArrayBody, #_ArrayBody._storage // user: %56
  %56 = struct_element_addr %55 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %57
  %57 = struct_element_addr %56 : $*Int, #Int._value // user: %58
  %58 = load %57 : $*Builtin.Int64                // users: %84, %71
  %59 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %61
  %60 = integer_literal $Builtin.Word, 24         // user: %63
  %61 = builtin "ptrtoint_Word"(%59 : $Builtin.RawPointer) : $Builtin.Word // user: %63
  %62 = integer_literal $Builtin.Int8, 2          // users: %78, %69, %63
  %63 = struct $StaticString (%61 : $Builtin.Word, %60 : $Builtin.Word, %62 : $Builtin.Int8) // user: %82
  %64 = integer_literal $Builtin.Int64, 15505     // user: %65
  %65 = struct $UInt (%64 : $Builtin.Int64)       // user: %82
  %66 = string_literal utf8 ""                    // user: %68
  %67 = integer_literal $Builtin.Word, 0          // user: %69
  %68 = builtin "ptrtoint_Word"(%66 : $Builtin.RawPointer) : $Builtin.Word // user: %69
  %69 = struct $StaticString (%68 : $Builtin.Word, %67 : $Builtin.Word, %62 : $Builtin.Int8) // user: %82
  %70 = integer_literal $Builtin.Int64, 0         // user: %71
  %71 = builtin "cmp_slt_Int64"(%58 : $Builtin.Int64, %70 : $Builtin.Int64) : $Builtin.Int1 // user: %73
  %72 = integer_literal $Builtin.Int1, 0          // user: %73
  %73 = builtin "int_expect_Int1"(%71 : $Builtin.Int1, %72 : $Builtin.Int1) : $Builtin.Int1 // user: %74
  cond_br %73, bb7, bb8                           // id: %74

bb7:                                              // Preds: bb6
  %75 = string_literal utf8 "Fatal error"         // user: %77
  %76 = integer_literal $Builtin.Word, 11         // user: %78
  %77 = builtin "ptrtoint_Word"(%75 : $Builtin.RawPointer) : $Builtin.Word // user: %78
  %78 = struct $StaticString (%77 : $Builtin.Word, %76 : $Builtin.Word, %62 : $Builtin.Int8) // user: %82
  %79 = integer_literal $Builtin.Int32, 0         // user: %80
  %80 = struct $UInt32 (%79 : $Builtin.Int32)     // user: %82
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %81 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %82
  %82 = apply %81(%78, %69, %63, %65, %80) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %83

bb8:                                              // Preds: bb6
  %84 = builtin "assumeNonNegative_Int64"(%58 : $Builtin.Int64) : $Builtin.Int64 // users: %170, %85, %93
  %85 = builtin "cmp_eq_Int64"(%84 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %86
  cond_br %85, bb21, bb9                          // id: %86

bb9:                                              // Preds: bb8
  %87 = integer_literal $Builtin.Int64, 1         // user: %161
  %88 = integer_literal $Builtin.Int1, -1         // user: %161
  %89 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %90
  %90 = builtin "sextOrBitCast_Word_Int64"(%89 : $Builtin.Word) : $Builtin.Int64 // users: %168, %91
  %91 = builtin "cmp_slt_Int64"(%90 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %92
  cond_fail %91 : $Builtin.Int1, "Negative value is not representable" // id: %92
  %93 = builtin "cmp_sge_Int64"(%26 : $Builtin.Int64, %84 : $Builtin.Int64) : $Builtin.Int1 // user: %94
  cond_fail %93 : $Builtin.Int1, "loop induction variable overflowed" // id: %94
  %95 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %115
  %96 = string_literal utf8 "Array index out of range" // user: %98
  %97 = integer_literal $Builtin.Word, 24         // users: %123, %100
  %98 = builtin "ptrtoint_Word"(%96 : $Builtin.RawPointer) : $Builtin.Word // user: %100
  %99 = integer_literal $Builtin.Int8, 2          // users: %146, %129, %123, %137, %104, %100
  %100 = struct $StaticString (%98 : $Builtin.Word, %97 : $Builtin.Word, %99 : $Builtin.Int8) // user: %141
  %101 = string_literal utf8 "Swift/ContiguousArrayBuffer.swift" // user: %103
  %102 = integer_literal $Builtin.Word, 33        // user: %104
  %103 = builtin "ptrtoint_Word"(%101 : $Builtin.RawPointer) : $Builtin.Word // user: %104
  %104 = struct $StaticString (%103 : $Builtin.Word, %102 : $Builtin.Word, %99 : $Builtin.Int8) // user: %141
  %105 = integer_literal $Builtin.Int64, 502      // user: %106
  %106 = struct $UInt (%105 : $Builtin.Int64)     // user: %141
  %107 = integer_literal $Builtin.Int64, 0        // users: %130, %112
  br bb11(%26 : $Builtin.Int64)                   // id: %108

bb10:                                             // Preds: bb20 bb4 bb21 bb5
  %109 = tuple ()                                 // user: %110
  return %109 : $()                               // id: %110

// %111                                           // users: %112, %153, %157, %166, %161
bb11(%111 : $Builtin.Int64):                      // Preds: bb9 bb19
  %112 = builtin "cmp_slt_Int64"(%111 : $Builtin.Int64, %107 : $Builtin.Int64) : $Builtin.Int1 // user: %113
  cond_br %112, bb12, bb13                        // id: %113

bb12:                                             // Preds: bb11
  br bb14                                         // id: %114

bb13:                                             // Preds: bb11
  %115 = struct_extract %95 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %158, %116
  %116 = ref_element_addr %115 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %117
  %117 = struct_element_addr %116 : $*_ArrayBody, #_ArrayBody._storage // user: %118
  %118 = struct_element_addr %117 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %119
  %119 = struct_element_addr %118 : $*Int, #Int._value // user: %120
  %120 = load %119 : $*Builtin.Int64              // users: %152, %130
  %121 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %122
  %122 = builtin "ptrtoint_Word"(%121 : $Builtin.RawPointer) : $Builtin.Word // user: %123
  %123 = struct $StaticString (%122 : $Builtin.Word, %97 : $Builtin.Word, %99 : $Builtin.Int8) // user: %150
  %124 = integer_literal $Builtin.Int64, 15505    // user: %125
  %125 = struct $UInt (%124 : $Builtin.Int64)     // user: %150
  %126 = string_literal utf8 ""                   // user: %128
  %127 = integer_literal $Builtin.Word, 0         // user: %129
  %128 = builtin "ptrtoint_Word"(%126 : $Builtin.RawPointer) : $Builtin.Word // user: %129
  %129 = struct $StaticString (%128 : $Builtin.Word, %127 : $Builtin.Word, %99 : $Builtin.Int8) // user: %150
  %130 = builtin "cmp_slt_Int64"(%120 : $Builtin.Int64, %107 : $Builtin.Int64) : $Builtin.Int1 // user: %132
  %131 = integer_literal $Builtin.Int1, 0         // user: %132
  %132 = builtin "int_expect_Int1"(%130 : $Builtin.Int1, %131 : $Builtin.Int1) : $Builtin.Int1 // user: %133
  cond_br %132, bb15, bb16                        // id: %133

bb14:                                             // Preds: bb18 bb12
  %134 = string_literal utf8 "Fatal error"        // user: %136
  %135 = integer_literal $Builtin.Word, 11        // user: %137
  %136 = builtin "ptrtoint_Word"(%134 : $Builtin.RawPointer) : $Builtin.Word // user: %137
  %137 = struct $StaticString (%136 : $Builtin.Word, %135 : $Builtin.Word, %99 : $Builtin.Int8) // user: %141
  %138 = integer_literal $Builtin.Int32, 0        // user: %139
  %139 = struct $UInt32 (%138 : $Builtin.Int32)   // user: %141
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %140 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %141
  %141 = apply %140(%137, %100, %104, %106, %139) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %142

bb15:                                             // Preds: bb13
  %143 = string_literal utf8 "Fatal error"        // user: %145
  %144 = integer_literal $Builtin.Word, 11        // user: %146
  %145 = builtin "ptrtoint_Word"(%143 : $Builtin.RawPointer) : $Builtin.Word // user: %146
  %146 = struct $StaticString (%145 : $Builtin.Word, %144 : $Builtin.Word, %99 : $Builtin.Int8) // user: %150
  %147 = integer_literal $Builtin.Int32, 0        // user: %148
  %148 = struct $UInt32 (%147 : $Builtin.Int32)   // user: %150
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %149 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %150
  %150 = apply %149(%146, %129, %123, %125, %148) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %151

bb16:                                             // Preds: bb13
  %152 = builtin "assumeNonNegative_Int64"(%120 : $Builtin.Int64) : $Builtin.Int64 // user: %153
  %153 = builtin "cmp_slt_Int64"(%111 : $Builtin.Int64, %152 : $Builtin.Int64) : $Builtin.Int1 // user: %155
  %154 = integer_literal $Builtin.Int1, -1        // user: %155
  %155 = builtin "int_expect_Int1"(%153 : $Builtin.Int1, %154 : $Builtin.Int1) : $Builtin.Int1 // user: %156
  cond_br %155, bb17, bb18                        // id: %156

bb17:                                             // Preds: bb16
  %157 = builtin "truncOrBitCast_Int64_Word"(%111 : $Builtin.Int64) : $Builtin.Word // user: %159
  %158 = ref_tail_addr [immutable] %115 : $__ContiguousArrayStorageBase, $UInt8 // user: %159
  %159 = index_addr [stack_protection] %158 : $*UInt8, %157 : $Builtin.Word // user: %160
  %160 = load %159 : $*UInt8                      // user: %164
  %161 = builtin "sadd_with_overflow_Int64"(%111 : $Builtin.Int64, %87 : $Builtin.Int64, %88 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %162
  %162 = tuple_extract %161 : $(Builtin.Int64, Builtin.Int1), 0 // users: %173, %170
  %163 = alloc_stack $UInt8                       // users: %169, %165, %164
  store %160 to %163 : $*UInt8                    // id: %164
  %165 = address_to_pointer [stack_protection] %163 : $*UInt8 to $Builtin.RawPointer // user: %168
  %166 = builtin "truncOrBitCast_Int64_Word"(%111 : $Builtin.Int64) : $Builtin.Word // user: %167
  %167 = index_raw_pointer %42 : $Builtin.RawPointer, %166 : $Builtin.Word // user: %168
  %168 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%167 : $Builtin.RawPointer, %165 : $Builtin.RawPointer, %90 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %163 : $*UInt8                    // id: %169
  %170 = builtin "cmp_eq_Int64"(%162 : $Builtin.Int64, %84 : $Builtin.Int64) : $Builtin.Int1 // user: %171
  cond_br %170, bb20, bb19                        // id: %171

bb18:                                             // Preds: bb16
  br bb14                                         // id: %172

bb19:                                             // Preds: bb17
  br bb11(%162 : $Builtin.Int64)                  // id: %173

bb20:                                             // Preds: bb17
  br bb10                                         // id: %174

bb21:                                             // Preds: bb8
  br bb10                                         // id: %175
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #12261, stage MidLevel,Function, pass 38: CSE (cse)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy]
// %0                                             // user: %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // users: %119, %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // users: %92, %52, %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // users: %78, %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %78, %82, %99, %108, %59, %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // users: %112, %63, %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // users: %112, %63, %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // users: %112, %63, %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %89, %93, %53, %74, %85, %66, %72, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %94, %54, %127, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %126, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb10                                         // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb10                                         // id: %51

bb6:                                              // Preds: bb3
  %52 = load %13 : $*Builtin.Int64                // users: %65, %53
  %53 = builtin "cmp_slt_Int64"(%52 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %54
  %54 = builtin "int_expect_Int1"(%53 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %55
  cond_br %54, bb7, bb8                           // id: %55

bb7:                                              // Preds: bb6
  %56 = string_literal utf8 "Fatal error"         // user: %58
  %57 = integer_literal $Builtin.Word, 11         // user: %59
  %58 = builtin "ptrtoint_Word"(%56 : $Builtin.RawPointer) : $Builtin.Word // user: %59
  %59 = struct $StaticString (%58 : $Builtin.Word, %57 : $Builtin.Word, %18 : $Builtin.Int8) // user: %63
  %60 = integer_literal $Builtin.Int32, 0         // user: %61
  %61 = struct $UInt32 (%60 : $Builtin.Int32)     // user: %63
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %62 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %63
  %63 = apply %62(%59, %25, %19, %21, %61) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %64

bb8:                                              // Preds: bb6
  %65 = builtin "assumeNonNegative_Int64"(%52 : $Builtin.Int64) : $Builtin.Int64 // users: %129, %66, %74
  %66 = builtin "cmp_eq_Int64"(%65 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %67
  cond_br %66, bb21, bb9                          // id: %67

bb9:                                              // Preds: bb8
  %68 = integer_literal $Builtin.Int64, 1         // user: %121
  %69 = integer_literal $Builtin.Int1, -1         // users: %116, %121
  %70 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %71
  %71 = builtin "sextOrBitCast_Word_Int64"(%70 : $Builtin.Word) : $Builtin.Int64 // users: %127, %72
  %72 = builtin "cmp_slt_Int64"(%71 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %73
  cond_fail %72 : $Builtin.Int1, "Negative value is not representable" // id: %73
  %74 = builtin "cmp_sge_Int64"(%26 : $Builtin.Int64, %65 : $Builtin.Int64) : $Builtin.Int1 // user: %75
  cond_fail %74 : $Builtin.Int1, "loop induction variable overflowed" // id: %75
  %76 = string_literal utf8 "Array index out of range" // user: %77
  %77 = builtin "ptrtoint_Word"(%76 : $Builtin.RawPointer) : $Builtin.Word // user: %78
  %78 = struct $StaticString (%77 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %103
  %79 = string_literal utf8 "Swift/ContiguousArrayBuffer.swift" // user: %81
  %80 = integer_literal $Builtin.Word, 33         // user: %82
  %81 = builtin "ptrtoint_Word"(%79 : $Builtin.RawPointer) : $Builtin.Word // user: %82
  %82 = struct $StaticString (%81 : $Builtin.Word, %80 : $Builtin.Word, %18 : $Builtin.Int8) // user: %103
  %83 = integer_literal $Builtin.Int64, 502       // user: %84
  %84 = struct $UInt (%83 : $Builtin.Int64)       // user: %103
  br bb11(%26 : $Builtin.Int64)                   // id: %85

bb10:                                             // Preds: bb20 bb4 bb21 bb5
  %86 = tuple ()                                  // user: %87
  return %86 : $()                                // id: %87

// %88                                            // users: %89, %115, %118, %121
bb11(%88 : $Builtin.Int64):                       // Preds: bb9 bb19
  %89 = builtin "cmp_slt_Int64"(%88 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %90
  cond_br %89, bb12, bb13                         // id: %90

bb12:                                             // Preds: bb11
  br bb14                                         // id: %91

bb13:                                             // Preds: bb11
  %92 = load %13 : $*Builtin.Int64                // users: %114, %93
  %93 = builtin "cmp_slt_Int64"(%92 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %94
  %94 = builtin "int_expect_Int1"(%93 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %95
  cond_br %94, bb15, bb16                         // id: %95

bb14:                                             // Preds: bb18 bb12
  %96 = string_literal utf8 "Fatal error"         // user: %98
  %97 = integer_literal $Builtin.Word, 11         // user: %99
  %98 = builtin "ptrtoint_Word"(%96 : $Builtin.RawPointer) : $Builtin.Word // user: %99
  %99 = struct $StaticString (%98 : $Builtin.Word, %97 : $Builtin.Word, %18 : $Builtin.Int8) // user: %103
  %100 = integer_literal $Builtin.Int32, 0        // user: %101
  %101 = struct $UInt32 (%100 : $Builtin.Int32)   // user: %103
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %102 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %103
  %103 = apply %102(%99, %78, %82, %84, %101) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %104

bb15:                                             // Preds: bb13
  %105 = string_literal utf8 "Fatal error"        // user: %107
  %106 = integer_literal $Builtin.Word, 11        // user: %108
  %107 = builtin "ptrtoint_Word"(%105 : $Builtin.RawPointer) : $Builtin.Word // user: %108
  %108 = struct $StaticString (%107 : $Builtin.Word, %106 : $Builtin.Word, %18 : $Builtin.Int8) // user: %112
  %109 = integer_literal $Builtin.Int32, 0        // user: %110
  %110 = struct $UInt32 (%109 : $Builtin.Int32)   // user: %112
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %111 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %112
  %112 = apply %111(%108, %25, %19, %21, %110) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %113

bb16:                                             // Preds: bb13
  %114 = builtin "assumeNonNegative_Int64"(%92 : $Builtin.Int64) : $Builtin.Int64 // user: %115
  %115 = builtin "cmp_slt_Int64"(%88 : $Builtin.Int64, %114 : $Builtin.Int64) : $Builtin.Int1 // user: %116
  %116 = builtin "int_expect_Int1"(%115 : $Builtin.Int1, %69 : $Builtin.Int1) : $Builtin.Int1 // user: %117
  cond_br %116, bb17, bb18                        // id: %117

bb17:                                             // Preds: bb16
  %118 = builtin "truncOrBitCast_Int64_Word"(%88 : $Builtin.Int64) : $Builtin.Word // users: %126, %119
  %119 = index_addr [stack_protection] %8 : $*UInt8, %118 : $Builtin.Word // user: %120
  %120 = load %119 : $*UInt8                      // user: %124
  %121 = builtin "sadd_with_overflow_Int64"(%88 : $Builtin.Int64, %68 : $Builtin.Int64, %69 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %122
  %122 = tuple_extract %121 : $(Builtin.Int64, Builtin.Int1), 0 // users: %132, %129
  %123 = alloc_stack $UInt8                       // users: %128, %125, %124
  store %120 to %123 : $*UInt8                    // id: %124
  %125 = address_to_pointer [stack_protection] %123 : $*UInt8 to $Builtin.RawPointer // user: %127
  %126 = index_raw_pointer %42 : $Builtin.RawPointer, %118 : $Builtin.Word // user: %127
  %127 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%126 : $Builtin.RawPointer, %125 : $Builtin.RawPointer, %71 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %123 : $*UInt8                    // id: %128
  %129 = builtin "cmp_eq_Int64"(%122 : $Builtin.Int64, %65 : $Builtin.Int64) : $Builtin.Int1 // user: %130
  cond_br %129, bb20, bb19                        // id: %130

bb18:                                             // Preds: bb16
  br bb14                                         // id: %131

bb19:                                             // Preds: bb17
  br bb11(%122 : $Builtin.Int64)                  // id: %132

bb20:                                             // Preds: bb17
  br bb10                                         // id: %133

bb21:                                             // Preds: bb8
  br bb10                                         // id: %134
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #12268, stage MidLevel,Function, pass 45: DCE (dce)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy]
// %0                                             // user: %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // users: %119, %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // users: %92, %52, %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // users: %78, %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %78, %82, %99, %108, %59, %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // users: %112, %63, %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // users: %112, %63, %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // users: %112, %63, %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %89, %93, %53, %74, %85, %66, %72, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %94, %54, %127, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %126, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb10                                         // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb10                                         // id: %51

bb6:                                              // Preds: bb3
  %52 = load %13 : $*Builtin.Int64                // users: %65, %53
  %53 = builtin "cmp_slt_Int64"(%52 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %54
  %54 = builtin "int_expect_Int1"(%53 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %55
  cond_br %54, bb7, bb8                           // id: %55

bb7:                                              // Preds: bb6
  %56 = string_literal utf8 "Fatal error"         // user: %58
  %57 = integer_literal $Builtin.Word, 11         // user: %59
  %58 = builtin "ptrtoint_Word"(%56 : $Builtin.RawPointer) : $Builtin.Word // user: %59
  %59 = struct $StaticString (%58 : $Builtin.Word, %57 : $Builtin.Word, %18 : $Builtin.Int8) // user: %63
  %60 = integer_literal $Builtin.Int32, 0         // user: %61
  %61 = struct $UInt32 (%60 : $Builtin.Int32)     // user: %63
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %62 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %63
  %63 = apply %62(%59, %25, %19, %21, %61) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %64

bb8:                                              // Preds: bb6
  %65 = builtin "assumeNonNegative_Int64"(%52 : $Builtin.Int64) : $Builtin.Int64 // users: %129, %66, %74
  %66 = builtin "cmp_eq_Int64"(%65 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %67
  cond_br %66, bb21, bb9                          // id: %67

bb9:                                              // Preds: bb8
  %68 = integer_literal $Builtin.Int64, 1         // user: %121
  %69 = integer_literal $Builtin.Int1, -1         // users: %116, %121
  %70 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %71
  %71 = builtin "sextOrBitCast_Word_Int64"(%70 : $Builtin.Word) : $Builtin.Int64 // users: %127, %72
  %72 = builtin "cmp_slt_Int64"(%71 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %73
  cond_fail %72 : $Builtin.Int1, "Negative value is not representable" // id: %73
  %74 = builtin "cmp_sge_Int64"(%26 : $Builtin.Int64, %65 : $Builtin.Int64) : $Builtin.Int1 // user: %75
  cond_fail %74 : $Builtin.Int1, "loop induction variable overflowed" // id: %75
  %76 = string_literal utf8 "Array index out of range" // user: %77
  %77 = builtin "ptrtoint_Word"(%76 : $Builtin.RawPointer) : $Builtin.Word // user: %78
  %78 = struct $StaticString (%77 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %103
  %79 = string_literal utf8 "Swift/ContiguousArrayBuffer.swift" // user: %81
  %80 = integer_literal $Builtin.Word, 33         // user: %82
  %81 = builtin "ptrtoint_Word"(%79 : $Builtin.RawPointer) : $Builtin.Word // user: %82
  %82 = struct $StaticString (%81 : $Builtin.Word, %80 : $Builtin.Word, %18 : $Builtin.Int8) // user: %103
  %83 = integer_literal $Builtin.Int64, 502       // user: %84
  %84 = struct $UInt (%83 : $Builtin.Int64)       // user: %103
  br bb11(%26 : $Builtin.Int64)                   // id: %85

bb10:                                             // Preds: bb20 bb4 bb21 bb5
  %86 = tuple ()                                  // user: %87
  return %86 : $()                                // id: %87

// %88                                            // users: %89, %115, %118, %121
bb11(%88 : $Builtin.Int64):                       // Preds: bb9 bb19
  %89 = builtin "cmp_slt_Int64"(%88 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %90
  cond_br %89, bb12, bb13                         // id: %90

bb12:                                             // Preds: bb11
  br bb14                                         // id: %91

bb13:                                             // Preds: bb11
  %92 = load %13 : $*Builtin.Int64                // users: %114, %93
  %93 = builtin "cmp_slt_Int64"(%92 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %94
  %94 = builtin "int_expect_Int1"(%93 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %95
  cond_br %94, bb15, bb16                         // id: %95

bb14:                                             // Preds: bb18 bb12
  %96 = string_literal utf8 "Fatal error"         // user: %98
  %97 = integer_literal $Builtin.Word, 11         // user: %99
  %98 = builtin "ptrtoint_Word"(%96 : $Builtin.RawPointer) : $Builtin.Word // user: %99
  %99 = struct $StaticString (%98 : $Builtin.Word, %97 : $Builtin.Word, %18 : $Builtin.Int8) // user: %103
  %100 = integer_literal $Builtin.Int32, 0        // user: %101
  %101 = struct $UInt32 (%100 : $Builtin.Int32)   // user: %103
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %102 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %103
  %103 = apply %102(%99, %78, %82, %84, %101) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %104

bb15:                                             // Preds: bb13
  %105 = string_literal utf8 "Fatal error"        // user: %107
  %106 = integer_literal $Builtin.Word, 11        // user: %108
  %107 = builtin "ptrtoint_Word"(%105 : $Builtin.RawPointer) : $Builtin.Word // user: %108
  %108 = struct $StaticString (%107 : $Builtin.Word, %106 : $Builtin.Word, %18 : $Builtin.Int8) // user: %112
  %109 = integer_literal $Builtin.Int32, 0        // user: %110
  %110 = struct $UInt32 (%109 : $Builtin.Int32)   // user: %112
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %111 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %112
  %112 = apply %111(%108, %25, %19, %21, %110) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %113

bb16:                                             // Preds: bb13
  %114 = builtin "assumeNonNegative_Int64"(%92 : $Builtin.Int64) : $Builtin.Int64 // user: %115
  %115 = builtin "cmp_slt_Int64"(%88 : $Builtin.Int64, %114 : $Builtin.Int64) : $Builtin.Int1 // user: %116
  %116 = builtin "int_expect_Int1"(%115 : $Builtin.Int1, %69 : $Builtin.Int1) : $Builtin.Int1 // user: %117
  cond_br %116, bb17, bb18                        // id: %117

bb17:                                             // Preds: bb16
  %118 = builtin "truncOrBitCast_Int64_Word"(%88 : $Builtin.Int64) : $Builtin.Word // users: %126, %119
  %119 = index_addr [stack_protection] %8 : $*UInt8, %118 : $Builtin.Word // user: %120
  %120 = load %119 : $*UInt8                      // user: %124
  %121 = builtin "sadd_with_overflow_Int64"(%88 : $Builtin.Int64, %68 : $Builtin.Int64, %69 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %122
  %122 = tuple_extract %121 : $(Builtin.Int64, Builtin.Int1), 0 // users: %132, %129
  %123 = alloc_stack $UInt8                       // users: %128, %125, %124
  store %120 to %123 : $*UInt8                    // id: %124
  %125 = address_to_pointer [stack_protection] %123 : $*UInt8 to $Builtin.RawPointer // user: %127
  %126 = index_raw_pointer %42 : $Builtin.RawPointer, %118 : $Builtin.Word // user: %127
  %127 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%126 : $Builtin.RawPointer, %125 : $Builtin.RawPointer, %71 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %123 : $*UInt8                    // id: %128
  %129 = builtin "cmp_eq_Int64"(%122 : $Builtin.Int64, %65 : $Builtin.Int64) : $Builtin.Int1 // user: %130
  cond_br %129, bb20, bb19                        // id: %130

bb18:                                             // Preds: bb16
  br bb14                                         // id: %131

bb19:                                             // Preds: bb17
  br bb11(%122 : $Builtin.Int64)                  // id: %132

bb20:                                             // Preds: bb17
  br bb10                                         // id: %133

bb21:                                             // Preds: bb8
  br bb10                                         // id: %134
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #12305, stage MidLevel,Function, pass 31: PerfInliner (inline)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %2, %84, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %3
  %3 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %4
  %4 = ref_element_addr [immutable] %3 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %5
  %5 = struct_element_addr %4 : $*_ArrayBody, #_ArrayBody._storage // user: %6
  %6 = struct_element_addr %5 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %7
  %7 = struct_element_addr %6 : $*Int, #Int._value // user: %8
  %8 = load %7 : $*Builtin.Int64                  // users: %34, %21
  %9 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %11
  %10 = integer_literal $Builtin.Word, 24         // user: %13
  %11 = builtin "ptrtoint_Word"(%9 : $Builtin.RawPointer) : $Builtin.Word // user: %13
  %12 = integer_literal $Builtin.Int8, 2          // users: %28, %19, %13
  %13 = struct $StaticString (%11 : $Builtin.Word, %10 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %14 = integer_literal $Builtin.Int64, 15505     // user: %15
  %15 = struct $UInt (%14 : $Builtin.Int64)       // user: %32
  %16 = string_literal utf8 ""                    // user: %18
  %17 = integer_literal $Builtin.Word, 0          // user: %19
  %18 = builtin "ptrtoint_Word"(%16 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %19 = struct $StaticString (%18 : $Builtin.Word, %17 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %20 = integer_literal $Builtin.Int64, 0         // user: %21
  %21 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %20 : $Builtin.Int64) : $Builtin.Int1 // user: %23
  %22 = integer_literal $Builtin.Int1, 0          // user: %23
  %23 = builtin "int_expect_Int1"(%21 : $Builtin.Int1, %22 : $Builtin.Int1) : $Builtin.Int1 // user: %24
  cond_br %23, bb1, bb2                           // id: %24

bb1:                                              // Preds: bb0
  %25 = string_literal utf8 "Fatal error"         // user: %27
  %26 = integer_literal $Builtin.Word, 11         // user: %28
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %28
  %28 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %29 = integer_literal $Builtin.Int32, 0         // user: %30
  %30 = struct $UInt32 (%29 : $Builtin.Int32)     // user: %32
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %31 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %32
  %32 = apply %31(%28, %19, %13, %15, %30) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %33

bb2:                                              // Preds: bb0
  %34 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // user: %35
  %35 = struct $Int (%34 : $Builtin.Int64)        // users: %40, %37
  %36 = alloc_ref [stack] $DataWrapper            // users: %82, %39, %38
  debug_value %35 : $Int, let, name "count", argno 1 // id: %37
  debug_value %36 : $DataWrapper, let, name "self", argno 2, implicit // id: %38
  %39 = end_init_let_ref %36 : $DataWrapper       // users: %78, %81, %80, %79, %76
  %40 = struct_extract %35 : $Int, #Int._value    // users: %70, %59, %41
  %41 = builtin "truncOrBitCast_Int64_Word"(%40 : $Builtin.Int64) : $Builtin.Word // user: %43
  %42 = integer_literal $Builtin.Word, 0          // users: %57, %43
  %43 = builtin "allocRaw"(%41 : $Builtin.Word, %42 : $Builtin.Word) : $Builtin.RawPointer // users: %72, %44
  %44 = struct $UnsafeMutableRawPointer (%43 : $Builtin.RawPointer) // user: %45
  %45 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %44 : $UnsafeMutableRawPointer // user: %75
  %46 = integer_literal $Builtin.Int8, 2          // users: %65, %57, %52
  %47 = integer_literal $Builtin.Int32, 0         // user: %66
  %48 = integer_literal $Builtin.Int1, 0          // user: %60
  %49 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %51
  %50 = integer_literal $Builtin.Word, 24         // user: %52
  %51 = builtin "ptrtoint_Word"(%49 : $Builtin.RawPointer) : $Builtin.Word // user: %52
  %52 = struct $StaticString (%51 : $Builtin.Word, %50 : $Builtin.Word, %46 : $Builtin.Int8) // user: %68
  %53 = integer_literal $Builtin.Int64, 15505     // user: %54
  %54 = struct $UInt (%53 : $Builtin.Int64)       // user: %68
  %55 = string_literal utf8 ""                    // user: %56
  %56 = builtin "ptrtoint_Word"(%55 : $Builtin.RawPointer) : $Builtin.Word // user: %57
  %57 = struct $StaticString (%56 : $Builtin.Word, %42 : $Builtin.Word, %46 : $Builtin.Int8) // user: %68
  %58 = integer_literal $Builtin.Int64, 0         // user: %59
  %59 = builtin "cmp_slt_Int64"(%40 : $Builtin.Int64, %58 : $Builtin.Int64) : $Builtin.Int1 // user: %60
  %60 = builtin "int_expect_Int1"(%59 : $Builtin.Int1, %48 : $Builtin.Int1) : $Builtin.Int1 // user: %61
  cond_br %60, bb3, bb4                           // id: %61

bb3:                                              // Preds: bb2
  %62 = string_literal utf8 "Fatal error"         // user: %64
  %63 = integer_literal $Builtin.Word, 11         // user: %65
  %64 = builtin "ptrtoint_Word"(%62 : $Builtin.RawPointer) : $Builtin.Word // user: %65
  %65 = struct $StaticString (%64 : $Builtin.Word, %63 : $Builtin.Word, %46 : $Builtin.Int8) // user: %68
  %66 = struct $UInt32 (%47 : $Builtin.Int32)     // user: %68
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %67 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %68
  %68 = apply %67(%65, %57, %52, %54, %66) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %69

bb4:                                              // Preds: bb2
  %70 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %71
  %71 = builtin "truncOrBitCast_Int64_Word"(%70 : $Builtin.Int64) : $Builtin.Word // user: %72
  %72 = index_raw_pointer %43 : $Builtin.RawPointer, %71 : $Builtin.Word // user: %73
  %73 = struct $UnsafeMutableRawPointer (%72 : $Builtin.RawPointer) // user: %74
  %74 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %73 : $UnsafeMutableRawPointer // user: %75
  %75 = struct $UnsafeMutableRawBufferPointer (%45 : $Optional<UnsafeMutableRawPointer>, %74 : $Optional<UnsafeMutableRawPointer>) // users: %84, %77
  %76 = ref_element_addr %39 : $DataWrapper, #DataWrapper.pointer // user: %77
  store %75 to %76 : $*UnsafeMutableRawBufferPointer // id: %77
  strong_release %39 : $DataWrapper               // id: %78
  debug_value %39 : $DataWrapper, let, name "data" // id: %79
  debug_value %39 : $DataWrapper, let, name "self", argno 1, implicit // id: %80
  debug_value %39 : $DataWrapper, let, name "self", argno 1, implicit // id: %81
  dealloc_stack_ref %36 : $DataWrapper            // id: %82
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %83 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %84
  %84 = apply %83(%0, %75) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %85 = tuple ()                                  // user: %86
  return %85 : $()                                // id: %86
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #12315, stage MidLevel,Function, pass 9: PerformanceConstantPropagation (performance-constant-propagation)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %2, %79, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %3
  %3 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %4
  %4 = ref_element_addr [immutable] %3 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %5
  %5 = struct_element_addr %4 : $*_ArrayBody, #_ArrayBody._storage // user: %6
  %6 = struct_element_addr %5 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %7
  %7 = struct_element_addr %6 : $*Int, #Int._value // user: %8
  %8 = load %7 : $*Builtin.Int64                  // users: %34, %21
  %9 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %11
  %10 = integer_literal $Builtin.Word, 24         // user: %13
  %11 = builtin "ptrtoint_Word"(%9 : $Builtin.RawPointer) : $Builtin.Word // user: %13
  %12 = integer_literal $Builtin.Int8, 2          // users: %28, %19, %13
  %13 = struct $StaticString (%11 : $Builtin.Word, %10 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %14 = integer_literal $Builtin.Int64, 15505     // user: %15
  %15 = struct $UInt (%14 : $Builtin.Int64)       // user: %32
  %16 = string_literal utf8 ""                    // user: %18
  %17 = integer_literal $Builtin.Word, 0          // user: %19
  %18 = builtin "ptrtoint_Word"(%16 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %19 = struct $StaticString (%18 : $Builtin.Word, %17 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %20 = integer_literal $Builtin.Int64, 0         // user: %21
  %21 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %20 : $Builtin.Int64) : $Builtin.Int1 // user: %23
  %22 = integer_literal $Builtin.Int1, 0          // user: %23
  %23 = builtin "int_expect_Int1"(%21 : $Builtin.Int1, %22 : $Builtin.Int1) : $Builtin.Int1 // user: %24
  cond_br %23, bb1, bb2                           // id: %24

bb1:                                              // Preds: bb0
  %25 = string_literal utf8 "Fatal error"         // user: %27
  %26 = integer_literal $Builtin.Word, 11         // user: %28
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %28
  %28 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %29 = integer_literal $Builtin.Int32, 0         // user: %30
  %30 = struct $UInt32 (%29 : $Builtin.Int32)     // user: %32
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %31 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %32
  %32 = apply %31(%28, %19, %13, %15, %30) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %33

bb2:                                              // Preds: bb0
  %34 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // users: %35, %39, %65
  debug_value %34 : $Builtin.Int64, let, name "count", argno 1, type $Int, expr op_fragment:#Int._value // id: %35
  %36 = alloc_ref [stack] $DataWrapper            // users: %77, %38, %37
  debug_value %36 : $DataWrapper, let, name "self", argno 2, implicit // id: %37
  %38 = end_init_let_ref %36 : $DataWrapper       // users: %73, %76, %75, %74, %71
  %39 = builtin "truncOrBitCast_Int64_Word"(%34 : $Builtin.Int64) : $Builtin.Word // user: %41
  %40 = integer_literal $Builtin.Word, 0          // users: %54, %41
  %41 = builtin "allocRaw"(%39 : $Builtin.Word, %40 : $Builtin.Word) : $Builtin.RawPointer // users: %67, %42
  %42 = struct $UnsafeMutableRawPointer (%41 : $Builtin.RawPointer) // user: %43
  %43 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %42 : $UnsafeMutableRawPointer // user: %70
  %44 = integer_literal $Builtin.Int8, 2          // users: %60, %54, %49
  %45 = integer_literal $Builtin.Int32, 0         // user: %61
  %46 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %48
  %47 = integer_literal $Builtin.Word, 24         // user: %49
  %48 = builtin "ptrtoint_Word"(%46 : $Builtin.RawPointer) : $Builtin.Word // user: %49
  %49 = struct $StaticString (%48 : $Builtin.Word, %47 : $Builtin.Word, %44 : $Builtin.Int8) // user: %63
  %50 = integer_literal $Builtin.Int64, 15505     // user: %51
  %51 = struct $UInt (%50 : $Builtin.Int64)       // user: %63
  %52 = string_literal utf8 ""                    // user: %53
  %53 = builtin "ptrtoint_Word"(%52 : $Builtin.RawPointer) : $Builtin.Word // user: %54
  %54 = struct $StaticString (%53 : $Builtin.Word, %40 : $Builtin.Word, %44 : $Builtin.Int8) // user: %63
  %55 = integer_literal $Builtin.Int1, 0          // user: %56
  cond_br %55, bb3, bb4                           // id: %56

bb3:                                              // Preds: bb2
  %57 = string_literal utf8 "Fatal error"         // user: %59
  %58 = integer_literal $Builtin.Word, 11         // user: %60
  %59 = builtin "ptrtoint_Word"(%57 : $Builtin.RawPointer) : $Builtin.Word // user: %60
  %60 = struct $StaticString (%59 : $Builtin.Word, %58 : $Builtin.Word, %44 : $Builtin.Int8) // user: %63
  %61 = struct $UInt32 (%45 : $Builtin.Int32)     // user: %63
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %62 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %63
  %63 = apply %62(%60, %54, %49, %51, %61) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %64

bb4:                                              // Preds: bb2
  %65 = builtin "assumeNonNegative_Int64"(%34 : $Builtin.Int64) : $Builtin.Int64 // user: %66
  %66 = builtin "truncOrBitCast_Int64_Word"(%65 : $Builtin.Int64) : $Builtin.Word // user: %67
  %67 = index_raw_pointer %41 : $Builtin.RawPointer, %66 : $Builtin.Word // user: %68
  %68 = struct $UnsafeMutableRawPointer (%67 : $Builtin.RawPointer) // user: %69
  %69 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %68 : $UnsafeMutableRawPointer // user: %70
  %70 = struct $UnsafeMutableRawBufferPointer (%43 : $Optional<UnsafeMutableRawPointer>, %69 : $Optional<UnsafeMutableRawPointer>) // users: %79, %72
  %71 = ref_element_addr %38 : $DataWrapper, #DataWrapper.pointer // user: %72
  store %70 to %71 : $*UnsafeMutableRawBufferPointer // id: %72
  strong_release %38 : $DataWrapper               // id: %73
  debug_value %38 : $DataWrapper, let, name "data" // id: %74
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %75
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %76
  dealloc_stack_ref %36 : $DataWrapper            // id: %77
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %78 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %79
  %79 = apply %78(%0, %70) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %80 = tuple ()                                  // user: %81
  return %80 : $()                                // id: %81
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #12316, stage MidLevel,Function, pass 10: SimplifyCFG (simplify-cfg)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %2, %69, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %3
  %3 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %4
  %4 = ref_element_addr [immutable] %3 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %5
  %5 = struct_element_addr %4 : $*_ArrayBody, #_ArrayBody._storage // user: %6
  %6 = struct_element_addr %5 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %7
  %7 = struct_element_addr %6 : $*Int, #Int._value // user: %8
  %8 = load %7 : $*Builtin.Int64                  // users: %34, %21
  %9 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %11
  %10 = integer_literal $Builtin.Word, 24         // user: %13
  %11 = builtin "ptrtoint_Word"(%9 : $Builtin.RawPointer) : $Builtin.Word // user: %13
  %12 = integer_literal $Builtin.Int8, 2          // users: %28, %19, %13
  %13 = struct $StaticString (%11 : $Builtin.Word, %10 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %14 = integer_literal $Builtin.Int64, 15505     // user: %15
  %15 = struct $UInt (%14 : $Builtin.Int64)       // user: %32
  %16 = string_literal utf8 ""                    // user: %18
  %17 = integer_literal $Builtin.Word, 0          // user: %19
  %18 = builtin "ptrtoint_Word"(%16 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %19 = struct $StaticString (%18 : $Builtin.Word, %17 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %20 = integer_literal $Builtin.Int64, 0         // user: %21
  %21 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %20 : $Builtin.Int64) : $Builtin.Int1 // user: %23
  %22 = integer_literal $Builtin.Int1, 0          // user: %23
  %23 = builtin "int_expect_Int1"(%21 : $Builtin.Int1, %22 : $Builtin.Int1) : $Builtin.Int1 // user: %24
  cond_br %23, bb1, bb2                           // id: %24

bb1:                                              // Preds: bb0
  %25 = string_literal utf8 "Fatal error"         // user: %27
  %26 = integer_literal $Builtin.Word, 11         // user: %28
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %28
  %28 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %29 = integer_literal $Builtin.Int32, 0         // user: %30
  %30 = struct $UInt32 (%29 : $Builtin.Int32)     // user: %32
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %31 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %32
  %32 = apply %31(%28, %19, %13, %15, %30) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %33

bb2:                                              // Preds: bb0
  %34 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // users: %35, %39, %55
  debug_value %34 : $Builtin.Int64, let, name "count", argno 1, type $Int, expr op_fragment:#Int._value // id: %35
  %36 = alloc_ref [stack] $DataWrapper            // users: %67, %38, %37
  debug_value %36 : $DataWrapper, let, name "self", argno 2, implicit // id: %37
  %38 = end_init_let_ref %36 : $DataWrapper       // users: %63, %66, %65, %64, %61
  %39 = builtin "truncOrBitCast_Int64_Word"(%34 : $Builtin.Int64) : $Builtin.Word // user: %41
  %40 = integer_literal $Builtin.Word, 0          // users: %54, %41
  %41 = builtin "allocRaw"(%39 : $Builtin.Word, %40 : $Builtin.Word) : $Builtin.RawPointer // users: %57, %42
  %42 = struct $UnsafeMutableRawPointer (%41 : $Builtin.RawPointer) // user: %43
  %43 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %42 : $UnsafeMutableRawPointer // user: %60
  %44 = integer_literal $Builtin.Int8, 2          // users: %54, %49
  %45 = integer_literal $Builtin.Int32, 0
  %46 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %48
  %47 = integer_literal $Builtin.Word, 24         // user: %49
  %48 = builtin "ptrtoint_Word"(%46 : $Builtin.RawPointer) : $Builtin.Word // user: %49
  %49 = struct $StaticString (%48 : $Builtin.Word, %47 : $Builtin.Word, %44 : $Builtin.Int8)
  %50 = integer_literal $Builtin.Int64, 15505     // user: %51
  %51 = struct $UInt (%50 : $Builtin.Int64)
  %52 = string_literal utf8 ""                    // user: %53
  %53 = builtin "ptrtoint_Word"(%52 : $Builtin.RawPointer) : $Builtin.Word // user: %54
  %54 = struct $StaticString (%53 : $Builtin.Word, %40 : $Builtin.Word, %44 : $Builtin.Int8)
  %55 = builtin "assumeNonNegative_Int64"(%34 : $Builtin.Int64) : $Builtin.Int64 // user: %56
  %56 = builtin "truncOrBitCast_Int64_Word"(%55 : $Builtin.Int64) : $Builtin.Word // user: %57
  %57 = index_raw_pointer %41 : $Builtin.RawPointer, %56 : $Builtin.Word // user: %58
  %58 = struct $UnsafeMutableRawPointer (%57 : $Builtin.RawPointer) // user: %59
  %59 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %58 : $UnsafeMutableRawPointer // user: %60
  %60 = struct $UnsafeMutableRawBufferPointer (%43 : $Optional<UnsafeMutableRawPointer>, %59 : $Optional<UnsafeMutableRawPointer>) // users: %69, %62
  %61 = ref_element_addr %38 : $DataWrapper, #DataWrapper.pointer // user: %62
  store %60 to %61 : $*UnsafeMutableRawBufferPointer // id: %62
  strong_release %38 : $DataWrapper               // id: %63
  debug_value %38 : $DataWrapper, let, name "data" // id: %64
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %65
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %66
  dealloc_stack_ref %36 : $DataWrapper            // id: %67
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %68 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %69
  %69 = apply %68(%0, %60) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %70 = tuple ()                                  // user: %71
  return %70 : $()                                // id: %71
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #12318, stage MidLevel,Function, pass 12: SILCombine (sil-combine)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %2, %58, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %3
  %3 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %4
  %4 = ref_element_addr [immutable] %3 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %5
  %5 = struct_element_addr %4 : $*_ArrayBody, #_ArrayBody._storage // user: %6
  %6 = struct_element_addr %5 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %7
  %7 = struct_element_addr %6 : $*Int, #Int._value // user: %8
  %8 = load %7 : $*Builtin.Int64                  // users: %34, %21
  %9 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %11
  %10 = integer_literal $Builtin.Word, 24         // user: %13
  %11 = builtin "ptrtoint_Word"(%9 : $Builtin.RawPointer) : $Builtin.Word // user: %13
  %12 = integer_literal $Builtin.Int8, 2          // users: %28, %19, %13
  %13 = struct $StaticString (%11 : $Builtin.Word, %10 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %14 = integer_literal $Builtin.Int64, 15505     // user: %15
  %15 = struct $UInt (%14 : $Builtin.Int64)       // user: %32
  %16 = string_literal utf8 ""                    // user: %18
  %17 = integer_literal $Builtin.Word, 0          // user: %19
  %18 = builtin "ptrtoint_Word"(%16 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %19 = struct $StaticString (%18 : $Builtin.Word, %17 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %20 = integer_literal $Builtin.Int64, 0         // user: %21
  %21 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %20 : $Builtin.Int64) : $Builtin.Int1 // user: %23
  %22 = integer_literal $Builtin.Int1, 0          // user: %23
  %23 = builtin "int_expect_Int1"(%21 : $Builtin.Int1, %22 : $Builtin.Int1) : $Builtin.Int1 // user: %24
  cond_br %23, bb1, bb2                           // id: %24

bb1:                                              // Preds: bb0
  %25 = string_literal utf8 "Fatal error"         // user: %27
  %26 = integer_literal $Builtin.Word, 11         // user: %28
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %28
  %28 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %29 = integer_literal $Builtin.Int32, 0         // user: %30
  %30 = struct $UInt32 (%29 : $Builtin.Int32)     // user: %32
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %31 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %32
  %32 = apply %31(%28, %19, %13, %15, %30) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %33

bb2:                                              // Preds: bb0
  %34 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // users: %35, %39, %44
  debug_value %34 : $Builtin.Int64, let, name "count", argno 1, type $Int, expr op_fragment:#Int._value // id: %35
  %36 = alloc_ref [stack] $DataWrapper            // users: %56, %38, %37
  debug_value %36 : $DataWrapper, let, name "self", argno 2, implicit // id: %37
  %38 = end_init_let_ref %36 : $DataWrapper       // users: %52, %55, %54, %53, %50
  %39 = builtin "truncOrBitCast_Int64_Word"(%34 : $Builtin.Int64) : $Builtin.Word // user: %41
  %40 = integer_literal $Builtin.Word, 0          // user: %41
  %41 = builtin "allocRaw"(%39 : $Builtin.Word, %40 : $Builtin.Word) : $Builtin.RawPointer // users: %46, %42
  %42 = struct $UnsafeMutableRawPointer (%41 : $Builtin.RawPointer) // user: %43
  %43 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %42 : $UnsafeMutableRawPointer // user: %49
  %44 = builtin "assumeNonNegative_Int64"(%34 : $Builtin.Int64) : $Builtin.Int64 // user: %45
  %45 = builtin "truncOrBitCast_Int64_Word"(%44 : $Builtin.Int64) : $Builtin.Word // user: %46
  %46 = index_raw_pointer %41 : $Builtin.RawPointer, %45 : $Builtin.Word // user: %47
  %47 = struct $UnsafeMutableRawPointer (%46 : $Builtin.RawPointer) // user: %48
  %48 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %47 : $UnsafeMutableRawPointer // user: %49
  %49 = struct $UnsafeMutableRawBufferPointer (%43 : $Optional<UnsafeMutableRawPointer>, %48 : $Optional<UnsafeMutableRawPointer>) // users: %58, %51
  %50 = ref_element_addr %38 : $DataWrapper, #DataWrapper.pointer // user: %51
  store %49 to %50 : $*UnsafeMutableRawBufferPointer // id: %51
  strong_release %38 : $DataWrapper               // id: %52
  debug_value %38 : $DataWrapper, let, name "data" // id: %53
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %54
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %55
  dealloc_stack_ref %36 : $DataWrapper            // id: %56
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %57 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %58
  %58 = apply %57(%0, %49) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %59 = tuple ()                                  // user: %60
  return %59 : $()                                // id: %60
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #12341, stage MidLevel,Function, pass 38: CSE (cse)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %2, %57, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %3
  %3 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %4
  %4 = ref_element_addr [immutable] %3 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %5
  %5 = struct_element_addr %4 : $*_ArrayBody, #_ArrayBody._storage // user: %6
  %6 = struct_element_addr %5 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %7
  %7 = struct_element_addr %6 : $*Int, #Int._value // user: %8
  %8 = load %7 : $*Builtin.Int64                  // users: %34, %21
  %9 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %11
  %10 = integer_literal $Builtin.Word, 24         // user: %13
  %11 = builtin "ptrtoint_Word"(%9 : $Builtin.RawPointer) : $Builtin.Word // user: %13
  %12 = integer_literal $Builtin.Int8, 2          // users: %28, %19, %13
  %13 = struct $StaticString (%11 : $Builtin.Word, %10 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %14 = integer_literal $Builtin.Int64, 15505     // user: %15
  %15 = struct $UInt (%14 : $Builtin.Int64)       // user: %32
  %16 = string_literal utf8 ""                    // user: %18
  %17 = integer_literal $Builtin.Word, 0          // users: %40, %19
  %18 = builtin "ptrtoint_Word"(%16 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %19 = struct $StaticString (%18 : $Builtin.Word, %17 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %20 = integer_literal $Builtin.Int64, 0         // user: %21
  %21 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %20 : $Builtin.Int64) : $Builtin.Int1 // user: %23
  %22 = integer_literal $Builtin.Int1, 0          // user: %23
  %23 = builtin "int_expect_Int1"(%21 : $Builtin.Int1, %22 : $Builtin.Int1) : $Builtin.Int1 // user: %24
  cond_br %23, bb1, bb2                           // id: %24

bb1:                                              // Preds: bb0
  %25 = string_literal utf8 "Fatal error"         // user: %27
  %26 = integer_literal $Builtin.Word, 11         // user: %28
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %28
  %28 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %29 = integer_literal $Builtin.Int32, 0         // user: %30
  %30 = struct $UInt32 (%29 : $Builtin.Int32)     // user: %32
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %31 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %32
  %32 = apply %31(%28, %19, %13, %15, %30) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %33

bb2:                                              // Preds: bb0
  %34 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // users: %35, %39, %43
  debug_value %34 : $Builtin.Int64, let, name "count", argno 1, type $Int, expr op_fragment:#Int._value // id: %35
  %36 = alloc_ref [stack] $DataWrapper            // users: %55, %38, %37
  debug_value %36 : $DataWrapper, let, name "self", argno 2, implicit // id: %37
  %38 = end_init_let_ref %36 : $DataWrapper       // users: %51, %54, %53, %52, %49
  %39 = builtin "truncOrBitCast_Int64_Word"(%34 : $Builtin.Int64) : $Builtin.Word // user: %40
  %40 = builtin "allocRaw"(%39 : $Builtin.Word, %17 : $Builtin.Word) : $Builtin.RawPointer // users: %45, %41
  %41 = struct $UnsafeMutableRawPointer (%40 : $Builtin.RawPointer) // user: %42
  %42 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %41 : $UnsafeMutableRawPointer // user: %48
  %43 = builtin "assumeNonNegative_Int64"(%34 : $Builtin.Int64) : $Builtin.Int64 // user: %44
  %44 = builtin "truncOrBitCast_Int64_Word"(%43 : $Builtin.Int64) : $Builtin.Word // user: %45
  %45 = index_raw_pointer %40 : $Builtin.RawPointer, %44 : $Builtin.Word // user: %46
  %46 = struct $UnsafeMutableRawPointer (%45 : $Builtin.RawPointer) // user: %47
  %47 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %46 : $UnsafeMutableRawPointer // user: %48
  %48 = struct $UnsafeMutableRawBufferPointer (%42 : $Optional<UnsafeMutableRawPointer>, %47 : $Optional<UnsafeMutableRawPointer>) // users: %57, %50
  %49 = ref_element_addr %38 : $DataWrapper, #DataWrapper.pointer // user: %50
  store %48 to %49 : $*UnsafeMutableRawBufferPointer // id: %50
  strong_release %38 : $DataWrapper               // id: %51
  debug_value %38 : $DataWrapper, let, name "data" // id: %52
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %53
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %54
  dealloc_stack_ref %36 : $DataWrapper            // id: %55
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %56 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %57
  %57 = apply %56(%0, %48) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %58 = tuple ()                                  // user: %59
  return %58 : $()                                // id: %59
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #12350, stage MidLevel,Function, pass 47: ReleaseHoisting (release-hoisting)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %2, %57, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %3
  %3 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %4
  %4 = ref_element_addr [immutable] %3 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %5
  %5 = struct_element_addr %4 : $*_ArrayBody, #_ArrayBody._storage // user: %6
  %6 = struct_element_addr %5 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %7
  %7 = struct_element_addr %6 : $*Int, #Int._value // user: %8
  %8 = load %7 : $*Builtin.Int64                  // users: %34, %21
  %9 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %11
  %10 = integer_literal $Builtin.Word, 24         // user: %13
  %11 = builtin "ptrtoint_Word"(%9 : $Builtin.RawPointer) : $Builtin.Word // user: %13
  %12 = integer_literal $Builtin.Int8, 2          // users: %28, %19, %13
  %13 = struct $StaticString (%11 : $Builtin.Word, %10 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %14 = integer_literal $Builtin.Int64, 15505     // user: %15
  %15 = struct $UInt (%14 : $Builtin.Int64)       // user: %32
  %16 = string_literal utf8 ""                    // user: %18
  %17 = integer_literal $Builtin.Word, 0          // users: %40, %19
  %18 = builtin "ptrtoint_Word"(%16 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %19 = struct $StaticString (%18 : $Builtin.Word, %17 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %20 = integer_literal $Builtin.Int64, 0         // user: %21
  %21 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %20 : $Builtin.Int64) : $Builtin.Int1 // user: %23
  %22 = integer_literal $Builtin.Int1, 0          // user: %23
  %23 = builtin "int_expect_Int1"(%21 : $Builtin.Int1, %22 : $Builtin.Int1) : $Builtin.Int1 // user: %24
  cond_br %23, bb1, bb2                           // id: %24

bb1:                                              // Preds: bb0
  %25 = string_literal utf8 "Fatal error"         // user: %27
  %26 = integer_literal $Builtin.Word, 11         // user: %28
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %28
  %28 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %29 = integer_literal $Builtin.Int32, 0         // user: %30
  %30 = struct $UInt32 (%29 : $Builtin.Int32)     // user: %32
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %31 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %32
  %32 = apply %31(%28, %19, %13, %15, %30) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %33

bb2:                                              // Preds: bb0
  %34 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // users: %35, %39, %43
  debug_value %34 : $Builtin.Int64, let, name "count", argno 1, type $Int, expr op_fragment:#Int._value // id: %35
  %36 = alloc_ref [stack] $DataWrapper            // users: %55, %38, %37
  debug_value %36 : $DataWrapper, let, name "self", argno 2, implicit // id: %37
  %38 = end_init_let_ref %36 : $DataWrapper       // users: %51, %54, %53, %52, %49
  %39 = builtin "truncOrBitCast_Int64_Word"(%34 : $Builtin.Int64) : $Builtin.Word // user: %40
  %40 = builtin "allocRaw"(%39 : $Builtin.Word, %17 : $Builtin.Word) : $Builtin.RawPointer // users: %45, %41
  %41 = struct $UnsafeMutableRawPointer (%40 : $Builtin.RawPointer) // user: %42
  %42 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %41 : $UnsafeMutableRawPointer // user: %48
  %43 = builtin "assumeNonNegative_Int64"(%34 : $Builtin.Int64) : $Builtin.Int64 // user: %44
  %44 = builtin "truncOrBitCast_Int64_Word"(%43 : $Builtin.Int64) : $Builtin.Word // user: %45
  %45 = index_raw_pointer %40 : $Builtin.RawPointer, %44 : $Builtin.Word // user: %46
  %46 = struct $UnsafeMutableRawPointer (%45 : $Builtin.RawPointer) // user: %47
  %47 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %46 : $UnsafeMutableRawPointer // user: %48
  %48 = struct $UnsafeMutableRawBufferPointer (%42 : $Optional<UnsafeMutableRawPointer>, %47 : $Optional<UnsafeMutableRawPointer>) // users: %57, %50
  %49 = ref_element_addr %38 : $DataWrapper, #DataWrapper.pointer // user: %50
  store %48 to %49 : $*UnsafeMutableRawBufferPointer // id: %50
  strong_release %38 : $DataWrapper               // id: %51
  debug_value %38 : $DataWrapper, let, name "data" // id: %52
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %53
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %54
  dealloc_stack_ref %36 : $DataWrapper            // id: %55
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %56 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %57
  %57 = apply %56(%0, %48) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %58 = tuple ()                                  // user: %59
  return %58 : $()                                // id: %59
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #12356, stage MidLevel,Function, pass 54: ReleaseHoisting (release-hoisting)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %2, %57, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %3
  %3 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %4
  %4 = ref_element_addr [immutable] %3 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %5
  %5 = struct_element_addr %4 : $*_ArrayBody, #_ArrayBody._storage // user: %6
  %6 = struct_element_addr %5 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %7
  %7 = struct_element_addr %6 : $*Int, #Int._value // user: %8
  %8 = load %7 : $*Builtin.Int64                  // users: %34, %21
  %9 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %11
  %10 = integer_literal $Builtin.Word, 24         // user: %13
  %11 = builtin "ptrtoint_Word"(%9 : $Builtin.RawPointer) : $Builtin.Word // user: %13
  %12 = integer_literal $Builtin.Int8, 2          // users: %28, %19, %13
  %13 = struct $StaticString (%11 : $Builtin.Word, %10 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %14 = integer_literal $Builtin.Int64, 15505     // user: %15
  %15 = struct $UInt (%14 : $Builtin.Int64)       // user: %32
  %16 = string_literal utf8 ""                    // user: %18
  %17 = integer_literal $Builtin.Word, 0          // users: %40, %19
  %18 = builtin "ptrtoint_Word"(%16 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %19 = struct $StaticString (%18 : $Builtin.Word, %17 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %20 = integer_literal $Builtin.Int64, 0         // user: %21
  %21 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %20 : $Builtin.Int64) : $Builtin.Int1 // user: %23
  %22 = integer_literal $Builtin.Int1, 0          // user: %23
  %23 = builtin "int_expect_Int1"(%21 : $Builtin.Int1, %22 : $Builtin.Int1) : $Builtin.Int1 // user: %24
  cond_br %23, bb1, bb2                           // id: %24

bb1:                                              // Preds: bb0
  %25 = string_literal utf8 "Fatal error"         // user: %27
  %26 = integer_literal $Builtin.Word, 11         // user: %28
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %28
  %28 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %29 = integer_literal $Builtin.Int32, 0         // user: %30
  %30 = struct $UInt32 (%29 : $Builtin.Int32)     // user: %32
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %31 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %32
  %32 = apply %31(%28, %19, %13, %15, %30) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %33

bb2:                                              // Preds: bb0
  %34 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // users: %35, %39, %43
  debug_value %34 : $Builtin.Int64, let, name "count", argno 1, type $Int, expr op_fragment:#Int._value // id: %35
  %36 = alloc_ref [stack] $DataWrapper            // users: %55, %38, %37
  debug_value %36 : $DataWrapper, let, name "self", argno 2, implicit // id: %37
  %38 = end_init_let_ref %36 : $DataWrapper       // users: %51, %54, %53, %52, %49
  %39 = builtin "truncOrBitCast_Int64_Word"(%34 : $Builtin.Int64) : $Builtin.Word // user: %40
  %40 = builtin "allocRaw"(%39 : $Builtin.Word, %17 : $Builtin.Word) : $Builtin.RawPointer // users: %45, %41
  %41 = struct $UnsafeMutableRawPointer (%40 : $Builtin.RawPointer) // user: %42
  %42 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %41 : $UnsafeMutableRawPointer // user: %48
  %43 = builtin "assumeNonNegative_Int64"(%34 : $Builtin.Int64) : $Builtin.Int64 // user: %44
  %44 = builtin "truncOrBitCast_Int64_Word"(%43 : $Builtin.Int64) : $Builtin.Word // user: %45
  %45 = index_raw_pointer %40 : $Builtin.RawPointer, %44 : $Builtin.Word // user: %46
  %46 = struct $UnsafeMutableRawPointer (%45 : $Builtin.RawPointer) // user: %47
  %47 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %46 : $UnsafeMutableRawPointer // user: %48
  %48 = struct $UnsafeMutableRawBufferPointer (%42 : $Optional<UnsafeMutableRawPointer>, %47 : $Optional<UnsafeMutableRawPointer>) // users: %57, %50
  %49 = ref_element_addr %38 : $DataWrapper, #DataWrapper.pointer // user: %50
  store %48 to %49 : $*UnsafeMutableRawBufferPointer // id: %50
  strong_release %38 : $DataWrapper               // id: %51
  debug_value %38 : $DataWrapper, let, name "data" // id: %52
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %53
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %54
  dealloc_stack_ref %36 : $DataWrapper            // id: %55
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %56 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %57
  %57 = apply %56(%0, %48) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %58 = tuple ()                                  // user: %59
  return %58 : $()                                // id: %59
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL module after #17794, stage ClosureSpecialize, pass 0: DeadFunctionAndGlobalElimination (sil-deadfuncelim)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %2, %57, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %3
  %3 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %4
  %4 = ref_element_addr [immutable] %3 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %5
  %5 = struct_element_addr %4 : $*_ArrayBody, #_ArrayBody._storage // user: %6
  %6 = struct_element_addr %5 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %7
  %7 = struct_element_addr %6 : $*Int, #Int._value // user: %8
  %8 = load %7 : $*Builtin.Int64                  // users: %34, %21
  %9 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %11
  %10 = integer_literal $Builtin.Word, 24         // user: %13
  %11 = builtin "ptrtoint_Word"(%9 : $Builtin.RawPointer) : $Builtin.Word // user: %13
  %12 = integer_literal $Builtin.Int8, 2          // users: %28, %19, %13
  %13 = struct $StaticString (%11 : $Builtin.Word, %10 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %14 = integer_literal $Builtin.Int64, 15505     // user: %15
  %15 = struct $UInt (%14 : $Builtin.Int64)       // user: %32
  %16 = string_literal utf8 ""                    // user: %18
  %17 = integer_literal $Builtin.Word, 0          // users: %40, %19
  %18 = builtin "ptrtoint_Word"(%16 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %19 = struct $StaticString (%18 : $Builtin.Word, %17 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %20 = integer_literal $Builtin.Int64, 0         // user: %21
  %21 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %20 : $Builtin.Int64) : $Builtin.Int1 // user: %23
  %22 = integer_literal $Builtin.Int1, 0          // user: %23
  %23 = builtin "int_expect_Int1"(%21 : $Builtin.Int1, %22 : $Builtin.Int1) : $Builtin.Int1 // user: %24
  cond_br %23, bb1, bb2                           // id: %24

bb1:                                              // Preds: bb0
  %25 = string_literal utf8 "Fatal error"         // user: %27
  %26 = integer_literal $Builtin.Word, 11         // user: %28
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %28
  %28 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %29 = integer_literal $Builtin.Int32, 0         // user: %30
  %30 = struct $UInt32 (%29 : $Builtin.Int32)     // user: %32
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %31 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %32
  %32 = apply %31(%28, %19, %13, %15, %30) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %33

bb2:                                              // Preds: bb0
  %34 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // users: %35, %39, %43
  debug_value %34 : $Builtin.Int64, let, name "count", argno 1, type $Int, expr op_fragment:#Int._value // id: %35
  %36 = alloc_ref [stack] $DataWrapper            // users: %55, %38, %37
  debug_value %36 : $DataWrapper, let, name "self", argno 2, implicit // id: %37
  %38 = end_init_let_ref %36 : $DataWrapper       // users: %51, %54, %53, %52, %49
  %39 = builtin "truncOrBitCast_Int64_Word"(%34 : $Builtin.Int64) : $Builtin.Word // user: %40
  %40 = builtin "allocRaw"(%39 : $Builtin.Word, %17 : $Builtin.Word) : $Builtin.RawPointer // users: %45, %41
  %41 = struct $UnsafeMutableRawPointer (%40 : $Builtin.RawPointer) // user: %42
  %42 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %41 : $UnsafeMutableRawPointer // user: %48
  %43 = builtin "assumeNonNegative_Int64"(%34 : $Builtin.Int64) : $Builtin.Int64 // user: %44
  %44 = builtin "truncOrBitCast_Int64_Word"(%43 : $Builtin.Int64) : $Builtin.Word // user: %45
  %45 = index_raw_pointer %40 : $Builtin.RawPointer, %44 : $Builtin.Word // user: %46
  %46 = struct $UnsafeMutableRawPointer (%45 : $Builtin.RawPointer) // user: %47
  %47 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %46 : $UnsafeMutableRawPointer // user: %48
  %48 = struct $UnsafeMutableRawBufferPointer (%42 : $Optional<UnsafeMutableRawPointer>, %47 : $Optional<UnsafeMutableRawPointer>) // users: %57, %50
  %49 = ref_element_addr %38 : $DataWrapper, #DataWrapper.pointer // user: %50
  store %48 to %49 : $*UnsafeMutableRawBufferPointer // id: %50
  strong_release %38 : $DataWrapper               // id: %51
  debug_value %38 : $DataWrapper, let, name "data" // id: %52
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %53
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %54
  dealloc_stack_ref %36 : $DataWrapper            // id: %55
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %56 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %57
  %57 = apply %56(%0, %48) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %58 = tuple ()                                  // user: %59
  return %58 : $()                                // id: %59
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy]
// %0                                             // user: %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // users: %119, %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // users: %92, %52, %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // users: %78, %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %78, %82, %99, %108, %59, %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // users: %112, %63, %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // users: %112, %63, %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // users: %112, %63, %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %89, %93, %53, %74, %85, %66, %72, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %94, %54, %127, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %126, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb10                                         // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb10                                         // id: %51

bb6:                                              // Preds: bb3
  %52 = load %13 : $*Builtin.Int64                // users: %65, %53
  %53 = builtin "cmp_slt_Int64"(%52 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %54
  %54 = builtin "int_expect_Int1"(%53 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %55
  cond_br %54, bb7, bb8                           // id: %55

bb7:                                              // Preds: bb6
  %56 = string_literal utf8 "Fatal error"         // user: %58
  %57 = integer_literal $Builtin.Word, 11         // user: %59
  %58 = builtin "ptrtoint_Word"(%56 : $Builtin.RawPointer) : $Builtin.Word // user: %59
  %59 = struct $StaticString (%58 : $Builtin.Word, %57 : $Builtin.Word, %18 : $Builtin.Int8) // user: %63
  %60 = integer_literal $Builtin.Int32, 0         // user: %61
  %61 = struct $UInt32 (%60 : $Builtin.Int32)     // user: %63
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %62 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %63
  %63 = apply %62(%59, %25, %19, %21, %61) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %64

bb8:                                              // Preds: bb6
  %65 = builtin "assumeNonNegative_Int64"(%52 : $Builtin.Int64) : $Builtin.Int64 // users: %129, %66, %74
  %66 = builtin "cmp_eq_Int64"(%65 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %67
  cond_br %66, bb21, bb9                          // id: %67

bb9:                                              // Preds: bb8
  %68 = integer_literal $Builtin.Int64, 1         // user: %121
  %69 = integer_literal $Builtin.Int1, -1         // users: %116, %121
  %70 = builtin "sizeof"<UInt8>() : $Builtin.Word // user: %71
  %71 = builtin "sextOrBitCast_Word_Int64"(%70 : $Builtin.Word) : $Builtin.Int64 // users: %127, %72
  %72 = builtin "cmp_slt_Int64"(%71 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %73
  cond_fail %72 : $Builtin.Int1, "Negative value is not representable" // id: %73
  %74 = builtin "cmp_sge_Int64"(%26 : $Builtin.Int64, %65 : $Builtin.Int64) : $Builtin.Int1 // user: %75
  cond_fail %74 : $Builtin.Int1, "loop induction variable overflowed" // id: %75
  %76 = string_literal utf8 "Array index out of range" // user: %77
  %77 = builtin "ptrtoint_Word"(%76 : $Builtin.RawPointer) : $Builtin.Word // user: %78
  %78 = struct $StaticString (%77 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %103
  %79 = string_literal utf8 "Swift/ContiguousArrayBuffer.swift" // user: %81
  %80 = integer_literal $Builtin.Word, 33         // user: %82
  %81 = builtin "ptrtoint_Word"(%79 : $Builtin.RawPointer) : $Builtin.Word // user: %82
  %82 = struct $StaticString (%81 : $Builtin.Word, %80 : $Builtin.Word, %18 : $Builtin.Int8) // user: %103
  %83 = integer_literal $Builtin.Int64, 502       // user: %84
  %84 = struct $UInt (%83 : $Builtin.Int64)       // user: %103
  br bb11(%26 : $Builtin.Int64)                   // id: %85

bb10:                                             // Preds: bb20 bb4 bb21 bb5
  %86 = tuple ()                                  // user: %87
  return %86 : $()                                // id: %87

// %88                                            // users: %89, %115, %118, %121
bb11(%88 : $Builtin.Int64):                       // Preds: bb9 bb19
  %89 = builtin "cmp_slt_Int64"(%88 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %90
  cond_br %89, bb12, bb13                         // id: %90

bb12:                                             // Preds: bb11
  br bb14                                         // id: %91

bb13:                                             // Preds: bb11
  %92 = load %13 : $*Builtin.Int64                // users: %114, %93
  %93 = builtin "cmp_slt_Int64"(%92 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %94
  %94 = builtin "int_expect_Int1"(%93 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %95
  cond_br %94, bb15, bb16                         // id: %95

bb14:                                             // Preds: bb18 bb12
  %96 = string_literal utf8 "Fatal error"         // user: %98
  %97 = integer_literal $Builtin.Word, 11         // user: %99
  %98 = builtin "ptrtoint_Word"(%96 : $Builtin.RawPointer) : $Builtin.Word // user: %99
  %99 = struct $StaticString (%98 : $Builtin.Word, %97 : $Builtin.Word, %18 : $Builtin.Int8) // user: %103
  %100 = integer_literal $Builtin.Int32, 0        // user: %101
  %101 = struct $UInt32 (%100 : $Builtin.Int32)   // user: %103
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %102 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %103
  %103 = apply %102(%99, %78, %82, %84, %101) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %104

bb15:                                             // Preds: bb13
  %105 = string_literal utf8 "Fatal error"        // user: %107
  %106 = integer_literal $Builtin.Word, 11        // user: %108
  %107 = builtin "ptrtoint_Word"(%105 : $Builtin.RawPointer) : $Builtin.Word // user: %108
  %108 = struct $StaticString (%107 : $Builtin.Word, %106 : $Builtin.Word, %18 : $Builtin.Int8) // user: %112
  %109 = integer_literal $Builtin.Int32, 0        // user: %110
  %110 = struct $UInt32 (%109 : $Builtin.Int32)   // user: %112
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %111 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %112
  %112 = apply %111(%108, %25, %19, %21, %110) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %113

bb16:                                             // Preds: bb13
  %114 = builtin "assumeNonNegative_Int64"(%92 : $Builtin.Int64) : $Builtin.Int64 // user: %115
  %115 = builtin "cmp_slt_Int64"(%88 : $Builtin.Int64, %114 : $Builtin.Int64) : $Builtin.Int1 // user: %116
  %116 = builtin "int_expect_Int1"(%115 : $Builtin.Int1, %69 : $Builtin.Int1) : $Builtin.Int1 // user: %117
  cond_br %116, bb17, bb18                        // id: %117

bb17:                                             // Preds: bb16
  %118 = builtin "truncOrBitCast_Int64_Word"(%88 : $Builtin.Int64) : $Builtin.Word // users: %126, %119
  %119 = index_addr [stack_protection] %8 : $*UInt8, %118 : $Builtin.Word // user: %120
  %120 = load %119 : $*UInt8                      // user: %124
  %121 = builtin "sadd_with_overflow_Int64"(%88 : $Builtin.Int64, %68 : $Builtin.Int64, %69 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %122
  %122 = tuple_extract %121 : $(Builtin.Int64, Builtin.Int1), 0 // users: %132, %129
  %123 = alloc_stack $UInt8                       // users: %128, %125, %124
  store %120 to %123 : $*UInt8                    // id: %124
  %125 = address_to_pointer [stack_protection] %123 : $*UInt8 to $Builtin.RawPointer // user: %127
  %126 = index_raw_pointer %42 : $Builtin.RawPointer, %118 : $Builtin.Word // user: %127
  %127 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%126 : $Builtin.RawPointer, %125 : $Builtin.RawPointer, %71 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %123 : $*UInt8                    // id: %128
  %129 = builtin "cmp_eq_Int64"(%122 : $Builtin.Int64, %65 : $Builtin.Int64) : $Builtin.Int1 // user: %130
  cond_br %129, bb20, bb19                        // id: %130

bb18:                                             // Preds: bb16
  br bb14                                         // id: %131

bb19:                                             // Preds: bb17
  br bb11(%122 : $Builtin.Int64)                  // id: %132

bb20:                                             // Preds: bb17
  br bb10                                         // id: %133

bb21:                                             // Preds: bb8
  br bb10                                         // id: %134
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #17835, stage ClosureSpecialize, pass 8: Simplification (simplification)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: noescape v**, noescape v**.c*.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy]
// %0                                             // user: %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // users: %116, %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // users: %89, %52, %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // users: %75, %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %75, %79, %96, %105, %59, %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // users: %109, %63, %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // users: %109, %63, %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // users: %109, %63, %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %86, %90, %53, %71, %82, %66, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %91, %54, %124, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %123, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb10                                         // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb10                                         // id: %51

bb6:                                              // Preds: bb3
  %52 = load %13 : $*Builtin.Int64                // users: %65, %53
  %53 = builtin "cmp_slt_Int64"(%52 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %54
  %54 = builtin "int_expect_Int1"(%53 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %55
  cond_br %54, bb7, bb8                           // id: %55

bb7:                                              // Preds: bb6
  %56 = string_literal utf8 "Fatal error"         // user: %58
  %57 = integer_literal $Builtin.Word, 11         // user: %59
  %58 = builtin "ptrtoint_Word"(%56 : $Builtin.RawPointer) : $Builtin.Word // user: %59
  %59 = struct $StaticString (%58 : $Builtin.Word, %57 : $Builtin.Word, %18 : $Builtin.Int8) // user: %63
  %60 = integer_literal $Builtin.Int32, 0         // user: %61
  %61 = struct $UInt32 (%60 : $Builtin.Int32)     // user: %63
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %62 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %63
  %63 = apply %62(%59, %25, %19, %21, %61) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %64

bb8:                                              // Preds: bb6
  %65 = builtin "assumeNonNegative_Int64"(%52 : $Builtin.Int64) : $Builtin.Int64 // users: %126, %66, %71
  %66 = builtin "cmp_eq_Int64"(%65 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %67
  cond_br %66, bb21, bb9                          // id: %67

bb9:                                              // Preds: bb8
  %68 = integer_literal $Builtin.Int64, 1         // user: %118
  %69 = integer_literal $Builtin.Int1, -1         // users: %113, %118
  %70 = integer_literal $Builtin.Int64, 1         // user: %124
  %71 = builtin "cmp_sge_Int64"(%26 : $Builtin.Int64, %65 : $Builtin.Int64) : $Builtin.Int1 // user: %72
  cond_fail %71 : $Builtin.Int1, "loop induction variable overflowed" // id: %72
  %73 = string_literal utf8 "Array index out of range" // user: %74
  %74 = builtin "ptrtoint_Word"(%73 : $Builtin.RawPointer) : $Builtin.Word // user: %75
  %75 = struct $StaticString (%74 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %100
  %76 = string_literal utf8 "Swift/ContiguousArrayBuffer.swift" // user: %78
  %77 = integer_literal $Builtin.Word, 33         // user: %79
  %78 = builtin "ptrtoint_Word"(%76 : $Builtin.RawPointer) : $Builtin.Word // user: %79
  %79 = struct $StaticString (%78 : $Builtin.Word, %77 : $Builtin.Word, %18 : $Builtin.Int8) // user: %100
  %80 = integer_literal $Builtin.Int64, 502       // user: %81
  %81 = struct $UInt (%80 : $Builtin.Int64)       // user: %100
  br bb11(%26 : $Builtin.Int64)                   // id: %82

bb10:                                             // Preds: bb20 bb4 bb21 bb5
  %83 = tuple ()                                  // user: %84
  return %83 : $()                                // id: %84

// %85                                            // users: %86, %112, %115, %118
bb11(%85 : $Builtin.Int64):                       // Preds: bb9 bb19
  %86 = builtin "cmp_slt_Int64"(%85 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %87
  cond_br %86, bb12, bb13                         // id: %87

bb12:                                             // Preds: bb11
  br bb14                                         // id: %88

bb13:                                             // Preds: bb11
  %89 = load %13 : $*Builtin.Int64                // users: %111, %90
  %90 = builtin "cmp_slt_Int64"(%89 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %91
  %91 = builtin "int_expect_Int1"(%90 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %92
  cond_br %91, bb15, bb16                         // id: %92

bb14:                                             // Preds: bb18 bb12
  %93 = string_literal utf8 "Fatal error"         // user: %95
  %94 = integer_literal $Builtin.Word, 11         // user: %96
  %95 = builtin "ptrtoint_Word"(%93 : $Builtin.RawPointer) : $Builtin.Word // user: %96
  %96 = struct $StaticString (%95 : $Builtin.Word, %94 : $Builtin.Word, %18 : $Builtin.Int8) // user: %100
  %97 = integer_literal $Builtin.Int32, 0         // user: %98
  %98 = struct $UInt32 (%97 : $Builtin.Int32)     // user: %100
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %99 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %100
  %100 = apply %99(%96, %75, %79, %81, %98) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %101

bb15:                                             // Preds: bb13
  %102 = string_literal utf8 "Fatal error"        // user: %104
  %103 = integer_literal $Builtin.Word, 11        // user: %105
  %104 = builtin "ptrtoint_Word"(%102 : $Builtin.RawPointer) : $Builtin.Word // user: %105
  %105 = struct $StaticString (%104 : $Builtin.Word, %103 : $Builtin.Word, %18 : $Builtin.Int8) // user: %109
  %106 = integer_literal $Builtin.Int32, 0        // user: %107
  %107 = struct $UInt32 (%106 : $Builtin.Int32)   // user: %109
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %108 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %109
  %109 = apply %108(%105, %25, %19, %21, %107) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %110

bb16:                                             // Preds: bb13
  %111 = builtin "assumeNonNegative_Int64"(%89 : $Builtin.Int64) : $Builtin.Int64 // user: %112
  %112 = builtin "cmp_slt_Int64"(%85 : $Builtin.Int64, %111 : $Builtin.Int64) : $Builtin.Int1 // user: %113
  %113 = builtin "int_expect_Int1"(%112 : $Builtin.Int1, %69 : $Builtin.Int1) : $Builtin.Int1 // user: %114
  cond_br %113, bb17, bb18                        // id: %114

bb17:                                             // Preds: bb16
  %115 = builtin "truncOrBitCast_Int64_Word"(%85 : $Builtin.Int64) : $Builtin.Word // users: %123, %116
  %116 = index_addr [stack_protection] %8 : $*UInt8, %115 : $Builtin.Word // user: %117
  %117 = load %116 : $*UInt8                      // user: %121
  %118 = builtin "sadd_with_overflow_Int64"(%85 : $Builtin.Int64, %68 : $Builtin.Int64, %69 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %119
  %119 = tuple_extract %118 : $(Builtin.Int64, Builtin.Int1), 0 // users: %129, %126
  %120 = alloc_stack $UInt8                       // users: %125, %122, %121
  store %117 to %120 : $*UInt8                    // id: %121
  %122 = address_to_pointer [stack_protection] %120 : $*UInt8 to $Builtin.RawPointer // user: %124
  %123 = index_raw_pointer %42 : $Builtin.RawPointer, %115 : $Builtin.Word // user: %124
  %124 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%123 : $Builtin.RawPointer, %122 : $Builtin.RawPointer, %70 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %120 : $*UInt8                    // id: %125
  %126 = builtin "cmp_eq_Int64"(%119 : $Builtin.Int64, %65 : $Builtin.Int64) : $Builtin.Int1 // user: %127
  cond_br %126, bb20, bb19                        // id: %127

bb18:                                             // Preds: bb16
  br bb14                                         // id: %128

bb19:                                             // Preds: bb17
  br bb11(%119 : $Builtin.Int64)                  // id: %129

bb20:                                             // Preds: bb17
  br bb10                                         // id: %130

bb21:                                             // Preds: bb8
  br bb10                                         // id: %131
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #17837, stage ClosureSpecialize, pass 10: ComputeEscapeEffects (compute-escape-effects)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: noescape **, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy]
// %0                                             // user: %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // users: %116, %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // users: %89, %52, %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // users: %75, %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %75, %79, %96, %105, %59, %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // users: %109, %63, %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // users: %109, %63, %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // users: %109, %63, %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %86, %90, %53, %71, %82, %66, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %91, %54, %124, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %123, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb10                                         // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb10                                         // id: %51

bb6:                                              // Preds: bb3
  %52 = load %13 : $*Builtin.Int64                // users: %65, %53
  %53 = builtin "cmp_slt_Int64"(%52 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %54
  %54 = builtin "int_expect_Int1"(%53 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %55
  cond_br %54, bb7, bb8                           // id: %55

bb7:                                              // Preds: bb6
  %56 = string_literal utf8 "Fatal error"         // user: %58
  %57 = integer_literal $Builtin.Word, 11         // user: %59
  %58 = builtin "ptrtoint_Word"(%56 : $Builtin.RawPointer) : $Builtin.Word // user: %59
  %59 = struct $StaticString (%58 : $Builtin.Word, %57 : $Builtin.Word, %18 : $Builtin.Int8) // user: %63
  %60 = integer_literal $Builtin.Int32, 0         // user: %61
  %61 = struct $UInt32 (%60 : $Builtin.Int32)     // user: %63
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %62 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %63
  %63 = apply %62(%59, %25, %19, %21, %61) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %64

bb8:                                              // Preds: bb6
  %65 = builtin "assumeNonNegative_Int64"(%52 : $Builtin.Int64) : $Builtin.Int64 // users: %126, %66, %71
  %66 = builtin "cmp_eq_Int64"(%65 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %67
  cond_br %66, bb21, bb9                          // id: %67

bb9:                                              // Preds: bb8
  %68 = integer_literal $Builtin.Int64, 1         // user: %118
  %69 = integer_literal $Builtin.Int1, -1         // users: %113, %118
  %70 = integer_literal $Builtin.Int64, 1         // user: %124
  %71 = builtin "cmp_sge_Int64"(%26 : $Builtin.Int64, %65 : $Builtin.Int64) : $Builtin.Int1 // user: %72
  cond_fail %71 : $Builtin.Int1, "loop induction variable overflowed" // id: %72
  %73 = string_literal utf8 "Array index out of range" // user: %74
  %74 = builtin "ptrtoint_Word"(%73 : $Builtin.RawPointer) : $Builtin.Word // user: %75
  %75 = struct $StaticString (%74 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %100
  %76 = string_literal utf8 "Swift/ContiguousArrayBuffer.swift" // user: %78
  %77 = integer_literal $Builtin.Word, 33         // user: %79
  %78 = builtin "ptrtoint_Word"(%76 : $Builtin.RawPointer) : $Builtin.Word // user: %79
  %79 = struct $StaticString (%78 : $Builtin.Word, %77 : $Builtin.Word, %18 : $Builtin.Int8) // user: %100
  %80 = integer_literal $Builtin.Int64, 502       // user: %81
  %81 = struct $UInt (%80 : $Builtin.Int64)       // user: %100
  br bb11(%26 : $Builtin.Int64)                   // id: %82

bb10:                                             // Preds: bb20 bb4 bb21 bb5
  %83 = tuple ()                                  // user: %84
  return %83 : $()                                // id: %84

// %85                                            // users: %86, %112, %115, %118
bb11(%85 : $Builtin.Int64):                       // Preds: bb9 bb19
  %86 = builtin "cmp_slt_Int64"(%85 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %87
  cond_br %86, bb12, bb13                         // id: %87

bb12:                                             // Preds: bb11
  br bb14                                         // id: %88

bb13:                                             // Preds: bb11
  %89 = load %13 : $*Builtin.Int64                // users: %111, %90
  %90 = builtin "cmp_slt_Int64"(%89 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %91
  %91 = builtin "int_expect_Int1"(%90 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %92
  cond_br %91, bb15, bb16                         // id: %92

bb14:                                             // Preds: bb18 bb12
  %93 = string_literal utf8 "Fatal error"         // user: %95
  %94 = integer_literal $Builtin.Word, 11         // user: %96
  %95 = builtin "ptrtoint_Word"(%93 : $Builtin.RawPointer) : $Builtin.Word // user: %96
  %96 = struct $StaticString (%95 : $Builtin.Word, %94 : $Builtin.Word, %18 : $Builtin.Int8) // user: %100
  %97 = integer_literal $Builtin.Int32, 0         // user: %98
  %98 = struct $UInt32 (%97 : $Builtin.Int32)     // user: %100
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %99 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %100
  %100 = apply %99(%96, %75, %79, %81, %98) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %101

bb15:                                             // Preds: bb13
  %102 = string_literal utf8 "Fatal error"        // user: %104
  %103 = integer_literal $Builtin.Word, 11        // user: %105
  %104 = builtin "ptrtoint_Word"(%102 : $Builtin.RawPointer) : $Builtin.Word // user: %105
  %105 = struct $StaticString (%104 : $Builtin.Word, %103 : $Builtin.Word, %18 : $Builtin.Int8) // user: %109
  %106 = integer_literal $Builtin.Int32, 0        // user: %107
  %107 = struct $UInt32 (%106 : $Builtin.Int32)   // user: %109
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %108 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %109
  %109 = apply %108(%105, %25, %19, %21, %107) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %110

bb16:                                             // Preds: bb13
  %111 = builtin "assumeNonNegative_Int64"(%89 : $Builtin.Int64) : $Builtin.Int64 // user: %112
  %112 = builtin "cmp_slt_Int64"(%85 : $Builtin.Int64, %111 : $Builtin.Int64) : $Builtin.Int1 // user: %113
  %113 = builtin "int_expect_Int1"(%112 : $Builtin.Int1, %69 : $Builtin.Int1) : $Builtin.Int1 // user: %114
  cond_br %113, bb17, bb18                        // id: %114

bb17:                                             // Preds: bb16
  %115 = builtin "truncOrBitCast_Int64_Word"(%85 : $Builtin.Int64) : $Builtin.Word // users: %123, %116
  %116 = index_addr [stack_protection] %8 : $*UInt8, %115 : $Builtin.Word // user: %117
  %117 = load %116 : $*UInt8                      // user: %121
  %118 = builtin "sadd_with_overflow_Int64"(%85 : $Builtin.Int64, %68 : $Builtin.Int64, %69 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %119
  %119 = tuple_extract %118 : $(Builtin.Int64, Builtin.Int1), 0 // users: %129, %126
  %120 = alloc_stack $UInt8                       // users: %125, %122, %121
  store %117 to %120 : $*UInt8                    // id: %121
  %122 = address_to_pointer [stack_protection] %120 : $*UInt8 to $Builtin.RawPointer // user: %124
  %123 = index_raw_pointer %42 : $Builtin.RawPointer, %115 : $Builtin.Word // user: %124
  %124 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%123 : $Builtin.RawPointer, %122 : $Builtin.RawPointer, %70 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %120 : $*UInt8                    // id: %125
  %126 = builtin "cmp_eq_Int64"(%119 : $Builtin.Int64, %65 : $Builtin.Int64) : $Builtin.Int1 // user: %127
  cond_br %126, bb20, bb19                        // id: %127

bb18:                                             // Preds: bb16
  br bb14                                         // id: %128

bb19:                                             // Preds: bb17
  br bb11(%119 : $Builtin.Int64)                  // id: %129

bb20:                                             // Preds: bb17
  br bb10                                         // id: %130

bb21:                                             // Preds: bb8
  br bb10                                         // id: %131
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #17846, stage ClosureSpecialize, pass 10: ComputeEscapeEffects (compute-escape-effects)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: noescape **, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %2, %57, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %3
  %3 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %4
  %4 = ref_element_addr [immutable] %3 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %5
  %5 = struct_element_addr %4 : $*_ArrayBody, #_ArrayBody._storage // user: %6
  %6 = struct_element_addr %5 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %7
  %7 = struct_element_addr %6 : $*Int, #Int._value // user: %8
  %8 = load %7 : $*Builtin.Int64                  // users: %34, %21
  %9 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %11
  %10 = integer_literal $Builtin.Word, 24         // user: %13
  %11 = builtin "ptrtoint_Word"(%9 : $Builtin.RawPointer) : $Builtin.Word // user: %13
  %12 = integer_literal $Builtin.Int8, 2          // users: %28, %19, %13
  %13 = struct $StaticString (%11 : $Builtin.Word, %10 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %14 = integer_literal $Builtin.Int64, 15505     // user: %15
  %15 = struct $UInt (%14 : $Builtin.Int64)       // user: %32
  %16 = string_literal utf8 ""                    // user: %18
  %17 = integer_literal $Builtin.Word, 0          // users: %40, %19
  %18 = builtin "ptrtoint_Word"(%16 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %19 = struct $StaticString (%18 : $Builtin.Word, %17 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %20 = integer_literal $Builtin.Int64, 0         // user: %21
  %21 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %20 : $Builtin.Int64) : $Builtin.Int1 // user: %23
  %22 = integer_literal $Builtin.Int1, 0          // user: %23
  %23 = builtin "int_expect_Int1"(%21 : $Builtin.Int1, %22 : $Builtin.Int1) : $Builtin.Int1 // user: %24
  cond_br %23, bb1, bb2                           // id: %24

bb1:                                              // Preds: bb0
  %25 = string_literal utf8 "Fatal error"         // user: %27
  %26 = integer_literal $Builtin.Word, 11         // user: %28
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %28
  %28 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %29 = integer_literal $Builtin.Int32, 0         // user: %30
  %30 = struct $UInt32 (%29 : $Builtin.Int32)     // user: %32
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %31 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %32
  %32 = apply %31(%28, %19, %13, %15, %30) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %33

bb2:                                              // Preds: bb0
  %34 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // users: %35, %39, %43
  debug_value %34 : $Builtin.Int64, let, name "count", argno 1, type $Int, expr op_fragment:#Int._value // id: %35
  %36 = alloc_ref [stack] $DataWrapper            // users: %55, %38, %37
  debug_value %36 : $DataWrapper, let, name "self", argno 2, implicit // id: %37
  %38 = end_init_let_ref %36 : $DataWrapper       // users: %51, %54, %53, %52, %49
  %39 = builtin "truncOrBitCast_Int64_Word"(%34 : $Builtin.Int64) : $Builtin.Word // user: %40
  %40 = builtin "allocRaw"(%39 : $Builtin.Word, %17 : $Builtin.Word) : $Builtin.RawPointer // users: %45, %41
  %41 = struct $UnsafeMutableRawPointer (%40 : $Builtin.RawPointer) // user: %42
  %42 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %41 : $UnsafeMutableRawPointer // user: %48
  %43 = builtin "assumeNonNegative_Int64"(%34 : $Builtin.Int64) : $Builtin.Int64 // user: %44
  %44 = builtin "truncOrBitCast_Int64_Word"(%43 : $Builtin.Int64) : $Builtin.Word // user: %45
  %45 = index_raw_pointer %40 : $Builtin.RawPointer, %44 : $Builtin.Word // user: %46
  %46 = struct $UnsafeMutableRawPointer (%45 : $Builtin.RawPointer) // user: %47
  %47 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %46 : $UnsafeMutableRawPointer // user: %48
  %48 = struct $UnsafeMutableRawBufferPointer (%42 : $Optional<UnsafeMutableRawPointer>, %47 : $Optional<UnsafeMutableRawPointer>) // users: %57, %50
  %49 = ref_element_addr %38 : $DataWrapper, #DataWrapper.pointer // user: %50
  store %48 to %49 : $*UnsafeMutableRawBufferPointer // id: %50
  strong_release %38 : $DataWrapper               // id: %51
  debug_value %38 : $DataWrapper, let, name "data" // id: %52
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %53
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %54
  dealloc_stack_ref %36 : $DataWrapper            // id: %55
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %56 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %57
  %57 = apply %56(%0, %48) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %58 = tuple ()                                  // user: %59
  return %58 : $()                                // id: %59
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #19125, stage LowLevel,Function, pass 4: DCE (dce)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: noescape **, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy]
// %0                                             // user: %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // users: %116, %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // users: %89, %52, %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // users: %75, %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %75, %79, %96, %105, %59, %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // users: %109, %63, %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // users: %109, %63, %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // users: %109, %63, %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %86, %90, %53, %71, %82, %66, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %91, %54, %124, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %123, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb10                                         // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb10                                         // id: %51

bb6:                                              // Preds: bb3
  %52 = load %13 : $*Builtin.Int64                // users: %65, %53
  %53 = builtin "cmp_slt_Int64"(%52 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %54
  %54 = builtin "int_expect_Int1"(%53 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %55
  cond_br %54, bb7, bb8                           // id: %55

bb7:                                              // Preds: bb6
  %56 = string_literal utf8 "Fatal error"         // user: %58
  %57 = integer_literal $Builtin.Word, 11         // user: %59
  %58 = builtin "ptrtoint_Word"(%56 : $Builtin.RawPointer) : $Builtin.Word // user: %59
  %59 = struct $StaticString (%58 : $Builtin.Word, %57 : $Builtin.Word, %18 : $Builtin.Int8) // user: %63
  %60 = integer_literal $Builtin.Int32, 0         // user: %61
  %61 = struct $UInt32 (%60 : $Builtin.Int32)     // user: %63
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %62 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %63
  %63 = apply %62(%59, %25, %19, %21, %61) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %64

bb8:                                              // Preds: bb6
  %65 = builtin "assumeNonNegative_Int64"(%52 : $Builtin.Int64) : $Builtin.Int64 // users: %126, %66, %71
  %66 = builtin "cmp_eq_Int64"(%65 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %67
  cond_br %66, bb21, bb9                          // id: %67

bb9:                                              // Preds: bb8
  %68 = integer_literal $Builtin.Int64, 1         // user: %118
  %69 = integer_literal $Builtin.Int1, -1         // users: %113, %118
  %70 = integer_literal $Builtin.Int64, 1         // user: %124
  %71 = builtin "cmp_sge_Int64"(%26 : $Builtin.Int64, %65 : $Builtin.Int64) : $Builtin.Int1 // user: %72
  cond_fail %71 : $Builtin.Int1, "loop induction variable overflowed" // id: %72
  %73 = string_literal utf8 "Array index out of range" // user: %74
  %74 = builtin "ptrtoint_Word"(%73 : $Builtin.RawPointer) : $Builtin.Word // user: %75
  %75 = struct $StaticString (%74 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %100
  %76 = string_literal utf8 "Swift/ContiguousArrayBuffer.swift" // user: %78
  %77 = integer_literal $Builtin.Word, 33         // user: %79
  %78 = builtin "ptrtoint_Word"(%76 : $Builtin.RawPointer) : $Builtin.Word // user: %79
  %79 = struct $StaticString (%78 : $Builtin.Word, %77 : $Builtin.Word, %18 : $Builtin.Int8) // user: %100
  %80 = integer_literal $Builtin.Int64, 502       // user: %81
  %81 = struct $UInt (%80 : $Builtin.Int64)       // user: %100
  br bb11(%26 : $Builtin.Int64)                   // id: %82

bb10:                                             // Preds: bb20 bb4 bb21 bb5
  %83 = tuple ()                                  // user: %84
  return %83 : $()                                // id: %84

// %85                                            // users: %86, %112, %115, %118
bb11(%85 : $Builtin.Int64):                       // Preds: bb9 bb19
  %86 = builtin "cmp_slt_Int64"(%85 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %87
  cond_br %86, bb12, bb13                         // id: %87

bb12:                                             // Preds: bb11
  br bb14                                         // id: %88

bb13:                                             // Preds: bb11
  %89 = load %13 : $*Builtin.Int64                // users: %111, %90
  %90 = builtin "cmp_slt_Int64"(%89 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %91
  %91 = builtin "int_expect_Int1"(%90 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %92
  cond_br %91, bb15, bb16                         // id: %92

bb14:                                             // Preds: bb18 bb12
  %93 = string_literal utf8 "Fatal error"         // user: %95
  %94 = integer_literal $Builtin.Word, 11         // user: %96
  %95 = builtin "ptrtoint_Word"(%93 : $Builtin.RawPointer) : $Builtin.Word // user: %96
  %96 = struct $StaticString (%95 : $Builtin.Word, %94 : $Builtin.Word, %18 : $Builtin.Int8) // user: %100
  %97 = integer_literal $Builtin.Int32, 0         // user: %98
  %98 = struct $UInt32 (%97 : $Builtin.Int32)     // user: %100
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %99 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %100
  %100 = apply %99(%96, %75, %79, %81, %98) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %101

bb15:                                             // Preds: bb13
  %102 = string_literal utf8 "Fatal error"        // user: %104
  %103 = integer_literal $Builtin.Word, 11        // user: %105
  %104 = builtin "ptrtoint_Word"(%102 : $Builtin.RawPointer) : $Builtin.Word // user: %105
  %105 = struct $StaticString (%104 : $Builtin.Word, %103 : $Builtin.Word, %18 : $Builtin.Int8) // user: %109
  %106 = integer_literal $Builtin.Int32, 0        // user: %107
  %107 = struct $UInt32 (%106 : $Builtin.Int32)   // user: %109
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %108 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %109
  %109 = apply %108(%105, %25, %19, %21, %107) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %110

bb16:                                             // Preds: bb13
  %111 = builtin "assumeNonNegative_Int64"(%89 : $Builtin.Int64) : $Builtin.Int64 // user: %112
  %112 = builtin "cmp_slt_Int64"(%85 : $Builtin.Int64, %111 : $Builtin.Int64) : $Builtin.Int1 // user: %113
  %113 = builtin "int_expect_Int1"(%112 : $Builtin.Int1, %69 : $Builtin.Int1) : $Builtin.Int1 // user: %114
  cond_br %113, bb17, bb18                        // id: %114

bb17:                                             // Preds: bb16
  %115 = builtin "truncOrBitCast_Int64_Word"(%85 : $Builtin.Int64) : $Builtin.Word // users: %123, %116
  %116 = index_addr [stack_protection] %8 : $*UInt8, %115 : $Builtin.Word // user: %117
  %117 = load %116 : $*UInt8                      // user: %121
  %118 = builtin "sadd_with_overflow_Int64"(%85 : $Builtin.Int64, %68 : $Builtin.Int64, %69 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %119
  %119 = tuple_extract %118 : $(Builtin.Int64, Builtin.Int1), 0 // users: %129, %126
  %120 = alloc_stack $UInt8                       // users: %125, %122, %121
  store %117 to %120 : $*UInt8                    // id: %121
  %122 = address_to_pointer [stack_protection] %120 : $*UInt8 to $Builtin.RawPointer // user: %124
  %123 = index_raw_pointer %42 : $Builtin.RawPointer, %115 : $Builtin.Word // user: %124
  %124 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%123 : $Builtin.RawPointer, %122 : $Builtin.RawPointer, %70 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %120 : $*UInt8                    // id: %125
  %126 = builtin "cmp_eq_Int64"(%119 : $Builtin.Int64, %65 : $Builtin.Int64) : $Builtin.Int1 // user: %127
  cond_br %126, bb20, bb19                        // id: %127

bb18:                                             // Preds: bb16
  br bb14                                         // id: %128

bb19:                                             // Preds: bb17
  br bb11(%119 : $Builtin.Int64)                  // id: %129

bb20:                                             // Preds: bb17
  br bb10                                         // id: %130

bb21:                                             // Preds: bb8
  br bb10                                         // id: %131
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #19146, stage LowLevel,Function, pass 31: CSE (cse)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: noescape **, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy]
// %0                                             // user: %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // users: %115, %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // users: %88, %52, %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // users: %74, %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %74, %78, %95, %104, %59, %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // users: %108, %63, %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // users: %108, %63, %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // users: %108, %63, %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %85, %89, %53, %70, %81, %66, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %90, %54, %123, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %122, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb10                                         // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb10                                         // id: %51

bb6:                                              // Preds: bb3
  %52 = load %13 : $*Builtin.Int64                // users: %65, %53
  %53 = builtin "cmp_slt_Int64"(%52 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %54
  %54 = builtin "int_expect_Int1"(%53 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %55
  cond_br %54, bb7, bb8                           // id: %55

bb7:                                              // Preds: bb6
  %56 = string_literal utf8 "Fatal error"         // user: %58
  %57 = integer_literal $Builtin.Word, 11         // user: %59
  %58 = builtin "ptrtoint_Word"(%56 : $Builtin.RawPointer) : $Builtin.Word // user: %59
  %59 = struct $StaticString (%58 : $Builtin.Word, %57 : $Builtin.Word, %18 : $Builtin.Int8) // user: %63
  %60 = integer_literal $Builtin.Int32, 0         // user: %61
  %61 = struct $UInt32 (%60 : $Builtin.Int32)     // user: %63
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %62 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %63
  %63 = apply %62(%59, %25, %19, %21, %61) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %64

bb8:                                              // Preds: bb6
  %65 = builtin "assumeNonNegative_Int64"(%52 : $Builtin.Int64) : $Builtin.Int64 // users: %125, %66, %70
  %66 = builtin "cmp_eq_Int64"(%65 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %67
  cond_br %66, bb21, bb9                          // id: %67

bb9:                                              // Preds: bb8
  %68 = integer_literal $Builtin.Int64, 1         // users: %123, %117
  %69 = integer_literal $Builtin.Int1, -1         // users: %112, %117
  %70 = builtin "cmp_sge_Int64"(%26 : $Builtin.Int64, %65 : $Builtin.Int64) : $Builtin.Int1 // user: %71
  cond_fail %70 : $Builtin.Int1, "loop induction variable overflowed" // id: %71
  %72 = string_literal utf8 "Array index out of range" // user: %73
  %73 = builtin "ptrtoint_Word"(%72 : $Builtin.RawPointer) : $Builtin.Word // user: %74
  %74 = struct $StaticString (%73 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %99
  %75 = string_literal utf8 "Swift/ContiguousArrayBuffer.swift" // user: %77
  %76 = integer_literal $Builtin.Word, 33         // user: %78
  %77 = builtin "ptrtoint_Word"(%75 : $Builtin.RawPointer) : $Builtin.Word // user: %78
  %78 = struct $StaticString (%77 : $Builtin.Word, %76 : $Builtin.Word, %18 : $Builtin.Int8) // user: %99
  %79 = integer_literal $Builtin.Int64, 502       // user: %80
  %80 = struct $UInt (%79 : $Builtin.Int64)       // user: %99
  br bb11(%26 : $Builtin.Int64)                   // id: %81

bb10:                                             // Preds: bb20 bb4 bb21 bb5
  %82 = tuple ()                                  // user: %83
  return %82 : $()                                // id: %83

// %84                                            // users: %85, %111, %114, %117
bb11(%84 : $Builtin.Int64):                       // Preds: bb9 bb19
  %85 = builtin "cmp_slt_Int64"(%84 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %86
  cond_br %85, bb12, bb13                         // id: %86

bb12:                                             // Preds: bb11
  br bb14                                         // id: %87

bb13:                                             // Preds: bb11
  %88 = load %13 : $*Builtin.Int64                // users: %110, %89
  %89 = builtin "cmp_slt_Int64"(%88 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %90
  %90 = builtin "int_expect_Int1"(%89 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %91
  cond_br %90, bb15, bb16                         // id: %91

bb14:                                             // Preds: bb18 bb12
  %92 = string_literal utf8 "Fatal error"         // user: %94
  %93 = integer_literal $Builtin.Word, 11         // user: %95
  %94 = builtin "ptrtoint_Word"(%92 : $Builtin.RawPointer) : $Builtin.Word // user: %95
  %95 = struct $StaticString (%94 : $Builtin.Word, %93 : $Builtin.Word, %18 : $Builtin.Int8) // user: %99
  %96 = integer_literal $Builtin.Int32, 0         // user: %97
  %97 = struct $UInt32 (%96 : $Builtin.Int32)     // user: %99
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %98 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %99
  %99 = apply %98(%95, %74, %78, %80, %97) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %100

bb15:                                             // Preds: bb13
  %101 = string_literal utf8 "Fatal error"        // user: %103
  %102 = integer_literal $Builtin.Word, 11        // user: %104
  %103 = builtin "ptrtoint_Word"(%101 : $Builtin.RawPointer) : $Builtin.Word // user: %104
  %104 = struct $StaticString (%103 : $Builtin.Word, %102 : $Builtin.Word, %18 : $Builtin.Int8) // user: %108
  %105 = integer_literal $Builtin.Int32, 0        // user: %106
  %106 = struct $UInt32 (%105 : $Builtin.Int32)   // user: %108
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %107 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %108
  %108 = apply %107(%104, %25, %19, %21, %106) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %109

bb16:                                             // Preds: bb13
  %110 = builtin "assumeNonNegative_Int64"(%88 : $Builtin.Int64) : $Builtin.Int64 // user: %111
  %111 = builtin "cmp_slt_Int64"(%84 : $Builtin.Int64, %110 : $Builtin.Int64) : $Builtin.Int1 // user: %112
  %112 = builtin "int_expect_Int1"(%111 : $Builtin.Int1, %69 : $Builtin.Int1) : $Builtin.Int1 // user: %113
  cond_br %112, bb17, bb18                        // id: %113

bb17:                                             // Preds: bb16
  %114 = builtin "truncOrBitCast_Int64_Word"(%84 : $Builtin.Int64) : $Builtin.Word // users: %122, %115
  %115 = index_addr [stack_protection] %8 : $*UInt8, %114 : $Builtin.Word // user: %116
  %116 = load %115 : $*UInt8                      // user: %120
  %117 = builtin "sadd_with_overflow_Int64"(%84 : $Builtin.Int64, %68 : $Builtin.Int64, %69 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %118
  %118 = tuple_extract %117 : $(Builtin.Int64, Builtin.Int1), 0 // users: %128, %125
  %119 = alloc_stack $UInt8                       // users: %124, %121, %120
  store %116 to %119 : $*UInt8                    // id: %120
  %121 = address_to_pointer [stack_protection] %119 : $*UInt8 to $Builtin.RawPointer // user: %123
  %122 = index_raw_pointer %42 : $Builtin.RawPointer, %114 : $Builtin.Word // user: %123
  %123 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%122 : $Builtin.RawPointer, %121 : $Builtin.RawPointer, %68 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %119 : $*UInt8                    // id: %124
  %125 = builtin "cmp_eq_Int64"(%118 : $Builtin.Int64, %65 : $Builtin.Int64) : $Builtin.Int1 // user: %126
  cond_br %125, bb20, bb19                        // id: %126

bb18:                                             // Preds: bb16
  br bb14                                         // id: %127

bb19:                                             // Preds: bb17
  br bb11(%118 : $Builtin.Int64)                  // id: %128

bb20:                                             // Preds: bb17
  br bb10                                         // id: %129

bb21:                                             // Preds: bb8
  br bb10                                         // id: %130
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #19153, stage LowLevel,Function, pass 38: DCE (dce)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: noescape **, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy]
// %0                                             // user: %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // users: %115, %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // users: %88, %52, %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // users: %74, %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %74, %78, %95, %104, %59, %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // users: %108, %63, %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // users: %108, %63, %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // users: %108, %63, %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %85, %89, %53, %70, %81, %66, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %90, %54, %123, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %122, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb10                                         // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb10                                         // id: %51

bb6:                                              // Preds: bb3
  %52 = load %13 : $*Builtin.Int64                // users: %65, %53
  %53 = builtin "cmp_slt_Int64"(%52 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %54
  %54 = builtin "int_expect_Int1"(%53 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %55
  cond_br %54, bb7, bb8                           // id: %55

bb7:                                              // Preds: bb6
  %56 = string_literal utf8 "Fatal error"         // user: %58
  %57 = integer_literal $Builtin.Word, 11         // user: %59
  %58 = builtin "ptrtoint_Word"(%56 : $Builtin.RawPointer) : $Builtin.Word // user: %59
  %59 = struct $StaticString (%58 : $Builtin.Word, %57 : $Builtin.Word, %18 : $Builtin.Int8) // user: %63
  %60 = integer_literal $Builtin.Int32, 0         // user: %61
  %61 = struct $UInt32 (%60 : $Builtin.Int32)     // user: %63
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %62 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %63
  %63 = apply %62(%59, %25, %19, %21, %61) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %64

bb8:                                              // Preds: bb6
  %65 = builtin "assumeNonNegative_Int64"(%52 : $Builtin.Int64) : $Builtin.Int64 // users: %125, %66, %70
  %66 = builtin "cmp_eq_Int64"(%65 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %67
  cond_br %66, bb21, bb9                          // id: %67

bb9:                                              // Preds: bb8
  %68 = integer_literal $Builtin.Int64, 1         // users: %123, %117
  %69 = integer_literal $Builtin.Int1, -1         // users: %112, %117
  %70 = builtin "cmp_sge_Int64"(%26 : $Builtin.Int64, %65 : $Builtin.Int64) : $Builtin.Int1 // user: %71
  cond_fail %70 : $Builtin.Int1, "loop induction variable overflowed" // id: %71
  %72 = string_literal utf8 "Array index out of range" // user: %73
  %73 = builtin "ptrtoint_Word"(%72 : $Builtin.RawPointer) : $Builtin.Word // user: %74
  %74 = struct $StaticString (%73 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %99
  %75 = string_literal utf8 "Swift/ContiguousArrayBuffer.swift" // user: %77
  %76 = integer_literal $Builtin.Word, 33         // user: %78
  %77 = builtin "ptrtoint_Word"(%75 : $Builtin.RawPointer) : $Builtin.Word // user: %78
  %78 = struct $StaticString (%77 : $Builtin.Word, %76 : $Builtin.Word, %18 : $Builtin.Int8) // user: %99
  %79 = integer_literal $Builtin.Int64, 502       // user: %80
  %80 = struct $UInt (%79 : $Builtin.Int64)       // user: %99
  br bb11(%26 : $Builtin.Int64)                   // id: %81

bb10:                                             // Preds: bb20 bb4 bb21 bb5
  %82 = tuple ()                                  // user: %83
  return %82 : $()                                // id: %83

// %84                                            // users: %85, %111, %114, %117
bb11(%84 : $Builtin.Int64):                       // Preds: bb9 bb19
  %85 = builtin "cmp_slt_Int64"(%84 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %86
  cond_br %85, bb12, bb13                         // id: %86

bb12:                                             // Preds: bb11
  br bb14                                         // id: %87

bb13:                                             // Preds: bb11
  %88 = load %13 : $*Builtin.Int64                // users: %110, %89
  %89 = builtin "cmp_slt_Int64"(%88 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %90
  %90 = builtin "int_expect_Int1"(%89 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %91
  cond_br %90, bb15, bb16                         // id: %91

bb14:                                             // Preds: bb18 bb12
  %92 = string_literal utf8 "Fatal error"         // user: %94
  %93 = integer_literal $Builtin.Word, 11         // user: %95
  %94 = builtin "ptrtoint_Word"(%92 : $Builtin.RawPointer) : $Builtin.Word // user: %95
  %95 = struct $StaticString (%94 : $Builtin.Word, %93 : $Builtin.Word, %18 : $Builtin.Int8) // user: %99
  %96 = integer_literal $Builtin.Int32, 0         // user: %97
  %97 = struct $UInt32 (%96 : $Builtin.Int32)     // user: %99
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %98 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %99
  %99 = apply %98(%95, %74, %78, %80, %97) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %100

bb15:                                             // Preds: bb13
  %101 = string_literal utf8 "Fatal error"        // user: %103
  %102 = integer_literal $Builtin.Word, 11        // user: %104
  %103 = builtin "ptrtoint_Word"(%101 : $Builtin.RawPointer) : $Builtin.Word // user: %104
  %104 = struct $StaticString (%103 : $Builtin.Word, %102 : $Builtin.Word, %18 : $Builtin.Int8) // user: %108
  %105 = integer_literal $Builtin.Int32, 0        // user: %106
  %106 = struct $UInt32 (%105 : $Builtin.Int32)   // user: %108
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %107 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %108
  %108 = apply %107(%104, %25, %19, %21, %106) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %109

bb16:                                             // Preds: bb13
  %110 = builtin "assumeNonNegative_Int64"(%88 : $Builtin.Int64) : $Builtin.Int64 // user: %111
  %111 = builtin "cmp_slt_Int64"(%84 : $Builtin.Int64, %110 : $Builtin.Int64) : $Builtin.Int1 // user: %112
  %112 = builtin "int_expect_Int1"(%111 : $Builtin.Int1, %69 : $Builtin.Int1) : $Builtin.Int1 // user: %113
  cond_br %112, bb17, bb18                        // id: %113

bb17:                                             // Preds: bb16
  %114 = builtin "truncOrBitCast_Int64_Word"(%84 : $Builtin.Int64) : $Builtin.Word // users: %122, %115
  %115 = index_addr [stack_protection] %8 : $*UInt8, %114 : $Builtin.Word // user: %116
  %116 = load %115 : $*UInt8                      // user: %120
  %117 = builtin "sadd_with_overflow_Int64"(%84 : $Builtin.Int64, %68 : $Builtin.Int64, %69 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %118
  %118 = tuple_extract %117 : $(Builtin.Int64, Builtin.Int1), 0 // users: %128, %125
  %119 = alloc_stack $UInt8                       // users: %124, %121, %120
  store %116 to %119 : $*UInt8                    // id: %120
  %121 = address_to_pointer [stack_protection] %119 : $*UInt8 to $Builtin.RawPointer // user: %123
  %122 = index_raw_pointer %42 : $Builtin.RawPointer, %114 : $Builtin.Word // user: %123
  %123 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%122 : $Builtin.RawPointer, %121 : $Builtin.RawPointer, %68 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %119 : $*UInt8                    // id: %124
  %125 = builtin "cmp_eq_Int64"(%118 : $Builtin.Int64, %65 : $Builtin.Int64) : $Builtin.Int1 // user: %126
  cond_br %125, bb20, bb19                        // id: %126

bb18:                                             // Preds: bb16
  br bb14                                         // id: %127

bb19:                                             // Preds: bb17
  br bb11(%118 : $Builtin.Int64)                  // id: %128

bb20:                                             // Preds: bb17
  br bb10                                         // id: %129

bb21:                                             // Preds: bb8
  br bb10                                         // id: %130
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #19168, stage LowLevel,Function, pass 0: ReleaseDevirtualizer (release-devirtualizer)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: noescape **, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %2, %59, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %3
  %3 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %4
  %4 = ref_element_addr [immutable] %3 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %5
  %5 = struct_element_addr %4 : $*_ArrayBody, #_ArrayBody._storage // user: %6
  %6 = struct_element_addr %5 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %7
  %7 = struct_element_addr %6 : $*Int, #Int._value // user: %8
  %8 = load %7 : $*Builtin.Int64                  // users: %34, %21
  %9 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %11
  %10 = integer_literal $Builtin.Word, 24         // user: %13
  %11 = builtin "ptrtoint_Word"(%9 : $Builtin.RawPointer) : $Builtin.Word // user: %13
  %12 = integer_literal $Builtin.Int8, 2          // users: %28, %19, %13
  %13 = struct $StaticString (%11 : $Builtin.Word, %10 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %14 = integer_literal $Builtin.Int64, 15505     // user: %15
  %15 = struct $UInt (%14 : $Builtin.Int64)       // user: %32
  %16 = string_literal utf8 ""                    // user: %18
  %17 = integer_literal $Builtin.Word, 0          // users: %40, %19
  %18 = builtin "ptrtoint_Word"(%16 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %19 = struct $StaticString (%18 : $Builtin.Word, %17 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %20 = integer_literal $Builtin.Int64, 0         // user: %21
  %21 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %20 : $Builtin.Int64) : $Builtin.Int1 // user: %23
  %22 = integer_literal $Builtin.Int1, 0          // user: %23
  %23 = builtin "int_expect_Int1"(%21 : $Builtin.Int1, %22 : $Builtin.Int1) : $Builtin.Int1 // user: %24
  cond_br %23, bb1, bb2                           // id: %24

bb1:                                              // Preds: bb0
  %25 = string_literal utf8 "Fatal error"         // user: %27
  %26 = integer_literal $Builtin.Word, 11         // user: %28
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %28
  %28 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %29 = integer_literal $Builtin.Int32, 0         // user: %30
  %30 = struct $UInt32 (%29 : $Builtin.Int32)     // user: %32
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %31 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %32
  %32 = apply %31(%28, %19, %13, %15, %30) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %33

bb2:                                              // Preds: bb0
  %34 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // users: %35, %39, %43
  debug_value %34 : $Builtin.Int64, let, name "count", argno 1, type $Int, expr op_fragment:#Int._value // id: %35
  %36 = alloc_ref [stack] $DataWrapper            // users: %51, %57, %38, %37
  debug_value %36 : $DataWrapper, let, name "self", argno 2, implicit // id: %37
  %38 = end_init_let_ref %36 : $DataWrapper       // users: %51, %56, %55, %54, %49
  %39 = builtin "truncOrBitCast_Int64_Word"(%34 : $Builtin.Int64) : $Builtin.Word // user: %40
  %40 = builtin "allocRaw"(%39 : $Builtin.Word, %17 : $Builtin.Word) : $Builtin.RawPointer // users: %45, %41
  %41 = struct $UnsafeMutableRawPointer (%40 : $Builtin.RawPointer) // user: %42
  %42 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %41 : $UnsafeMutableRawPointer // user: %48
  %43 = builtin "assumeNonNegative_Int64"(%34 : $Builtin.Int64) : $Builtin.Int64 // user: %44
  %44 = builtin "truncOrBitCast_Int64_Word"(%43 : $Builtin.Int64) : $Builtin.Word // user: %45
  %45 = index_raw_pointer %40 : $Builtin.RawPointer, %44 : $Builtin.Word // user: %46
  %46 = struct $UnsafeMutableRawPointer (%45 : $Builtin.RawPointer) // user: %47
  %47 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %46 : $UnsafeMutableRawPointer // user: %48
  %48 = struct $UnsafeMutableRawBufferPointer (%42 : $Optional<UnsafeMutableRawPointer>, %47 : $Optional<UnsafeMutableRawPointer>) // users: %59, %50
  %49 = ref_element_addr %38 : $DataWrapper, #DataWrapper.pointer // user: %50
  store %48 to %49 : $*UnsafeMutableRawBufferPointer // id: %50
  %51 = begin_dealloc_ref %38 : $DataWrapper of %36 : $DataWrapper // user: %53
  // function_ref DataWrapper.__deallocating_deinit
  %52 = function_ref @$s4main11DataWrapperCfD : $@convention(method) (@owned DataWrapper) -> () // user: %53
  %53 = apply %52(%51) : $@convention(method) (@owned DataWrapper) -> ()
  debug_value %38 : $DataWrapper, let, name "data" // id: %54
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %55
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %56
  dealloc_stack_ref %36 : $DataWrapper            // id: %57
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %58 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %59
  %59 = apply %58(%0, %48) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %60 = tuple ()                                  // user: %61
  return %60 : $()                                // id: %61
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #19190, stage LowLevel,Function, pass 24: PerfInliner (inline)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: noescape **, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %2, %74, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %3
  %3 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %4
  %4 = ref_element_addr [immutable] %3 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %5
  %5 = struct_element_addr %4 : $*_ArrayBody, #_ArrayBody._storage // user: %6
  %6 = struct_element_addr %5 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %7
  %7 = struct_element_addr %6 : $*Int, #Int._value // user: %8
  %8 = load %7 : $*Builtin.Int64                  // users: %34, %21
  %9 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %11
  %10 = integer_literal $Builtin.Word, 24         // user: %13
  %11 = builtin "ptrtoint_Word"(%9 : $Builtin.RawPointer) : $Builtin.Word // user: %13
  %12 = integer_literal $Builtin.Int8, 2          // users: %28, %19, %13
  %13 = struct $StaticString (%11 : $Builtin.Word, %10 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %14 = integer_literal $Builtin.Int64, 15505     // user: %15
  %15 = struct $UInt (%14 : $Builtin.Int64)       // user: %32
  %16 = string_literal utf8 ""                    // user: %18
  %17 = integer_literal $Builtin.Word, 0          // users: %40, %19
  %18 = builtin "ptrtoint_Word"(%16 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %19 = struct $StaticString (%18 : $Builtin.Word, %17 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %20 = integer_literal $Builtin.Int64, 0         // user: %21
  %21 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %20 : $Builtin.Int64) : $Builtin.Int1 // user: %23
  %22 = integer_literal $Builtin.Int1, 0          // user: %23
  %23 = builtin "int_expect_Int1"(%21 : $Builtin.Int1, %22 : $Builtin.Int1) : $Builtin.Int1 // user: %24
  cond_br %23, bb1, bb2                           // id: %24

bb1:                                              // Preds: bb0
  %25 = string_literal utf8 "Fatal error"         // user: %27
  %26 = integer_literal $Builtin.Word, 11         // user: %28
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %28
  %28 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %29 = integer_literal $Builtin.Int32, 0         // user: %30
  %30 = struct $UInt32 (%29 : $Builtin.Int32)     // user: %32
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %31 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %32
  %32 = apply %31(%28, %19, %13, %15, %30) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %33

bb2:                                              // Preds: bb0
  %34 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // users: %35, %39, %43
  debug_value %34 : $Builtin.Int64, let, name "count", argno 1, type $Int, expr op_fragment:#Int._value // id: %35
  %36 = alloc_ref [stack] $DataWrapper            // users: %51, %72, %38, %37
  debug_value %36 : $DataWrapper, let, name "self", argno 2, implicit // id: %37
  %38 = end_init_let_ref %36 : $DataWrapper       // users: %51, %71, %70, %69, %49
  %39 = builtin "truncOrBitCast_Int64_Word"(%34 : $Builtin.Int64) : $Builtin.Word // user: %40
  %40 = builtin "allocRaw"(%39 : $Builtin.Word, %17 : $Builtin.Word) : $Builtin.RawPointer // users: %45, %41
  %41 = struct $UnsafeMutableRawPointer (%40 : $Builtin.RawPointer) // user: %42
  %42 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %41 : $UnsafeMutableRawPointer // user: %48
  %43 = builtin "assumeNonNegative_Int64"(%34 : $Builtin.Int64) : $Builtin.Int64 // user: %44
  %44 = builtin "truncOrBitCast_Int64_Word"(%43 : $Builtin.Int64) : $Builtin.Word // user: %45
  %45 = index_raw_pointer %40 : $Builtin.RawPointer, %44 : $Builtin.Word // user: %46
  %46 = struct $UnsafeMutableRawPointer (%45 : $Builtin.RawPointer) // user: %47
  %47 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %46 : $UnsafeMutableRawPointer // user: %48
  %48 = struct $UnsafeMutableRawBufferPointer (%42 : $Optional<UnsafeMutableRawPointer>, %47 : $Optional<UnsafeMutableRawPointer>) // users: %74, %50
  %49 = ref_element_addr %38 : $DataWrapper, #DataWrapper.pointer // user: %50
  store %48 to %49 : $*UnsafeMutableRawBufferPointer // id: %50
  %51 = begin_dealloc_ref %38 : $DataWrapper of %36 : $DataWrapper // users: %67, %54, %53, %52
  debug_value %51 : $DataWrapper, let, name "self", argno 1, implicit // id: %52
  debug_value %51 : $DataWrapper, let, name "self", argno 1, implicit // id: %53
  %54 = ref_element_addr %51 : $DataWrapper, #DataWrapper.pointer // user: %55
  %55 = begin_access [read] [dynamic] [no_nested_conflict] %54 : $*UnsafeMutableRawBufferPointer // users: %58, %56
  %56 = struct_element_addr %55 : $*UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %57
  %57 = load %56 : $*Optional<UnsafeMutableRawPointer> // user: %59
  end_access %55 : $*UnsafeMutableRawBufferPointer // id: %58
  switch_enum %57 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb3, case #Optional.none!enumelt: bb4 // id: %59

// %60                                            // user: %61
bb3(%60 : $UnsafeMutableRawPointer):              // Preds: bb2
  %61 = struct_extract %60 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %64
  %62 = integer_literal $Builtin.Word, -1         // user: %64
  %63 = integer_literal $Builtin.Word, 0          // user: %64
  %64 = builtin "deallocRaw"(%61 : $Builtin.RawPointer, %62 : $Builtin.Word, %63 : $Builtin.Word) : $()
  br bb5                                          // id: %65

bb4:                                              // Preds: bb2
  br bb5                                          // id: %66

bb5:                                              // Preds: bb4 bb3
  dealloc_ref %51 : $DataWrapper                  // id: %67
  %68 = tuple ()
  debug_value %38 : $DataWrapper, let, name "data" // id: %69
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %70
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %71
  dealloc_stack_ref %36 : $DataWrapper            // id: %72
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %73 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %74
  %74 = apply %73(%0, %48) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %75 = tuple ()                                  // user: %76
  return %75 : $()                                // id: %76
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #19195, stage LowLevel,Function, pass 4: DCE (dce)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: noescape **, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %2, %73, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %3
  %3 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %4
  %4 = ref_element_addr [immutable] %3 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %5
  %5 = struct_element_addr %4 : $*_ArrayBody, #_ArrayBody._storage // user: %6
  %6 = struct_element_addr %5 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %7
  %7 = struct_element_addr %6 : $*Int, #Int._value // user: %8
  %8 = load %7 : $*Builtin.Int64                  // users: %34, %21
  %9 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %11
  %10 = integer_literal $Builtin.Word, 24         // user: %13
  %11 = builtin "ptrtoint_Word"(%9 : $Builtin.RawPointer) : $Builtin.Word // user: %13
  %12 = integer_literal $Builtin.Int8, 2          // users: %28, %19, %13
  %13 = struct $StaticString (%11 : $Builtin.Word, %10 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %14 = integer_literal $Builtin.Int64, 15505     // user: %15
  %15 = struct $UInt (%14 : $Builtin.Int64)       // user: %32
  %16 = string_literal utf8 ""                    // user: %18
  %17 = integer_literal $Builtin.Word, 0          // users: %40, %19
  %18 = builtin "ptrtoint_Word"(%16 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %19 = struct $StaticString (%18 : $Builtin.Word, %17 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %20 = integer_literal $Builtin.Int64, 0         // user: %21
  %21 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %20 : $Builtin.Int64) : $Builtin.Int1 // user: %23
  %22 = integer_literal $Builtin.Int1, 0          // user: %23
  %23 = builtin "int_expect_Int1"(%21 : $Builtin.Int1, %22 : $Builtin.Int1) : $Builtin.Int1 // user: %24
  cond_br %23, bb1, bb2                           // id: %24

bb1:                                              // Preds: bb0
  %25 = string_literal utf8 "Fatal error"         // user: %27
  %26 = integer_literal $Builtin.Word, 11         // user: %28
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %28
  %28 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %29 = integer_literal $Builtin.Int32, 0         // user: %30
  %30 = struct $UInt32 (%29 : $Builtin.Int32)     // user: %32
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %31 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %32
  %32 = apply %31(%28, %19, %13, %15, %30) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %33

bb2:                                              // Preds: bb0
  %34 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // users: %35, %39, %43
  debug_value %34 : $Builtin.Int64, let, name "count", argno 1, type $Int, expr op_fragment:#Int._value // id: %35
  %36 = alloc_ref [stack] $DataWrapper            // users: %51, %71, %38, %37
  debug_value %36 : $DataWrapper, let, name "self", argno 2, implicit // id: %37
  %38 = end_init_let_ref %36 : $DataWrapper       // users: %51, %70, %69, %68, %49
  %39 = builtin "truncOrBitCast_Int64_Word"(%34 : $Builtin.Int64) : $Builtin.Word // user: %40
  %40 = builtin "allocRaw"(%39 : $Builtin.Word, %17 : $Builtin.Word) : $Builtin.RawPointer // users: %45, %41
  %41 = struct $UnsafeMutableRawPointer (%40 : $Builtin.RawPointer) // user: %42
  %42 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %41 : $UnsafeMutableRawPointer // user: %48
  %43 = builtin "assumeNonNegative_Int64"(%34 : $Builtin.Int64) : $Builtin.Int64 // user: %44
  %44 = builtin "truncOrBitCast_Int64_Word"(%43 : $Builtin.Int64) : $Builtin.Word // user: %45
  %45 = index_raw_pointer %40 : $Builtin.RawPointer, %44 : $Builtin.Word // user: %46
  %46 = struct $UnsafeMutableRawPointer (%45 : $Builtin.RawPointer) // user: %47
  %47 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %46 : $UnsafeMutableRawPointer // user: %48
  %48 = struct $UnsafeMutableRawBufferPointer (%42 : $Optional<UnsafeMutableRawPointer>, %47 : $Optional<UnsafeMutableRawPointer>) // users: %73, %50
  %49 = ref_element_addr %38 : $DataWrapper, #DataWrapper.pointer // user: %50
  store %48 to %49 : $*UnsafeMutableRawBufferPointer // id: %50
  %51 = begin_dealloc_ref %38 : $DataWrapper of %36 : $DataWrapper // users: %67, %54, %53, %52
  debug_value %51 : $DataWrapper, let, name "self", argno 1, implicit // id: %52
  debug_value %51 : $DataWrapper, let, name "self", argno 1, implicit // id: %53
  %54 = ref_element_addr %51 : $DataWrapper, #DataWrapper.pointer // user: %55
  %55 = begin_access [read] [dynamic] [no_nested_conflict] %54 : $*UnsafeMutableRawBufferPointer // users: %58, %56
  %56 = struct_element_addr %55 : $*UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %57
  %57 = load %56 : $*Optional<UnsafeMutableRawPointer> // user: %59
  end_access %55 : $*UnsafeMutableRawBufferPointer // id: %58
  switch_enum %57 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb3, case #Optional.none!enumelt: bb4 // id: %59

// %60                                            // user: %61
bb3(%60 : $UnsafeMutableRawPointer):              // Preds: bb2
  %61 = struct_extract %60 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %64
  %62 = integer_literal $Builtin.Word, -1         // user: %64
  %63 = integer_literal $Builtin.Word, 0          // user: %64
  %64 = builtin "deallocRaw"(%61 : $Builtin.RawPointer, %62 : $Builtin.Word, %63 : $Builtin.Word) : $()
  br bb5                                          // id: %65

bb4:                                              // Preds: bb2
  br bb5                                          // id: %66

bb5:                                              // Preds: bb4 bb3
  dealloc_ref %51 : $DataWrapper                  // id: %67
  debug_value %38 : $DataWrapper, let, name "data" // id: %68
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %69
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %70
  dealloc_stack_ref %36 : $DataWrapper            // id: %71
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %72 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %73
  %73 = apply %72(%0, %48) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %74 = tuple ()                                  // user: %75
  return %74 : $()                                // id: %75
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #19216, stage LowLevel,Function, pass 31: CSE (cse)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: noescape **, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %2, %72, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %3
  %3 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %4
  %4 = ref_element_addr [immutable] %3 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %5
  %5 = struct_element_addr %4 : $*_ArrayBody, #_ArrayBody._storage // user: %6
  %6 = struct_element_addr %5 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %7
  %7 = struct_element_addr %6 : $*Int, #Int._value // user: %8
  %8 = load %7 : $*Builtin.Int64                  // users: %34, %21
  %9 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %11
  %10 = integer_literal $Builtin.Word, 24         // user: %13
  %11 = builtin "ptrtoint_Word"(%9 : $Builtin.RawPointer) : $Builtin.Word // user: %13
  %12 = integer_literal $Builtin.Int8, 2          // users: %28, %19, %13
  %13 = struct $StaticString (%11 : $Builtin.Word, %10 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %14 = integer_literal $Builtin.Int64, 15505     // user: %15
  %15 = struct $UInt (%14 : $Builtin.Int64)       // user: %32
  %16 = string_literal utf8 ""                    // user: %18
  %17 = integer_literal $Builtin.Word, 0          // users: %63, %40, %19
  %18 = builtin "ptrtoint_Word"(%16 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %19 = struct $StaticString (%18 : $Builtin.Word, %17 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %20 = integer_literal $Builtin.Int64, 0         // user: %21
  %21 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %20 : $Builtin.Int64) : $Builtin.Int1 // user: %23
  %22 = integer_literal $Builtin.Int1, 0          // user: %23
  %23 = builtin "int_expect_Int1"(%21 : $Builtin.Int1, %22 : $Builtin.Int1) : $Builtin.Int1 // user: %24
  cond_br %23, bb1, bb2                           // id: %24

bb1:                                              // Preds: bb0
  %25 = string_literal utf8 "Fatal error"         // user: %27
  %26 = integer_literal $Builtin.Word, 11         // user: %28
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %28
  %28 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %29 = integer_literal $Builtin.Int32, 0         // user: %30
  %30 = struct $UInt32 (%29 : $Builtin.Int32)     // user: %32
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %31 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %32
  %32 = apply %31(%28, %19, %13, %15, %30) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %33

bb2:                                              // Preds: bb0
  %34 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // users: %35, %39, %43
  debug_value %34 : $Builtin.Int64, let, name "count", argno 1, type $Int, expr op_fragment:#Int._value // id: %35
  %36 = alloc_ref [stack] $DataWrapper            // users: %51, %70, %38, %37
  debug_value %36 : $DataWrapper, let, name "self", argno 2, implicit // id: %37
  %38 = end_init_let_ref %36 : $DataWrapper       // users: %51, %69, %68, %67, %49
  %39 = builtin "truncOrBitCast_Int64_Word"(%34 : $Builtin.Int64) : $Builtin.Word // user: %40
  %40 = builtin "allocRaw"(%39 : $Builtin.Word, %17 : $Builtin.Word) : $Builtin.RawPointer // users: %45, %41
  %41 = struct $UnsafeMutableRawPointer (%40 : $Builtin.RawPointer) // user: %42
  %42 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %41 : $UnsafeMutableRawPointer // user: %48
  %43 = builtin "assumeNonNegative_Int64"(%34 : $Builtin.Int64) : $Builtin.Int64 // user: %44
  %44 = builtin "truncOrBitCast_Int64_Word"(%43 : $Builtin.Int64) : $Builtin.Word // user: %45
  %45 = index_raw_pointer %40 : $Builtin.RawPointer, %44 : $Builtin.Word // user: %46
  %46 = struct $UnsafeMutableRawPointer (%45 : $Builtin.RawPointer) // user: %47
  %47 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %46 : $UnsafeMutableRawPointer // user: %48
  %48 = struct $UnsafeMutableRawBufferPointer (%42 : $Optional<UnsafeMutableRawPointer>, %47 : $Optional<UnsafeMutableRawPointer>) // users: %72, %50
  %49 = ref_element_addr %38 : $DataWrapper, #DataWrapper.pointer // user: %50
  store %48 to %49 : $*UnsafeMutableRawBufferPointer // id: %50
  %51 = begin_dealloc_ref %38 : $DataWrapper of %36 : $DataWrapper // users: %66, %54, %53, %52
  debug_value %51 : $DataWrapper, let, name "self", argno 1, implicit // id: %52
  debug_value %51 : $DataWrapper, let, name "self", argno 1, implicit // id: %53
  %54 = ref_element_addr %51 : $DataWrapper, #DataWrapper.pointer // user: %55
  %55 = begin_access [read] [dynamic] [no_nested_conflict] %54 : $*UnsafeMutableRawBufferPointer // users: %58, %56
  %56 = struct_element_addr %55 : $*UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %57
  %57 = load %56 : $*Optional<UnsafeMutableRawPointer> // user: %59
  end_access %55 : $*UnsafeMutableRawBufferPointer // id: %58
  switch_enum %57 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb3, case #Optional.none!enumelt: bb4 // id: %59

// %60                                            // user: %61
bb3(%60 : $UnsafeMutableRawPointer):              // Preds: bb2
  %61 = struct_extract %60 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %63
  %62 = integer_literal $Builtin.Word, -1         // user: %63
  %63 = builtin "deallocRaw"(%61 : $Builtin.RawPointer, %62 : $Builtin.Word, %17 : $Builtin.Word) : $()
  br bb5                                          // id: %64

bb4:                                              // Preds: bb2
  br bb5                                          // id: %65

bb5:                                              // Preds: bb4 bb3
  dealloc_ref %51 : $DataWrapper                  // id: %66
  debug_value %38 : $DataWrapper, let, name "data" // id: %67
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %68
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %69
  dealloc_stack_ref %36 : $DataWrapper            // id: %70
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %71 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %72
  %72 = apply %71(%0, %48) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %73 = tuple ()                                  // user: %74
  return %73 : $()                                // id: %74
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #19217, stage LowLevel,Function, pass 32: RedundantLoadElimination (redundant-load-elimination)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: noescape **, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %2, %72, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %3
  %3 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %4
  %4 = ref_element_addr [immutable] %3 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %5
  %5 = struct_element_addr %4 : $*_ArrayBody, #_ArrayBody._storage // user: %6
  %6 = struct_element_addr %5 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %7
  %7 = struct_element_addr %6 : $*Int, #Int._value // user: %8
  %8 = load %7 : $*Builtin.Int64                  // users: %34, %21
  %9 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %11
  %10 = integer_literal $Builtin.Word, 24         // user: %13
  %11 = builtin "ptrtoint_Word"(%9 : $Builtin.RawPointer) : $Builtin.Word // user: %13
  %12 = integer_literal $Builtin.Int8, 2          // users: %28, %19, %13
  %13 = struct $StaticString (%11 : $Builtin.Word, %10 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %14 = integer_literal $Builtin.Int64, 15505     // user: %15
  %15 = struct $UInt (%14 : $Builtin.Int64)       // user: %32
  %16 = string_literal utf8 ""                    // user: %18
  %17 = integer_literal $Builtin.Word, 0          // users: %63, %40, %19
  %18 = builtin "ptrtoint_Word"(%16 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %19 = struct $StaticString (%18 : $Builtin.Word, %17 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %20 = integer_literal $Builtin.Int64, 0         // user: %21
  %21 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %20 : $Builtin.Int64) : $Builtin.Int1 // user: %23
  %22 = integer_literal $Builtin.Int1, 0          // user: %23
  %23 = builtin "int_expect_Int1"(%21 : $Builtin.Int1, %22 : $Builtin.Int1) : $Builtin.Int1 // user: %24
  cond_br %23, bb1, bb2                           // id: %24

bb1:                                              // Preds: bb0
  %25 = string_literal utf8 "Fatal error"         // user: %27
  %26 = integer_literal $Builtin.Word, 11         // user: %28
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %28
  %28 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %29 = integer_literal $Builtin.Int32, 0         // user: %30
  %30 = struct $UInt32 (%29 : $Builtin.Int32)     // user: %32
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %31 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %32
  %32 = apply %31(%28, %19, %13, %15, %30) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %33

bb2:                                              // Preds: bb0
  %34 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // users: %35, %39, %43
  debug_value %34 : $Builtin.Int64, let, name "count", argno 1, type $Int, expr op_fragment:#Int._value // id: %35
  %36 = alloc_ref [stack] $DataWrapper            // users: %52, %70, %38, %37
  debug_value %36 : $DataWrapper, let, name "self", argno 2, implicit // id: %37
  %38 = end_init_let_ref %36 : $DataWrapper       // users: %52, %69, %68, %67, %49
  %39 = builtin "truncOrBitCast_Int64_Word"(%34 : $Builtin.Int64) : $Builtin.Word // user: %40
  %40 = builtin "allocRaw"(%39 : $Builtin.Word, %17 : $Builtin.Word) : $Builtin.RawPointer // users: %45, %41
  %41 = struct $UnsafeMutableRawPointer (%40 : $Builtin.RawPointer) // user: %42
  %42 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %41 : $UnsafeMutableRawPointer // user: %48
  %43 = builtin "assumeNonNegative_Int64"(%34 : $Builtin.Int64) : $Builtin.Int64 // user: %44
  %44 = builtin "truncOrBitCast_Int64_Word"(%43 : $Builtin.Int64) : $Builtin.Word // user: %45
  %45 = index_raw_pointer %40 : $Builtin.RawPointer, %44 : $Builtin.Word // user: %46
  %46 = struct $UnsafeMutableRawPointer (%45 : $Builtin.RawPointer) // user: %47
  %47 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %46 : $UnsafeMutableRawPointer // user: %48
  %48 = struct $UnsafeMutableRawBufferPointer (%42 : $Optional<UnsafeMutableRawPointer>, %47 : $Optional<UnsafeMutableRawPointer>) // users: %50, %72, %51
  %49 = ref_element_addr %38 : $DataWrapper, #DataWrapper.pointer // user: %51
  %50 = struct_extract %48 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %59
  store %48 to %49 : $*UnsafeMutableRawBufferPointer // id: %51
  %52 = begin_dealloc_ref %38 : $DataWrapper of %36 : $DataWrapper // users: %66, %55, %54, %53
  debug_value %52 : $DataWrapper, let, name "self", argno 1, implicit // id: %53
  debug_value %52 : $DataWrapper, let, name "self", argno 1, implicit // id: %54
  %55 = ref_element_addr %52 : $DataWrapper, #DataWrapper.pointer // user: %56
  %56 = begin_access [read] [dynamic] [no_nested_conflict] %55 : $*UnsafeMutableRawBufferPointer // users: %58, %57
  %57 = struct_element_addr %56 : $*UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position
  end_access %56 : $*UnsafeMutableRawBufferPointer // id: %58
  switch_enum %50 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb3, case #Optional.none!enumelt: bb4 // id: %59

// %60                                            // user: %61
bb3(%60 : $UnsafeMutableRawPointer):              // Preds: bb2
  %61 = struct_extract %60 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %63
  %62 = integer_literal $Builtin.Word, -1         // user: %63
  %63 = builtin "deallocRaw"(%61 : $Builtin.RawPointer, %62 : $Builtin.Word, %17 : $Builtin.Word) : $()
  br bb5                                          // id: %64

bb4:                                              // Preds: bb2
  br bb5                                          // id: %65

bb5:                                              // Preds: bb4 bb3
  dealloc_ref %52 : $DataWrapper                  // id: %66
  debug_value %38 : $DataWrapper, let, name "data" // id: %67
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %68
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %69
  dealloc_stack_ref %36 : $DataWrapper            // id: %70
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %71 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %72
  %72 = apply %71(%0, %48) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %73 = tuple ()                                  // user: %74
  return %73 : $()                                // id: %74
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #19220, stage LowLevel,Function, pass 35: PerformanceConstantPropagation (performance-constant-propagation)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: noescape **, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %2, %71, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %3
  %3 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %4
  %4 = ref_element_addr [immutable] %3 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %5
  %5 = struct_element_addr %4 : $*_ArrayBody, #_ArrayBody._storage // user: %6
  %6 = struct_element_addr %5 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %7
  %7 = struct_element_addr %6 : $*Int, #Int._value // user: %8
  %8 = load %7 : $*Builtin.Int64                  // users: %34, %21
  %9 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %11
  %10 = integer_literal $Builtin.Word, 24         // user: %13
  %11 = builtin "ptrtoint_Word"(%9 : $Builtin.RawPointer) : $Builtin.Word // user: %13
  %12 = integer_literal $Builtin.Int8, 2          // users: %28, %19, %13
  %13 = struct $StaticString (%11 : $Builtin.Word, %10 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %14 = integer_literal $Builtin.Int64, 15505     // user: %15
  %15 = struct $UInt (%14 : $Builtin.Int64)       // user: %32
  %16 = string_literal utf8 ""                    // user: %18
  %17 = integer_literal $Builtin.Word, 0          // users: %62, %40, %19
  %18 = builtin "ptrtoint_Word"(%16 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %19 = struct $StaticString (%18 : $Builtin.Word, %17 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %20 = integer_literal $Builtin.Int64, 0         // user: %21
  %21 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %20 : $Builtin.Int64) : $Builtin.Int1 // user: %23
  %22 = integer_literal $Builtin.Int1, 0          // user: %23
  %23 = builtin "int_expect_Int1"(%21 : $Builtin.Int1, %22 : $Builtin.Int1) : $Builtin.Int1 // user: %24
  cond_br %23, bb1, bb2                           // id: %24

bb1:                                              // Preds: bb0
  %25 = string_literal utf8 "Fatal error"         // user: %27
  %26 = integer_literal $Builtin.Word, 11         // user: %28
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %28
  %28 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %29 = integer_literal $Builtin.Int32, 0         // user: %30
  %30 = struct $UInt32 (%29 : $Builtin.Int32)     // user: %32
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %31 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %32
  %32 = apply %31(%28, %19, %13, %15, %30) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %33

bb2:                                              // Preds: bb0
  %34 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // users: %35, %39, %43
  debug_value %34 : $Builtin.Int64, let, name "count", argno 1, type $Int, expr op_fragment:#Int._value // id: %35
  %36 = alloc_ref [stack] $DataWrapper            // users: %51, %69, %38, %37
  debug_value %36 : $DataWrapper, let, name "self", argno 2, implicit // id: %37
  %38 = end_init_let_ref %36 : $DataWrapper       // users: %51, %68, %67, %66, %49
  %39 = builtin "truncOrBitCast_Int64_Word"(%34 : $Builtin.Int64) : $Builtin.Word // user: %40
  %40 = builtin "allocRaw"(%39 : $Builtin.Word, %17 : $Builtin.Word) : $Builtin.RawPointer // users: %45, %41
  %41 = struct $UnsafeMutableRawPointer (%40 : $Builtin.RawPointer) // user: %42
  %42 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %41 : $UnsafeMutableRawPointer // users: %58, %48
  %43 = builtin "assumeNonNegative_Int64"(%34 : $Builtin.Int64) : $Builtin.Int64 // user: %44
  %44 = builtin "truncOrBitCast_Int64_Word"(%43 : $Builtin.Int64) : $Builtin.Word // user: %45
  %45 = index_raw_pointer %40 : $Builtin.RawPointer, %44 : $Builtin.Word // user: %46
  %46 = struct $UnsafeMutableRawPointer (%45 : $Builtin.RawPointer) // user: %47
  %47 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %46 : $UnsafeMutableRawPointer // user: %48
  %48 = struct $UnsafeMutableRawBufferPointer (%42 : $Optional<UnsafeMutableRawPointer>, %47 : $Optional<UnsafeMutableRawPointer>) // users: %71, %50
  %49 = ref_element_addr %38 : $DataWrapper, #DataWrapper.pointer // user: %50
  store %48 to %49 : $*UnsafeMutableRawBufferPointer // id: %50
  %51 = begin_dealloc_ref %38 : $DataWrapper of %36 : $DataWrapper // users: %65, %54, %53, %52
  debug_value %51 : $DataWrapper, let, name "self", argno 1, implicit // id: %52
  debug_value %51 : $DataWrapper, let, name "self", argno 1, implicit // id: %53
  %54 = ref_element_addr %51 : $DataWrapper, #DataWrapper.pointer // user: %55
  %55 = begin_access [read] [dynamic] [no_nested_conflict] %54 : $*UnsafeMutableRawBufferPointer // users: %57, %56
  %56 = struct_element_addr %55 : $*UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position
  end_access %55 : $*UnsafeMutableRawBufferPointer // id: %57
  switch_enum %42 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb3, case #Optional.none!enumelt: bb4 // id: %58

// %59                                            // user: %60
bb3(%59 : $UnsafeMutableRawPointer):              // Preds: bb2
  %60 = struct_extract %59 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %62
  %61 = integer_literal $Builtin.Word, -1         // user: %62
  %62 = builtin "deallocRaw"(%60 : $Builtin.RawPointer, %61 : $Builtin.Word, %17 : $Builtin.Word) : $()
  br bb5                                          // id: %63

bb4:                                              // Preds: bb2
  br bb5                                          // id: %64

bb5:                                              // Preds: bb4 bb3
  dealloc_ref %51 : $DataWrapper                  // id: %65
  debug_value %38 : $DataWrapper, let, name "data" // id: %66
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %67
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %68
  dealloc_stack_ref %36 : $DataWrapper            // id: %69
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %70 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %71
  %71 = apply %70(%0, %48) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %72 = tuple ()                                  // user: %73
  return %72 : $()                                // id: %73
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #19222, stage LowLevel,Function, pass 37: CSE (cse)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: noescape **, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %2, %70, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %3
  %3 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %4
  %4 = ref_element_addr [immutable] %3 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %5
  %5 = struct_element_addr %4 : $*_ArrayBody, #_ArrayBody._storage // user: %6
  %6 = struct_element_addr %5 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %7
  %7 = struct_element_addr %6 : $*Int, #Int._value // user: %8
  %8 = load %7 : $*Builtin.Int64                  // users: %34, %21
  %9 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %11
  %10 = integer_literal $Builtin.Word, 24         // user: %13
  %11 = builtin "ptrtoint_Word"(%9 : $Builtin.RawPointer) : $Builtin.Word // user: %13
  %12 = integer_literal $Builtin.Int8, 2          // users: %28, %19, %13
  %13 = struct $StaticString (%11 : $Builtin.Word, %10 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %14 = integer_literal $Builtin.Int64, 15505     // user: %15
  %15 = struct $UInt (%14 : $Builtin.Int64)       // user: %32
  %16 = string_literal utf8 ""                    // user: %18
  %17 = integer_literal $Builtin.Word, 0          // users: %61, %40, %19
  %18 = builtin "ptrtoint_Word"(%16 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %19 = struct $StaticString (%18 : $Builtin.Word, %17 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %20 = integer_literal $Builtin.Int64, 0         // user: %21
  %21 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %20 : $Builtin.Int64) : $Builtin.Int1 // user: %23
  %22 = integer_literal $Builtin.Int1, 0          // user: %23
  %23 = builtin "int_expect_Int1"(%21 : $Builtin.Int1, %22 : $Builtin.Int1) : $Builtin.Int1 // user: %24
  cond_br %23, bb1, bb2                           // id: %24

bb1:                                              // Preds: bb0
  %25 = string_literal utf8 "Fatal error"         // user: %27
  %26 = integer_literal $Builtin.Word, 11         // user: %28
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %28
  %28 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %29 = integer_literal $Builtin.Int32, 0         // user: %30
  %30 = struct $UInt32 (%29 : $Builtin.Int32)     // user: %32
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %31 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %32
  %32 = apply %31(%28, %19, %13, %15, %30) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %33

bb2:                                              // Preds: bb0
  %34 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // users: %35, %39, %43
  debug_value %34 : $Builtin.Int64, let, name "count", argno 1, type $Int, expr op_fragment:#Int._value // id: %35
  %36 = alloc_ref [stack] $DataWrapper            // users: %51, %68, %38, %37
  debug_value %36 : $DataWrapper, let, name "self", argno 2, implicit // id: %37
  %38 = end_init_let_ref %36 : $DataWrapper       // users: %51, %67, %66, %65, %49
  %39 = builtin "truncOrBitCast_Int64_Word"(%34 : $Builtin.Int64) : $Builtin.Word // user: %40
  %40 = builtin "allocRaw"(%39 : $Builtin.Word, %17 : $Builtin.Word) : $Builtin.RawPointer // users: %45, %41
  %41 = struct $UnsafeMutableRawPointer (%40 : $Builtin.RawPointer) // user: %42
  %42 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %41 : $UnsafeMutableRawPointer // users: %57, %48
  %43 = builtin "assumeNonNegative_Int64"(%34 : $Builtin.Int64) : $Builtin.Int64 // user: %44
  %44 = builtin "truncOrBitCast_Int64_Word"(%43 : $Builtin.Int64) : $Builtin.Word // user: %45
  %45 = index_raw_pointer %40 : $Builtin.RawPointer, %44 : $Builtin.Word // user: %46
  %46 = struct $UnsafeMutableRawPointer (%45 : $Builtin.RawPointer) // user: %47
  %47 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %46 : $UnsafeMutableRawPointer // user: %48
  %48 = struct $UnsafeMutableRawBufferPointer (%42 : $Optional<UnsafeMutableRawPointer>, %47 : $Optional<UnsafeMutableRawPointer>) // users: %70, %50
  %49 = ref_element_addr %38 : $DataWrapper, #DataWrapper.pointer // user: %50
  store %48 to %49 : $*UnsafeMutableRawBufferPointer // id: %50
  %51 = begin_dealloc_ref %38 : $DataWrapper of %36 : $DataWrapper // users: %64, %54, %53, %52
  debug_value %51 : $DataWrapper, let, name "self", argno 1, implicit // id: %52
  debug_value %51 : $DataWrapper, let, name "self", argno 1, implicit // id: %53
  %54 = ref_element_addr %51 : $DataWrapper, #DataWrapper.pointer // user: %55
  %55 = begin_access [read] [dynamic] [no_nested_conflict] %54 : $*UnsafeMutableRawBufferPointer // user: %56
  end_access %55 : $*UnsafeMutableRawBufferPointer // id: %56
  switch_enum %42 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb3, case #Optional.none!enumelt: bb4 // id: %57

// %58                                            // user: %59
bb3(%58 : $UnsafeMutableRawPointer):              // Preds: bb2
  %59 = struct_extract %58 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %61
  %60 = integer_literal $Builtin.Word, -1         // user: %61
  %61 = builtin "deallocRaw"(%59 : $Builtin.RawPointer, %60 : $Builtin.Word, %17 : $Builtin.Word) : $()
  br bb5                                          // id: %62

bb4:                                              // Preds: bb2
  br bb5                                          // id: %63

bb5:                                              // Preds: bb4 bb3
  dealloc_ref %51 : $DataWrapper                  // id: %64
  debug_value %38 : $DataWrapper, let, name "data" // id: %65
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %66
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %67
  dealloc_stack_ref %36 : $DataWrapper            // id: %68
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %69 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %70
  %70 = apply %69(%0, %48) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %71 = tuple ()                                  // user: %72
  return %71 : $()                                // id: %72
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #19223, stage LowLevel,Function, pass 38: DCE (dce)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: noescape **, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %2, %67, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %3
  %3 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %4
  %4 = ref_element_addr [immutable] %3 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %5
  %5 = struct_element_addr %4 : $*_ArrayBody, #_ArrayBody._storage // user: %6
  %6 = struct_element_addr %5 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %7
  %7 = struct_element_addr %6 : $*Int, #Int._value // user: %8
  %8 = load %7 : $*Builtin.Int64                  // users: %34, %21
  %9 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %11
  %10 = integer_literal $Builtin.Word, 24         // user: %13
  %11 = builtin "ptrtoint_Word"(%9 : $Builtin.RawPointer) : $Builtin.Word // user: %13
  %12 = integer_literal $Builtin.Int8, 2          // users: %28, %19, %13
  %13 = struct $StaticString (%11 : $Builtin.Word, %10 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %14 = integer_literal $Builtin.Int64, 15505     // user: %15
  %15 = struct $UInt (%14 : $Builtin.Int64)       // user: %32
  %16 = string_literal utf8 ""                    // user: %18
  %17 = integer_literal $Builtin.Word, 0          // users: %58, %40, %19
  %18 = builtin "ptrtoint_Word"(%16 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %19 = struct $StaticString (%18 : $Builtin.Word, %17 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %20 = integer_literal $Builtin.Int64, 0         // user: %21
  %21 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %20 : $Builtin.Int64) : $Builtin.Int1 // user: %23
  %22 = integer_literal $Builtin.Int1, 0          // user: %23
  %23 = builtin "int_expect_Int1"(%21 : $Builtin.Int1, %22 : $Builtin.Int1) : $Builtin.Int1 // user: %24
  cond_br %23, bb1, bb2                           // id: %24

bb1:                                              // Preds: bb0
  %25 = string_literal utf8 "Fatal error"         // user: %27
  %26 = integer_literal $Builtin.Word, 11         // user: %28
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %28
  %28 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %29 = integer_literal $Builtin.Int32, 0         // user: %30
  %30 = struct $UInt32 (%29 : $Builtin.Int32)     // user: %32
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %31 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %32
  %32 = apply %31(%28, %19, %13, %15, %30) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %33

bb2:                                              // Preds: bb0
  %34 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // users: %35, %39, %43
  debug_value %34 : $Builtin.Int64, let, name "count", argno 1, type $Int, expr op_fragment:#Int._value // id: %35
  %36 = alloc_ref [stack] $DataWrapper            // users: %51, %65, %38, %37
  debug_value %36 : $DataWrapper, let, name "self", argno 2, implicit // id: %37
  %38 = end_init_let_ref %36 : $DataWrapper       // users: %51, %64, %63, %62, %49
  %39 = builtin "truncOrBitCast_Int64_Word"(%34 : $Builtin.Int64) : $Builtin.Word // user: %40
  %40 = builtin "allocRaw"(%39 : $Builtin.Word, %17 : $Builtin.Word) : $Builtin.RawPointer // users: %45, %41
  %41 = struct $UnsafeMutableRawPointer (%40 : $Builtin.RawPointer) // user: %42
  %42 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %41 : $UnsafeMutableRawPointer // users: %54, %48
  %43 = builtin "assumeNonNegative_Int64"(%34 : $Builtin.Int64) : $Builtin.Int64 // user: %44
  %44 = builtin "truncOrBitCast_Int64_Word"(%43 : $Builtin.Int64) : $Builtin.Word // user: %45
  %45 = index_raw_pointer %40 : $Builtin.RawPointer, %44 : $Builtin.Word // user: %46
  %46 = struct $UnsafeMutableRawPointer (%45 : $Builtin.RawPointer) // user: %47
  %47 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %46 : $UnsafeMutableRawPointer // user: %48
  %48 = struct $UnsafeMutableRawBufferPointer (%42 : $Optional<UnsafeMutableRawPointer>, %47 : $Optional<UnsafeMutableRawPointer>) // users: %67, %50
  %49 = ref_element_addr %38 : $DataWrapper, #DataWrapper.pointer // user: %50
  store %48 to %49 : $*UnsafeMutableRawBufferPointer // id: %50
  %51 = begin_dealloc_ref %38 : $DataWrapper of %36 : $DataWrapper // users: %61, %53, %52
  debug_value %51 : $DataWrapper, let, name "self", argno 1, implicit // id: %52
  debug_value %51 : $DataWrapper, let, name "self", argno 1, implicit // id: %53
  switch_enum %42 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb3, case #Optional.none!enumelt: bb4 // id: %54

// %55                                            // user: %56
bb3(%55 : $UnsafeMutableRawPointer):              // Preds: bb2
  %56 = struct_extract %55 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %58
  %57 = integer_literal $Builtin.Word, -1         // user: %58
  %58 = builtin "deallocRaw"(%56 : $Builtin.RawPointer, %57 : $Builtin.Word, %17 : $Builtin.Word) : $()
  br bb5                                          // id: %59

bb4:                                              // Preds: bb2
  br bb5                                          // id: %60

bb5:                                              // Preds: bb4 bb3
  dealloc_ref %51 : $DataWrapper                  // id: %61
  debug_value %38 : $DataWrapper, let, name "data" // id: %62
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %63
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %64
  dealloc_stack_ref %36 : $DataWrapper            // id: %65
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %66 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %67
  %67 = apply %66(%0, %48) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %68 = tuple ()                                  // user: %69
  return %68 : $()                                // id: %69
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #19228, stage LowLevel,Function, pass 43: SimplifyCFG (simplify-cfg)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: noescape **, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %2, %62, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %3
  %3 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %4
  %4 = ref_element_addr [immutable] %3 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %5
  %5 = struct_element_addr %4 : $*_ArrayBody, #_ArrayBody._storage // user: %6
  %6 = struct_element_addr %5 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %7
  %7 = struct_element_addr %6 : $*Int, #Int._value // user: %8
  %8 = load %7 : $*Builtin.Int64                  // users: %34, %21
  %9 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %11
  %10 = integer_literal $Builtin.Word, 24         // user: %13
  %11 = builtin "ptrtoint_Word"(%9 : $Builtin.RawPointer) : $Builtin.Word // user: %13
  %12 = integer_literal $Builtin.Int8, 2          // users: %28, %19, %13
  %13 = struct $StaticString (%11 : $Builtin.Word, %10 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %14 = integer_literal $Builtin.Int64, 15505     // user: %15
  %15 = struct $UInt (%14 : $Builtin.Int64)       // user: %32
  %16 = string_literal utf8 ""                    // user: %18
  %17 = integer_literal $Builtin.Word, 0          // users: %55, %40, %19
  %18 = builtin "ptrtoint_Word"(%16 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %19 = struct $StaticString (%18 : $Builtin.Word, %17 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %20 = integer_literal $Builtin.Int64, 0         // user: %21
  %21 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %20 : $Builtin.Int64) : $Builtin.Int1 // user: %23
  %22 = integer_literal $Builtin.Int1, 0          // user: %23
  %23 = builtin "int_expect_Int1"(%21 : $Builtin.Int1, %22 : $Builtin.Int1) : $Builtin.Int1 // user: %24
  cond_br %23, bb1, bb2                           // id: %24

bb1:                                              // Preds: bb0
  %25 = string_literal utf8 "Fatal error"         // user: %27
  %26 = integer_literal $Builtin.Word, 11         // user: %28
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %28
  %28 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %29 = integer_literal $Builtin.Int32, 0         // user: %30
  %30 = struct $UInt32 (%29 : $Builtin.Int32)     // user: %32
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %31 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %32
  %32 = apply %31(%28, %19, %13, %15, %30) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %33

bb2:                                              // Preds: bb0
  %34 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // users: %35, %39, %43
  debug_value %34 : $Builtin.Int64, let, name "count", argno 1, type $Int, expr op_fragment:#Int._value // id: %35
  %36 = alloc_ref [stack] $DataWrapper            // users: %51, %60, %38, %37
  debug_value %36 : $DataWrapper, let, name "self", argno 2, implicit // id: %37
  %38 = end_init_let_ref %36 : $DataWrapper       // users: %51, %59, %58, %57, %49
  %39 = builtin "truncOrBitCast_Int64_Word"(%34 : $Builtin.Int64) : $Builtin.Word // user: %40
  %40 = builtin "allocRaw"(%39 : $Builtin.Word, %17 : $Builtin.Word) : $Builtin.RawPointer // users: %55, %45, %41
  %41 = struct $UnsafeMutableRawPointer (%40 : $Builtin.RawPointer) // user: %42
  %42 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %41 : $UnsafeMutableRawPointer // user: %48
  %43 = builtin "assumeNonNegative_Int64"(%34 : $Builtin.Int64) : $Builtin.Int64 // user: %44
  %44 = builtin "truncOrBitCast_Int64_Word"(%43 : $Builtin.Int64) : $Builtin.Word // user: %45
  %45 = index_raw_pointer %40 : $Builtin.RawPointer, %44 : $Builtin.Word // user: %46
  %46 = struct $UnsafeMutableRawPointer (%45 : $Builtin.RawPointer) // user: %47
  %47 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %46 : $UnsafeMutableRawPointer // user: %48
  %48 = struct $UnsafeMutableRawBufferPointer (%42 : $Optional<UnsafeMutableRawPointer>, %47 : $Optional<UnsafeMutableRawPointer>) // users: %62, %50
  %49 = ref_element_addr %38 : $DataWrapper, #DataWrapper.pointer // user: %50
  store %48 to %49 : $*UnsafeMutableRawBufferPointer // id: %50
  %51 = begin_dealloc_ref %38 : $DataWrapper of %36 : $DataWrapper // users: %56, %53, %52
  debug_value %51 : $DataWrapper, let, name "self", argno 1, implicit // id: %52
  debug_value %51 : $DataWrapper, let, name "self", argno 1, implicit // id: %53
  %54 = integer_literal $Builtin.Word, -1         // user: %55
  %55 = builtin "deallocRaw"(%40 : $Builtin.RawPointer, %54 : $Builtin.Word, %17 : $Builtin.Word) : $()
  dealloc_ref %51 : $DataWrapper                  // id: %56
  debug_value %38 : $DataWrapper, let, name "data" // id: %57
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %58
  debug_value %38 : $DataWrapper, let, name "self", argno 1, implicit // id: %59
  dealloc_stack_ref %36 : $DataWrapper            // id: %60
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %61 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %62
  %62 = apply %61(%0, %48) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %63 = tuple ()                                  // user: %64
  return %63 : $()                                // id: %64
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL function after  #19234, stage LowLevel,Function, pass 50: DeadObjectElimination (deadobject-elim)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: noescape **, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %2, %49, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %3
  %3 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %4
  %4 = ref_element_addr [immutable] %3 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %5
  %5 = struct_element_addr %4 : $*_ArrayBody, #_ArrayBody._storage // user: %6
  %6 = struct_element_addr %5 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %7
  %7 = struct_element_addr %6 : $*Int, #Int._value // user: %8
  %8 = load %7 : $*Builtin.Int64                  // users: %34, %21
  %9 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %11
  %10 = integer_literal $Builtin.Word, 24         // user: %13
  %11 = builtin "ptrtoint_Word"(%9 : $Builtin.RawPointer) : $Builtin.Word // user: %13
  %12 = integer_literal $Builtin.Int8, 2          // users: %28, %19, %13
  %13 = struct $StaticString (%11 : $Builtin.Word, %10 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %14 = integer_literal $Builtin.Int64, 15505     // user: %15
  %15 = struct $UInt (%14 : $Builtin.Int64)       // user: %32
  %16 = string_literal utf8 ""                    // user: %18
  %17 = integer_literal $Builtin.Word, 0          // users: %47, %37, %19
  %18 = builtin "ptrtoint_Word"(%16 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %19 = struct $StaticString (%18 : $Builtin.Word, %17 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %20 = integer_literal $Builtin.Int64, 0         // user: %21
  %21 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %20 : $Builtin.Int64) : $Builtin.Int1 // user: %23
  %22 = integer_literal $Builtin.Int1, 0          // user: %23
  %23 = builtin "int_expect_Int1"(%21 : $Builtin.Int1, %22 : $Builtin.Int1) : $Builtin.Int1 // user: %24
  cond_br %23, bb1, bb2                           // id: %24

bb1:                                              // Preds: bb0
  %25 = string_literal utf8 "Fatal error"         // user: %27
  %26 = integer_literal $Builtin.Word, 11         // user: %28
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %28
  %28 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %29 = integer_literal $Builtin.Int32, 0         // user: %30
  %30 = struct $UInt32 (%29 : $Builtin.Int32)     // user: %32
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %31 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %32
  %32 = apply %31(%28, %19, %13, %15, %30) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %33

bb2:                                              // Preds: bb0
  %34 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // users: %35, %36, %40
  debug_value %34 : $Builtin.Int64, let, name "count", argno 1, type $Int, expr op_fragment:#Int._value // id: %35
  %36 = builtin "truncOrBitCast_Int64_Word"(%34 : $Builtin.Int64) : $Builtin.Word // user: %37
  %37 = builtin "allocRaw"(%36 : $Builtin.Word, %17 : $Builtin.Word) : $Builtin.RawPointer // users: %47, %42, %38
  %38 = struct $UnsafeMutableRawPointer (%37 : $Builtin.RawPointer) // user: %39
  %39 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %38 : $UnsafeMutableRawPointer // user: %45
  %40 = builtin "assumeNonNegative_Int64"(%34 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "truncOrBitCast_Int64_Word"(%40 : $Builtin.Int64) : $Builtin.Word // user: %42
  %42 = index_raw_pointer %37 : $Builtin.RawPointer, %41 : $Builtin.Word // user: %43
  %43 = struct $UnsafeMutableRawPointer (%42 : $Builtin.RawPointer) // user: %44
  %44 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %43 : $UnsafeMutableRawPointer // user: %45
  %45 = struct $UnsafeMutableRawBufferPointer (%39 : $Optional<UnsafeMutableRawPointer>, %44 : $Optional<UnsafeMutableRawPointer>) // user: %49
  %46 = integer_literal $Builtin.Word, -1         // user: %47
  %47 = builtin "deallocRaw"(%37 : $Builtin.RawPointer, %46 : $Builtin.Word, %17 : $Builtin.Word) : $()
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %48 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %49
  %49 = apply %48(%0, %45) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %50 = tuple ()                                  // user: %51
  return %50 : $()                                // id: %51
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

  *** SIL module after #24443, stage LateLoopOpt, pass 0: LateDeadFunctionAndGlobalElimination (late-deadfuncelim)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: noescape **, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %2, %49, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %3
  %3 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %4
  %4 = ref_element_addr [immutable] %3 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %5
  %5 = struct_element_addr %4 : $*_ArrayBody, #_ArrayBody._storage // user: %6
  %6 = struct_element_addr %5 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %7
  %7 = struct_element_addr %6 : $*Int, #Int._value // user: %8
  %8 = load %7 : $*Builtin.Int64                  // users: %34, %21
  %9 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %11
  %10 = integer_literal $Builtin.Word, 24         // user: %13
  %11 = builtin "ptrtoint_Word"(%9 : $Builtin.RawPointer) : $Builtin.Word // user: %13
  %12 = integer_literal $Builtin.Int8, 2          // users: %28, %19, %13
  %13 = struct $StaticString (%11 : $Builtin.Word, %10 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %14 = integer_literal $Builtin.Int64, 15505     // user: %15
  %15 = struct $UInt (%14 : $Builtin.Int64)       // user: %32
  %16 = string_literal utf8 ""                    // user: %18
  %17 = integer_literal $Builtin.Word, 0          // users: %47, %37, %19
  %18 = builtin "ptrtoint_Word"(%16 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %19 = struct $StaticString (%18 : $Builtin.Word, %17 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %20 = integer_literal $Builtin.Int64, 0         // user: %21
  %21 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %20 : $Builtin.Int64) : $Builtin.Int1 // user: %23
  %22 = integer_literal $Builtin.Int1, 0          // user: %23
  %23 = builtin "int_expect_Int1"(%21 : $Builtin.Int1, %22 : $Builtin.Int1) : $Builtin.Int1 // user: %24
  cond_br %23, bb1, bb2                           // id: %24

bb1:                                              // Preds: bb0
  %25 = string_literal utf8 "Fatal error"         // user: %27
  %26 = integer_literal $Builtin.Word, 11         // user: %28
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %28
  %28 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %12 : $Builtin.Int8) // user: %32
  %29 = integer_literal $Builtin.Int32, 0         // user: %30
  %30 = struct $UInt32 (%29 : $Builtin.Int32)     // user: %32
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %31 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %32
  %32 = apply %31(%28, %19, %13, %15, %30) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %33

bb2:                                              // Preds: bb0
  %34 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // users: %35, %36, %40
  debug_value %34 : $Builtin.Int64, let, name "count", argno 1, type $Int, expr op_fragment:#Int._value // id: %35
  %36 = builtin "truncOrBitCast_Int64_Word"(%34 : $Builtin.Int64) : $Builtin.Word // user: %37
  %37 = builtin "allocRaw"(%36 : $Builtin.Word, %17 : $Builtin.Word) : $Builtin.RawPointer // users: %47, %42, %38
  %38 = struct $UnsafeMutableRawPointer (%37 : $Builtin.RawPointer) // user: %39
  %39 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %38 : $UnsafeMutableRawPointer // user: %45
  %40 = builtin "assumeNonNegative_Int64"(%34 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "truncOrBitCast_Int64_Word"(%40 : $Builtin.Int64) : $Builtin.Word // user: %42
  %42 = index_raw_pointer %37 : $Builtin.RawPointer, %41 : $Builtin.Word // user: %43
  %43 = struct $UnsafeMutableRawPointer (%42 : $Builtin.RawPointer) // user: %44
  %44 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %43 : $UnsafeMutableRawPointer // user: %45
  %45 = struct $UnsafeMutableRawBufferPointer (%39 : $Optional<UnsafeMutableRawPointer>, %44 : $Optional<UnsafeMutableRawPointer>) // user: %49
  %46 = integer_literal $Builtin.Word, -1         // user: %47
  %47 = builtin "deallocRaw"(%37 : $Builtin.RawPointer, %46 : $Builtin.Word, %17 : $Builtin.Word) : $()
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %48 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %49
  %49 = apply %48(%0, %45) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %50 = tuple ()                                  // user: %51
  return %50 : $()                                // id: %51
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: noescape **, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy]
// %0                                             // user: %2
// %1                                             // user: %3
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %3 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %4
  switch_enum %3 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %4

// %5                                             // user: %42
bb1(%5 : $UnsafeMutableRawPointer):               // Preds: bb0
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %10, %8
  %8 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // users: %115, %9
  %9 = address_to_pointer %8 : $*UInt8 to $Builtin.RawPointer // user: %43
  %10 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  %11 = struct_element_addr %10 : $*_ArrayBody, #_ArrayBody._storage // user: %12
  %12 = struct_element_addr %11 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %13
  %13 = struct_element_addr %12 : $*Int, #Int._value // users: %88, %52, %14
  %14 = load %13 : $*Builtin.Int64                // users: %40, %27
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // users: %74, %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %74, %78, %95, %104, %59, %34, %25, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // users: %108, %63, %38
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // users: %108, %63, %38
  %22 = string_literal utf8 ""                    // user: %24
  %23 = integer_literal $Builtin.Word, 0          // user: %25
  %24 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %25
  %25 = struct $StaticString (%24 : $Builtin.Word, %23 : $Builtin.Word, %18 : $Builtin.Int8) // users: %108, %63, %38
  %26 = integer_literal $Builtin.Int64, 0         // users: %85, %89, %53, %70, %81, %66, %27
  %27 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %29
  %28 = integer_literal $Builtin.Int1, 0          // users: %90, %54, %123, %43, %29
  %29 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %30
  cond_br %29, bb2, bb3                           // id: %30

bb2:                                              // Preds: bb1
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %18 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %25, %19, %21, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = builtin "assumeNonNegative_Int64"(%14 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %5 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %122, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %9 : $Builtin.RawPointer, %41 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  fix_lifetime %2 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb10                                         // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb10                                         // id: %51

bb6:                                              // Preds: bb3
  %52 = load %13 : $*Builtin.Int64                // users: %65, %53
  %53 = builtin "cmp_slt_Int64"(%52 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %54
  %54 = builtin "int_expect_Int1"(%53 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %55
  cond_br %54, bb7, bb8                           // id: %55

bb7:                                              // Preds: bb6
  %56 = string_literal utf8 "Fatal error"         // user: %58
  %57 = integer_literal $Builtin.Word, 11         // user: %59
  %58 = builtin "ptrtoint_Word"(%56 : $Builtin.RawPointer) : $Builtin.Word // user: %59
  %59 = struct $StaticString (%58 : $Builtin.Word, %57 : $Builtin.Word, %18 : $Builtin.Int8) // user: %63
  %60 = integer_literal $Builtin.Int32, 0         // user: %61
  %61 = struct $UInt32 (%60 : $Builtin.Int32)     // user: %63
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %62 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %63
  %63 = apply %62(%59, %25, %19, %21, %61) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %64

bb8:                                              // Preds: bb6
  %65 = builtin "assumeNonNegative_Int64"(%52 : $Builtin.Int64) : $Builtin.Int64 // users: %125, %66, %70
  %66 = builtin "cmp_eq_Int64"(%65 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %67
  cond_br %66, bb21, bb9                          // id: %67

bb9:                                              // Preds: bb8
  %68 = integer_literal $Builtin.Int64, 1         // users: %123, %117
  %69 = integer_literal $Builtin.Int1, -1         // users: %112, %117
  %70 = builtin "cmp_sge_Int64"(%26 : $Builtin.Int64, %65 : $Builtin.Int64) : $Builtin.Int1 // user: %71
  cond_fail %70 : $Builtin.Int1, "loop induction variable overflowed" // id: %71
  %72 = string_literal utf8 "Array index out of range" // user: %73
  %73 = builtin "ptrtoint_Word"(%72 : $Builtin.RawPointer) : $Builtin.Word // user: %74
  %74 = struct $StaticString (%73 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %99
  %75 = string_literal utf8 "Swift/ContiguousArrayBuffer.swift" // user: %77
  %76 = integer_literal $Builtin.Word, 33         // user: %78
  %77 = builtin "ptrtoint_Word"(%75 : $Builtin.RawPointer) : $Builtin.Word // user: %78
  %78 = struct $StaticString (%77 : $Builtin.Word, %76 : $Builtin.Word, %18 : $Builtin.Int8) // user: %99
  %79 = integer_literal $Builtin.Int64, 502       // user: %80
  %80 = struct $UInt (%79 : $Builtin.Int64)       // user: %99
  br bb11(%26 : $Builtin.Int64)                   // id: %81

bb10:                                             // Preds: bb20 bb4 bb21 bb5
  %82 = tuple ()                                  // user: %83
  return %82 : $()                                // id: %83

// %84                                            // users: %85, %111, %114, %117
bb11(%84 : $Builtin.Int64):                       // Preds: bb9 bb19
  %85 = builtin "cmp_slt_Int64"(%84 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %86
  cond_br %85, bb12, bb13                         // id: %86

bb12:                                             // Preds: bb11
  br bb14                                         // id: %87

bb13:                                             // Preds: bb11
  %88 = load %13 : $*Builtin.Int64                // users: %110, %89
  %89 = builtin "cmp_slt_Int64"(%88 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int1 // user: %90
  %90 = builtin "int_expect_Int1"(%89 : $Builtin.Int1, %28 : $Builtin.Int1) : $Builtin.Int1 // user: %91
  cond_br %90, bb15, bb16                         // id: %91

bb14:                                             // Preds: bb18 bb12
  %92 = string_literal utf8 "Fatal error"         // user: %94
  %93 = integer_literal $Builtin.Word, 11         // user: %95
  %94 = builtin "ptrtoint_Word"(%92 : $Builtin.RawPointer) : $Builtin.Word // user: %95
  %95 = struct $StaticString (%94 : $Builtin.Word, %93 : $Builtin.Word, %18 : $Builtin.Int8) // user: %99
  %96 = integer_literal $Builtin.Int32, 0         // user: %97
  %97 = struct $UInt32 (%96 : $Builtin.Int32)     // user: %99
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %98 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %99
  %99 = apply %98(%95, %74, %78, %80, %97) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %100

bb15:                                             // Preds: bb13
  %101 = string_literal utf8 "Fatal error"        // user: %103
  %102 = integer_literal $Builtin.Word, 11        // user: %104
  %103 = builtin "ptrtoint_Word"(%101 : $Builtin.RawPointer) : $Builtin.Word // user: %104
  %104 = struct $StaticString (%103 : $Builtin.Word, %102 : $Builtin.Word, %18 : $Builtin.Int8) // user: %108
  %105 = integer_literal $Builtin.Int32, 0        // user: %106
  %106 = struct $UInt32 (%105 : $Builtin.Int32)   // user: %108
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %107 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %108
  %108 = apply %107(%104, %25, %19, %21, %106) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %109

bb16:                                             // Preds: bb13
  %110 = builtin "assumeNonNegative_Int64"(%88 : $Builtin.Int64) : $Builtin.Int64 // user: %111
  %111 = builtin "cmp_slt_Int64"(%84 : $Builtin.Int64, %110 : $Builtin.Int64) : $Builtin.Int1 // user: %112
  %112 = builtin "int_expect_Int1"(%111 : $Builtin.Int1, %69 : $Builtin.Int1) : $Builtin.Int1 // user: %113
  cond_br %112, bb17, bb18                        // id: %113

bb17:                                             // Preds: bb16
  %114 = builtin "truncOrBitCast_Int64_Word"(%84 : $Builtin.Int64) : $Builtin.Word // users: %122, %115
  %115 = index_addr [stack_protection] %8 : $*UInt8, %114 : $Builtin.Word // user: %116
  %116 = load %115 : $*UInt8                      // user: %120
  %117 = builtin "sadd_with_overflow_Int64"(%84 : $Builtin.Int64, %68 : $Builtin.Int64, %69 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %118
  %118 = tuple_extract %117 : $(Builtin.Int64, Builtin.Int1), 0 // users: %128, %125
  %119 = alloc_stack $UInt8                       // users: %124, %121, %120
  store %116 to %119 : $*UInt8                    // id: %120
  %121 = address_to_pointer [stack_protection] %119 : $*UInt8 to $Builtin.RawPointer // user: %123
  %122 = index_raw_pointer %42 : $Builtin.RawPointer, %114 : $Builtin.Word // user: %123
  %123 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%122 : $Builtin.RawPointer, %121 : $Builtin.RawPointer, %68 : $Builtin.Int64, %28 : $Builtin.Int1) : $()
  dealloc_stack %119 : $*UInt8                    // id: %124
  %125 = builtin "cmp_eq_Int64"(%118 : $Builtin.Int64, %65 : $Builtin.Int64) : $Builtin.Int1 // user: %126
  cond_br %125, bb20, bb19                        // id: %126

bb18:                                             // Preds: bb16
  br bb14                                         // id: %127

bb19:                                             // Preds: bb17
  br bb11(%118 : $Builtin.Int64)                  // id: %128

bb20:                                             // Preds: bb17
  br bb10                                         // id: %129

bb21:                                             // Preds: bb8
  br bb10                                         // id: %130
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #24575, stage LateLoopOpt, pass 1: CodeSinking (code-sinking)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: noescape **, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy]
// %0                                             // user: %5
// %1                                             // user: %2
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %3
  switch_enum %2 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %3

// %4                                             // user: %42
bb1(%4 : $UnsafeMutableRawPointer):               // Preds: bb0
  %5 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %5 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %8, %38
  %8 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %9
  %9 = struct_element_addr %8 : $*_ArrayBody, #_ArrayBody._storage // user: %10
  %10 = struct_element_addr %9 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %11
  %11 = struct_element_addr %10 : $*Int, #Int._value // users: %79, %52, %12
  %12 = load %11 : $*Builtin.Int64                // users: %40, %25
  %13 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %15
  %14 = integer_literal $Builtin.Word, 24         // users: %85, %17
  %15 = builtin "ptrtoint_Word"(%13 : $Builtin.RawPointer) : $Builtin.Word // user: %17
  %16 = integer_literal $Builtin.Int8, 2          // users: %85, %89, %95, %104, %59, %32, %23, %17
  %17 = struct $StaticString (%15 : $Builtin.Word, %14 : $Builtin.Word, %16 : $Builtin.Int8) // users: %108, %63, %36
  %18 = integer_literal $Builtin.Int64, 15505     // user: %19
  %19 = struct $UInt (%18 : $Builtin.Int64)       // users: %108, %63, %36
  %20 = string_literal utf8 ""                    // user: %22
  %21 = integer_literal $Builtin.Word, 0          // user: %23
  %22 = builtin "ptrtoint_Word"(%20 : $Builtin.RawPointer) : $Builtin.Word // user: %23
  %23 = struct $StaticString (%22 : $Builtin.Word, %21 : $Builtin.Word, %16 : $Builtin.Int8) // users: %108, %63, %36
  %24 = integer_literal $Builtin.Int64, 0         // users: %76, %80, %53, %70, %72, %66, %25
  %25 = builtin "cmp_slt_Int64"(%12 : $Builtin.Int64, %24 : $Builtin.Int64) : $Builtin.Int1 // user: %27
  %26 = integer_literal $Builtin.Int1, 0          // users: %81, %54, %123, %43, %27
  %27 = builtin "int_expect_Int1"(%25 : $Builtin.Int1, %26 : $Builtin.Int1) : $Builtin.Int1 // user: %28
  cond_br %27, bb2, bb3                           // id: %28

bb2:                                              // Preds: bb1
  %29 = string_literal utf8 "Fatal error"         // user: %31
  %30 = integer_literal $Builtin.Word, 11         // user: %32
  %31 = builtin "ptrtoint_Word"(%29 : $Builtin.RawPointer) : $Builtin.Word // user: %32
  %32 = struct $StaticString (%31 : $Builtin.Word, %30 : $Builtin.Word, %16 : $Builtin.Int8) // user: %36
  %33 = integer_literal $Builtin.Int32, 0         // user: %34
  %34 = struct $UInt32 (%33 : $Builtin.Int32)     // user: %36
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %35 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %36
  %36 = apply %35(%32, %23, %17, %19, %34) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %37

bb3:                                              // Preds: bb1
  %38 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // users: %115, %39
  %39 = address_to_pointer %38 : $*UInt8 to $Builtin.RawPointer // user: %43
  %40 = builtin "assumeNonNegative_Int64"(%12 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %4 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %122, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %39 : $Builtin.RawPointer, %41 : $Builtin.Int64, %26 : $Builtin.Int1) : $()
  fix_lifetime %5 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb10                                         // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb10                                         // id: %51

bb6:                                              // Preds: bb3
  %52 = load %11 : $*Builtin.Int64                // users: %65, %53
  %53 = builtin "cmp_slt_Int64"(%52 : $Builtin.Int64, %24 : $Builtin.Int64) : $Builtin.Int1 // user: %54
  %54 = builtin "int_expect_Int1"(%53 : $Builtin.Int1, %26 : $Builtin.Int1) : $Builtin.Int1 // user: %55
  cond_br %54, bb7, bb8                           // id: %55

bb7:                                              // Preds: bb6
  %56 = string_literal utf8 "Fatal error"         // user: %58
  %57 = integer_literal $Builtin.Word, 11         // user: %59
  %58 = builtin "ptrtoint_Word"(%56 : $Builtin.RawPointer) : $Builtin.Word // user: %59
  %59 = struct $StaticString (%58 : $Builtin.Word, %57 : $Builtin.Word, %16 : $Builtin.Int8) // user: %63
  %60 = integer_literal $Builtin.Int32, 0         // user: %61
  %61 = struct $UInt32 (%60 : $Builtin.Int32)     // user: %63
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %62 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %63
  %63 = apply %62(%59, %23, %17, %19, %61) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %64

bb8:                                              // Preds: bb6
  %65 = builtin "assumeNonNegative_Int64"(%52 : $Builtin.Int64) : $Builtin.Int64 // users: %125, %66, %70
  %66 = builtin "cmp_eq_Int64"(%65 : $Builtin.Int64, %24 : $Builtin.Int64) : $Builtin.Int1 // user: %67
  cond_br %66, bb21, bb9                          // id: %67

bb9:                                              // Preds: bb8
  %68 = integer_literal $Builtin.Int64, 1         // users: %123, %117
  %69 = integer_literal $Builtin.Int1, -1         // users: %112, %117
  %70 = builtin "cmp_sge_Int64"(%24 : $Builtin.Int64, %65 : $Builtin.Int64) : $Builtin.Int1 // user: %71
  cond_fail %70 : $Builtin.Int1, "loop induction variable overflowed" // id: %71
  br bb11(%24 : $Builtin.Int64)                   // id: %72

bb10:                                             // Preds: bb20 bb4 bb21 bb5
  %73 = tuple ()                                  // user: %74
  return %73 : $()                                // id: %74

// %75                                            // users: %76, %111, %114, %117
bb11(%75 : $Builtin.Int64):                       // Preds: bb9 bb19
  %76 = builtin "cmp_slt_Int64"(%75 : $Builtin.Int64, %24 : $Builtin.Int64) : $Builtin.Int1 // user: %77
  cond_br %76, bb12, bb13                         // id: %77

bb12:                                             // Preds: bb11
  br bb14                                         // id: %78

bb13:                                             // Preds: bb11
  %79 = load %11 : $*Builtin.Int64                // users: %110, %80
  %80 = builtin "cmp_slt_Int64"(%79 : $Builtin.Int64, %24 : $Builtin.Int64) : $Builtin.Int1 // user: %81
  %81 = builtin "int_expect_Int1"(%80 : $Builtin.Int1, %26 : $Builtin.Int1) : $Builtin.Int1 // user: %82
  cond_br %81, bb15, bb16                         // id: %82

bb14:                                             // Preds: bb18 bb12
  %83 = string_literal utf8 "Array index out of range" // user: %84
  %84 = builtin "ptrtoint_Word"(%83 : $Builtin.RawPointer) : $Builtin.Word // user: %85
  %85 = struct $StaticString (%84 : $Builtin.Word, %14 : $Builtin.Word, %16 : $Builtin.Int8) // user: %99
  %86 = string_literal utf8 "Swift/ContiguousArrayBuffer.swift" // user: %88
  %87 = integer_literal $Builtin.Word, 33         // user: %89
  %88 = builtin "ptrtoint_Word"(%86 : $Builtin.RawPointer) : $Builtin.Word // user: %89
  %89 = struct $StaticString (%88 : $Builtin.Word, %87 : $Builtin.Word, %16 : $Builtin.Int8) // user: %99
  %90 = integer_literal $Builtin.Int64, 502       // user: %91
  %91 = struct $UInt (%90 : $Builtin.Int64)       // user: %99
  %92 = string_literal utf8 "Fatal error"         // user: %94
  %93 = integer_literal $Builtin.Word, 11         // user: %95
  %94 = builtin "ptrtoint_Word"(%92 : $Builtin.RawPointer) : $Builtin.Word // user: %95
  %95 = struct $StaticString (%94 : $Builtin.Word, %93 : $Builtin.Word, %16 : $Builtin.Int8) // user: %99
  %96 = integer_literal $Builtin.Int32, 0         // user: %97
  %97 = struct $UInt32 (%96 : $Builtin.Int32)     // user: %99
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %98 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %99
  %99 = apply %98(%95, %85, %89, %91, %97) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %100

bb15:                                             // Preds: bb13
  %101 = string_literal utf8 "Fatal error"        // user: %103
  %102 = integer_literal $Builtin.Word, 11        // user: %104
  %103 = builtin "ptrtoint_Word"(%101 : $Builtin.RawPointer) : $Builtin.Word // user: %104
  %104 = struct $StaticString (%103 : $Builtin.Word, %102 : $Builtin.Word, %16 : $Builtin.Int8) // user: %108
  %105 = integer_literal $Builtin.Int32, 0        // user: %106
  %106 = struct $UInt32 (%105 : $Builtin.Int32)   // user: %108
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %107 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %108
  %108 = apply %107(%104, %23, %17, %19, %106) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %109

bb16:                                             // Preds: bb13
  %110 = builtin "assumeNonNegative_Int64"(%79 : $Builtin.Int64) : $Builtin.Int64 // user: %111
  %111 = builtin "cmp_slt_Int64"(%75 : $Builtin.Int64, %110 : $Builtin.Int64) : $Builtin.Int1 // user: %112
  %112 = builtin "int_expect_Int1"(%111 : $Builtin.Int1, %69 : $Builtin.Int1) : $Builtin.Int1 // user: %113
  cond_br %112, bb17, bb18                        // id: %113

bb17:                                             // Preds: bb16
  %114 = builtin "truncOrBitCast_Int64_Word"(%75 : $Builtin.Int64) : $Builtin.Word // users: %122, %115
  %115 = index_addr [stack_protection] %38 : $*UInt8, %114 : $Builtin.Word // user: %116
  %116 = load %115 : $*UInt8                      // user: %120
  %117 = builtin "sadd_with_overflow_Int64"(%75 : $Builtin.Int64, %68 : $Builtin.Int64, %69 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %118
  %118 = tuple_extract %117 : $(Builtin.Int64, Builtin.Int1), 0 // users: %128, %125
  %119 = alloc_stack $UInt8                       // users: %124, %121, %120
  store %116 to %119 : $*UInt8                    // id: %120
  %121 = address_to_pointer [stack_protection] %119 : $*UInt8 to $Builtin.RawPointer // user: %123
  %122 = index_raw_pointer %42 : $Builtin.RawPointer, %114 : $Builtin.Word // user: %123
  %123 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%122 : $Builtin.RawPointer, %121 : $Builtin.RawPointer, %68 : $Builtin.Int64, %26 : $Builtin.Int1) : $()
  dealloc_stack %119 : $*UInt8                    // id: %124
  %125 = builtin "cmp_eq_Int64"(%118 : $Builtin.Int64, %65 : $Builtin.Int64) : $Builtin.Int1 // user: %126
  cond_br %125, bb20, bb19                        // id: %126

bb18:                                             // Preds: bb16
  br bb14                                         // id: %127

bb19:                                             // Preds: bb17
  br bb11(%118 : $Builtin.Int64)                  // id: %128

bb20:                                             // Preds: bb17
  br bb10                                         // id: %129

bb21:                                             // Preds: bb8
  br bb10                                         // id: %130
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #24586, stage LateLoopOpt, pass 14: DCE (dce)
// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: noescape **, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy]
// %0                                             // user: %5
// %1                                             // user: %2
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %3
  switch_enum %2 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %3

// %4                                             // user: %42
bb1(%4 : $UnsafeMutableRawPointer):               // Preds: bb0
  %5 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %5 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %8, %38
  %8 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %9
  %9 = struct_element_addr %8 : $*_ArrayBody, #_ArrayBody._storage // user: %10
  %10 = struct_element_addr %9 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %11
  %11 = struct_element_addr %10 : $*Int, #Int._value // users: %79, %52, %12
  %12 = load %11 : $*Builtin.Int64                // users: %40, %25
  %13 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %15
  %14 = integer_literal $Builtin.Word, 24         // users: %85, %17
  %15 = builtin "ptrtoint_Word"(%13 : $Builtin.RawPointer) : $Builtin.Word // user: %17
  %16 = integer_literal $Builtin.Int8, 2          // users: %85, %89, %95, %104, %59, %32, %23, %17
  %17 = struct $StaticString (%15 : $Builtin.Word, %14 : $Builtin.Word, %16 : $Builtin.Int8) // users: %108, %63, %36
  %18 = integer_literal $Builtin.Int64, 15505     // user: %19
  %19 = struct $UInt (%18 : $Builtin.Int64)       // users: %108, %63, %36
  %20 = string_literal utf8 ""                    // user: %22
  %21 = integer_literal $Builtin.Word, 0          // user: %23
  %22 = builtin "ptrtoint_Word"(%20 : $Builtin.RawPointer) : $Builtin.Word // user: %23
  %23 = struct $StaticString (%22 : $Builtin.Word, %21 : $Builtin.Word, %16 : $Builtin.Int8) // users: %108, %63, %36
  %24 = integer_literal $Builtin.Int64, 0         // users: %76, %80, %53, %70, %72, %66, %25
  %25 = builtin "cmp_slt_Int64"(%12 : $Builtin.Int64, %24 : $Builtin.Int64) : $Builtin.Int1 // user: %27
  %26 = integer_literal $Builtin.Int1, 0          // users: %81, %54, %123, %43, %27
  %27 = builtin "int_expect_Int1"(%25 : $Builtin.Int1, %26 : $Builtin.Int1) : $Builtin.Int1 // user: %28
  cond_br %27, bb2, bb3                           // id: %28

bb2:                                              // Preds: bb1
  %29 = string_literal utf8 "Fatal error"         // user: %31
  %30 = integer_literal $Builtin.Word, 11         // user: %32
  %31 = builtin "ptrtoint_Word"(%29 : $Builtin.RawPointer) : $Builtin.Word // user: %32
  %32 = struct $StaticString (%31 : $Builtin.Word, %30 : $Builtin.Word, %16 : $Builtin.Int8) // user: %36
  %33 = integer_literal $Builtin.Int32, 0         // user: %34
  %34 = struct $UInt32 (%33 : $Builtin.Int32)     // user: %36
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %35 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %36
  %36 = apply %35(%32, %23, %17, %19, %34) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %37

bb3:                                              // Preds: bb1
  %38 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // users: %115, %39
  %39 = address_to_pointer %38 : $*UInt8 to $Builtin.RawPointer // user: %43
  %40 = builtin "assumeNonNegative_Int64"(%12 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %4 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %122, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %39 : $Builtin.RawPointer, %41 : $Builtin.Int64, %26 : $Builtin.Int1) : $()
  fix_lifetime %5 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb10                                         // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb10                                         // id: %51

bb6:                                              // Preds: bb3
  %52 = load %11 : $*Builtin.Int64                // users: %65, %53
  %53 = builtin "cmp_slt_Int64"(%52 : $Builtin.Int64, %24 : $Builtin.Int64) : $Builtin.Int1 // user: %54
  %54 = builtin "int_expect_Int1"(%53 : $Builtin.Int1, %26 : $Builtin.Int1) : $Builtin.Int1 // user: %55
  cond_br %54, bb7, bb8                           // id: %55

bb7:                                              // Preds: bb6
  %56 = string_literal utf8 "Fatal error"         // user: %58
  %57 = integer_literal $Builtin.Word, 11         // user: %59
  %58 = builtin "ptrtoint_Word"(%56 : $Builtin.RawPointer) : $Builtin.Word // user: %59
  %59 = struct $StaticString (%58 : $Builtin.Word, %57 : $Builtin.Word, %16 : $Builtin.Int8) // user: %63
  %60 = integer_literal $Builtin.Int32, 0         // user: %61
  %61 = struct $UInt32 (%60 : $Builtin.Int32)     // user: %63
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %62 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %63
  %63 = apply %62(%59, %23, %17, %19, %61) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %64

bb8:                                              // Preds: bb6
  %65 = builtin "assumeNonNegative_Int64"(%52 : $Builtin.Int64) : $Builtin.Int64 // users: %125, %66, %70
  %66 = builtin "cmp_eq_Int64"(%65 : $Builtin.Int64, %24 : $Builtin.Int64) : $Builtin.Int1 // user: %67
  cond_br %66, bb21, bb9                          // id: %67

bb9:                                              // Preds: bb8
  %68 = integer_literal $Builtin.Int64, 1         // users: %123, %117
  %69 = integer_literal $Builtin.Int1, -1         // users: %112, %117
  %70 = builtin "cmp_sge_Int64"(%24 : $Builtin.Int64, %65 : $Builtin.Int64) : $Builtin.Int1 // user: %71
  cond_fail %70 : $Builtin.Int1, "loop induction variable overflowed" // id: %71
  br bb11(%24 : $Builtin.Int64)                   // id: %72

bb10:                                             // Preds: bb20 bb4 bb21 bb5
  %73 = tuple ()                                  // user: %74
  return %73 : $()                                // id: %74

// %75                                            // users: %76, %111, %114, %117
bb11(%75 : $Builtin.Int64):                       // Preds: bb9 bb19
  %76 = builtin "cmp_slt_Int64"(%75 : $Builtin.Int64, %24 : $Builtin.Int64) : $Builtin.Int1 // user: %77
  cond_br %76, bb12, bb13                         // id: %77

bb12:                                             // Preds: bb11
  br bb14                                         // id: %78

bb13:                                             // Preds: bb11
  %79 = load %11 : $*Builtin.Int64                // users: %110, %80
  %80 = builtin "cmp_slt_Int64"(%79 : $Builtin.Int64, %24 : $Builtin.Int64) : $Builtin.Int1 // user: %81
  %81 = builtin "int_expect_Int1"(%80 : $Builtin.Int1, %26 : $Builtin.Int1) : $Builtin.Int1 // user: %82
  cond_br %81, bb15, bb16                         // id: %82

bb14:                                             // Preds: bb18 bb12
  %83 = string_literal utf8 "Array index out of range" // user: %84
  %84 = builtin "ptrtoint_Word"(%83 : $Builtin.RawPointer) : $Builtin.Word // user: %85
  %85 = struct $StaticString (%84 : $Builtin.Word, %14 : $Builtin.Word, %16 : $Builtin.Int8) // user: %99
  %86 = string_literal utf8 "Swift/ContiguousArrayBuffer.swift" // user: %88
  %87 = integer_literal $Builtin.Word, 33         // user: %89
  %88 = builtin "ptrtoint_Word"(%86 : $Builtin.RawPointer) : $Builtin.Word // user: %89
  %89 = struct $StaticString (%88 : $Builtin.Word, %87 : $Builtin.Word, %16 : $Builtin.Int8) // user: %99
  %90 = integer_literal $Builtin.Int64, 502       // user: %91
  %91 = struct $UInt (%90 : $Builtin.Int64)       // user: %99
  %92 = string_literal utf8 "Fatal error"         // user: %94
  %93 = integer_literal $Builtin.Word, 11         // user: %95
  %94 = builtin "ptrtoint_Word"(%92 : $Builtin.RawPointer) : $Builtin.Word // user: %95
  %95 = struct $StaticString (%94 : $Builtin.Word, %93 : $Builtin.Word, %16 : $Builtin.Int8) // user: %99
  %96 = integer_literal $Builtin.Int32, 0         // user: %97
  %97 = struct $UInt32 (%96 : $Builtin.Int32)     // user: %99
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %98 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %99
  %99 = apply %98(%95, %85, %89, %91, %97) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %100

bb15:                                             // Preds: bb13
  %101 = string_literal utf8 "Fatal error"        // user: %103
  %102 = integer_literal $Builtin.Word, 11        // user: %104
  %103 = builtin "ptrtoint_Word"(%101 : $Builtin.RawPointer) : $Builtin.Word // user: %104
  %104 = struct $StaticString (%103 : $Builtin.Word, %102 : $Builtin.Word, %16 : $Builtin.Int8) // user: %108
  %105 = integer_literal $Builtin.Int32, 0        // user: %106
  %106 = struct $UInt32 (%105 : $Builtin.Int32)   // user: %108
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %107 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %108
  %108 = apply %107(%104, %23, %17, %19, %106) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %109

bb16:                                             // Preds: bb13
  %110 = builtin "assumeNonNegative_Int64"(%79 : $Builtin.Int64) : $Builtin.Int64 // user: %111
  %111 = builtin "cmp_slt_Int64"(%75 : $Builtin.Int64, %110 : $Builtin.Int64) : $Builtin.Int1 // user: %112
  %112 = builtin "int_expect_Int1"(%111 : $Builtin.Int1, %69 : $Builtin.Int1) : $Builtin.Int1 // user: %113
  cond_br %112, bb17, bb18                        // id: %113

bb17:                                             // Preds: bb16
  %114 = builtin "truncOrBitCast_Int64_Word"(%75 : $Builtin.Int64) : $Builtin.Word // users: %122, %115
  %115 = index_addr [stack_protection] %38 : $*UInt8, %114 : $Builtin.Word // user: %116
  %116 = load %115 : $*UInt8                      // user: %120
  %117 = builtin "sadd_with_overflow_Int64"(%75 : $Builtin.Int64, %68 : $Builtin.Int64, %69 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %118
  %118 = tuple_extract %117 : $(Builtin.Int64, Builtin.Int1), 0 // users: %128, %125
  %119 = alloc_stack $UInt8                       // users: %124, %121, %120
  store %116 to %119 : $*UInt8                    // id: %120
  %121 = address_to_pointer [stack_protection] %119 : $*UInt8 to $Builtin.RawPointer // user: %123
  %122 = index_raw_pointer %42 : $Builtin.RawPointer, %114 : $Builtin.Word // user: %123
  %123 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%122 : $Builtin.RawPointer, %121 : $Builtin.RawPointer, %68 : $Builtin.Int64, %26 : $Builtin.Int1) : $()
  dealloc_stack %119 : $*UInt8                    // id: %124
  %125 = builtin "cmp_eq_Int64"(%118 : $Builtin.Int64, %65 : $Builtin.Int64) : $Builtin.Int1 // user: %126
  cond_br %125, bb20, bb19                        // id: %126

bb18:                                             // Preds: bb16
  br bb14                                         // id: %127

bb19:                                             // Preds: bb17
  br bb11(%118 : $Builtin.Int64)                  // id: %128

bb20:                                             // Preds: bb17
  br bb10                                         // id: %129

bb21:                                             // Preds: bb8
  br bb10                                         // id: %130
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

  *** SIL function after  #24594, stage LateLoopOpt, pass 1: CodeSinking (code-sinking)
// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: noescape **, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %2, %49, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %3
  %3 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %4
  %4 = ref_element_addr [immutable] %3 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %5
  %5 = struct_element_addr %4 : $*_ArrayBody, #_ArrayBody._storage // user: %6
  %6 = struct_element_addr %5 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %7
  %7 = struct_element_addr %6 : $*Int, #Int._value // user: %8
  %8 = load %7 : $*Builtin.Int64                  // users: %34, %11
  %9 = integer_literal $Builtin.Word, 0           // users: %47, %37, %24
  %10 = integer_literal $Builtin.Int64, 0         // user: %11
  %11 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %10 : $Builtin.Int64) : $Builtin.Int1 // user: %13
  %12 = integer_literal $Builtin.Int1, 0          // user: %13
  %13 = builtin "int_expect_Int1"(%11 : $Builtin.Int1, %12 : $Builtin.Int1) : $Builtin.Int1 // user: %14
  cond_br %13, bb1, bb2                           // id: %14

bb1:                                              // Preds: bb0
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %28, %24, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %32
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %32
  %22 = string_literal utf8 ""                    // user: %23
  %23 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %24
  %24 = struct $StaticString (%23 : $Builtin.Word, %9 : $Builtin.Word, %18 : $Builtin.Int8) // user: %32
  %25 = string_literal utf8 "Fatal error"         // user: %27
  %26 = integer_literal $Builtin.Word, 11         // user: %28
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %28
  %28 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %18 : $Builtin.Int8) // user: %32
  %29 = integer_literal $Builtin.Int32, 0         // user: %30
  %30 = struct $UInt32 (%29 : $Builtin.Int32)     // user: %32
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %31 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %32
  %32 = apply %31(%28, %24, %19, %21, %30) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %33

bb2:                                              // Preds: bb0
  %34 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // users: %35, %36, %40
  debug_value %34 : $Builtin.Int64, let, name "count", argno 1, type $Int, expr op_fragment:#Int._value // id: %35
  %36 = builtin "truncOrBitCast_Int64_Word"(%34 : $Builtin.Int64) : $Builtin.Word // user: %37
  %37 = builtin "allocRaw"(%36 : $Builtin.Word, %9 : $Builtin.Word) : $Builtin.RawPointer // users: %47, %42, %38
  %38 = struct $UnsafeMutableRawPointer (%37 : $Builtin.RawPointer) // user: %39
  %39 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %38 : $UnsafeMutableRawPointer // user: %45
  %40 = builtin "assumeNonNegative_Int64"(%34 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "truncOrBitCast_Int64_Word"(%40 : $Builtin.Int64) : $Builtin.Word // user: %42
  %42 = index_raw_pointer %37 : $Builtin.RawPointer, %41 : $Builtin.Word // user: %43
  %43 = struct $UnsafeMutableRawPointer (%42 : $Builtin.RawPointer) // user: %44
  %44 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %43 : $UnsafeMutableRawPointer // user: %45
  %45 = struct $UnsafeMutableRawBufferPointer (%39 : $Optional<UnsafeMutableRawPointer>, %44 : $Optional<UnsafeMutableRawPointer>) // user: %49
  %46 = integer_literal $Builtin.Word, -1         // user: %47
  %47 = builtin "deallocRaw"(%37 : $Builtin.RawPointer, %46 : $Builtin.Word, %9 : $Builtin.Word) : $()
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %48 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %49
  %49 = apply %48(%0, %45) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %50 = tuple ()                                  // user: %51
  return %50 : $()                                // id: %51
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

sil_stage canonical

import Builtin
import Swift
import SwiftShims

class DataWrapper {
  @_hasStorage var pointer: UnsafeMutableRawBufferPointer { get set }
  init(count: Int)
  var bytes: UnsafeMutableRawBufferPointer { get }
  deinit
}

func test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_ input: [UInt8])

func test_localVar_keepsObjectAliveBeyondCallToClassWithPointer()

func do_foo_async(_ work: @escaping () -> ()) -> Task<(), Never>

class FooerAsync {
  @_hasStorage @_hasInitialValue var strongSelf: FooerAsync? { get set }
  __consuming func foo() -> Task<(), Never>
  func foo1()
  func foo2()
  deinit
  init()
}

func test_repeatedLoadWeakSelf() -> Task<(), Never>

struct Main {
  static func main() async
  static func $main() async
  init()
}

// _swiftEmptyArrayStorage
// clang name: _swiftEmptyArrayStorage
sil_global public_external @_swiftEmptyArrayStorage : $_SwiftEmptyArrayStorage

// DataWrapper.pointer.getter
sil hidden [transparent] @$s4main11DataWrapperC7pointerSwvg : $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer {
[%0: noescape, escape c*.v** -> %r.v**, read c0.v**]
[global: ]
// %0 "self"                                      // users: %2, %1
bb0(%0 : $DataWrapper):
  debug_value %0 : $DataWrapper, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $DataWrapper, #DataWrapper.pointer // user: %3
  %3 = begin_access [read] [dynamic] [no_nested_conflict] %2 : $*UnsafeMutableRawBufferPointer // users: %4, %5
  %4 = load %3 : $*UnsafeMutableRawBufferPointer  // user: %6
  end_access %3 : $*UnsafeMutableRawBufferPointer // id: %5
  return %4 : $UnsafeMutableRawBufferPointer      // id: %6
} // end sil function '$s4main11DataWrapperC7pointerSwvg'

// DataWrapper.pointer.setter
sil hidden [transparent] @$s4main11DataWrapperC7pointerSwvs : $@convention(method) (UnsafeMutableRawBufferPointer, @guaranteed DataWrapper) -> () {
[%0: escape v** -> %1.c0.v**, escape v**.c*.v** -> %1.c0.v**.c*.v**]
[%1: noescape **, write c0.v**]
[global: ]
// %0 "value"                                     // users: %6, %2
// %1 "self"                                      // users: %4, %3
bb0(%0 : $UnsafeMutableRawBufferPointer, %1 : $DataWrapper):
  debug_value %0 : $UnsafeMutableRawBufferPointer, let, name "value", argno 1, implicit // id: %2
  debug_value %1 : $DataWrapper, let, name "self", argno 2, implicit // id: %3
  %4 = ref_element_addr %1 : $DataWrapper, #DataWrapper.pointer // user: %5
  %5 = begin_access [modify] [dynamic] [no_nested_conflict] %4 : $*UnsafeMutableRawBufferPointer // users: %6, %7
  store %0 to %5 : $*UnsafeMutableRawBufferPointer // id: %6
  end_access %5 : $*UnsafeMutableRawBufferPointer // id: %7
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9
} // end sil function '$s4main11DataWrapperC7pointerSwvs'

// DataWrapper.pointer.modify
sil hidden [transparent] @$s4main11DataWrapperC7pointerSwvM : $@yield_once @convention(method) (@guaranteed DataWrapper) -> @yields @inout UnsafeMutableRawBufferPointer {
[%0: noescape, read c*.v**, write c*.v**, copy c*.v**, destroy c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "self"                                      // users: %2, %1
bb0(%0 : $DataWrapper):
  debug_value %0 : $DataWrapper, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $DataWrapper, #DataWrapper.pointer // user: %3
  %3 = begin_access [modify] [dynamic] %2 : $*UnsafeMutableRawBufferPointer // users: %5, %8, %4
  yield %3 : $*UnsafeMutableRawBufferPointer, resume bb1, unwind bb2 // id: %4

bb1:                                              // Preds: bb0
  end_access %3 : $*UnsafeMutableRawBufferPointer // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  end_access %3 : $*UnsafeMutableRawBufferPointer // id: %8
  unwind                                          // id: %9
} // end sil function '$s4main11DataWrapperC7pointerSwvM'

// DataWrapper.__allocating_init(count:)
sil hidden [exact_self_class] @$s4main11DataWrapperC5countACSi_tcfC : $@convention(method) (Int, @thick DataWrapper.Type) -> @owned DataWrapper {
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "count"                                     // users: %5, %3
// %1 "$metatype"
bb0(%0 : $Int, %1 : $@thick DataWrapper.Type):
  %2 = alloc_ref $DataWrapper                     // users: %33, %4
  debug_value %0 : $Int, let, name "count", argno 1 // id: %3
  debug_value %2 : $DataWrapper, let, name "self", argno 2, implicit // id: %4
  %5 = struct_extract %0 : $Int, #Int._value      // users: %36, %11, %6
  %6 = builtin "truncOrBitCast_Int64_Word"(%5 : $Builtin.Int64) : $Builtin.Word // user: %8
  %7 = integer_literal $Builtin.Word, 0           // users: %24, %8
  %8 = builtin "allocRaw"(%6 : $Builtin.Word, %7 : $Builtin.Word) : $Builtin.RawPointer // users: %38, %34
  %9 = integer_literal $Builtin.Int1, 0           // user: %12
  %10 = integer_literal $Builtin.Int64, 0         // user: %11
  %11 = builtin "cmp_slt_Int64"(%5 : $Builtin.Int64, %10 : $Builtin.Int64) : $Builtin.Int1 // user: %12
  %12 = builtin "int_expect_Int1"(%11 : $Builtin.Int1, %9 : $Builtin.Int1) : $Builtin.Int1 // user: %13
  cond_br %12, bb1, bb2                           // id: %13

bb1:                                              // Preds: bb0
  %14 = integer_literal $Builtin.Int8, 2          // users: %28, %24, %19
  %15 = integer_literal $Builtin.Int32, 0         // user: %29
  %16 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %18
  %17 = integer_literal $Builtin.Word, 24         // user: %19
  %18 = builtin "ptrtoint_Word"(%16 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %19 = struct $StaticString (%18 : $Builtin.Word, %17 : $Builtin.Word, %14 : $Builtin.Int8) // user: %31
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %31
  %22 = string_literal utf8 ""                    // user: %23
  %23 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %24
  %24 = struct $StaticString (%23 : $Builtin.Word, %7 : $Builtin.Word, %14 : $Builtin.Int8) // user: %31
  %25 = string_literal utf8 "Fatal error"         // user: %27
  %26 = integer_literal $Builtin.Word, 11         // user: %28
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %28
  %28 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %14 : $Builtin.Int8) // user: %31
  %29 = struct $UInt32 (%15 : $Builtin.Int32)     // user: %31
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %30 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %31
  %31 = apply %30(%28, %24, %19, %21, %29) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %32

bb2:                                              // Preds: bb0
  %33 = end_init_let_ref %2 : $DataWrapper        // users: %44, %42
  %34 = struct $UnsafeMutableRawPointer (%8 : $Builtin.RawPointer) // user: %35
  %35 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %34 : $UnsafeMutableRawPointer // user: %41
  %36 = builtin "assumeNonNegative_Int64"(%5 : $Builtin.Int64) : $Builtin.Int64 // user: %37
  %37 = builtin "truncOrBitCast_Int64_Word"(%36 : $Builtin.Int64) : $Builtin.Word // user: %38
  %38 = index_raw_pointer %8 : $Builtin.RawPointer, %37 : $Builtin.Word // user: %39
  %39 = struct $UnsafeMutableRawPointer (%38 : $Builtin.RawPointer) // user: %40
  %40 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %39 : $UnsafeMutableRawPointer // user: %41
  %41 = struct $UnsafeMutableRawBufferPointer (%35 : $Optional<UnsafeMutableRawPointer>, %40 : $Optional<UnsafeMutableRawPointer>) // user: %43
  %42 = ref_element_addr %33 : $DataWrapper, #DataWrapper.pointer // user: %43
  store %41 to %42 : $*UnsafeMutableRawBufferPointer // id: %43
  return %33 : $DataWrapper                       // id: %44
} // end sil function '$s4main11DataWrapperC5countACSi_tcfC'

// DataWrapper.init(count:)
sil hidden @$s4main11DataWrapperC5countACSi_tcfc : $@convention(method) (Int, @owned DataWrapper) -> @owned DataWrapper {
[%1: escape => %r, escape c*.v** -> %r.c*.v**, write c0.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "count"                                     // users: %4, %2
// %1 "self"                                      // users: %32, %3
bb0(%0 : $Int, %1 : $DataWrapper):
  debug_value %0 : $Int, let, name "count", argno 1 // id: %2
  debug_value %1 : $DataWrapper, let, name "self", argno 2, implicit // id: %3
  %4 = struct_extract %0 : $Int, #Int._value      // users: %35, %10, %5
  %5 = builtin "truncOrBitCast_Int64_Word"(%4 : $Builtin.Int64) : $Builtin.Word // user: %7
  %6 = integer_literal $Builtin.Word, 0           // users: %23, %7
  %7 = builtin "allocRaw"(%5 : $Builtin.Word, %6 : $Builtin.Word) : $Builtin.RawPointer // users: %37, %33
  %8 = integer_literal $Builtin.Int1, 0           // user: %11
  %9 = integer_literal $Builtin.Int64, 0          // user: %10
  %10 = builtin "cmp_slt_Int64"(%4 : $Builtin.Int64, %9 : $Builtin.Int64) : $Builtin.Int1 // user: %11
  %11 = builtin "int_expect_Int1"(%10 : $Builtin.Int1, %8 : $Builtin.Int1) : $Builtin.Int1 // user: %12
  cond_br %11, bb1, bb2                           // id: %12

bb1:                                              // Preds: bb0
  %13 = integer_literal $Builtin.Int8, 2          // users: %27, %23, %18
  %14 = integer_literal $Builtin.Int32, 0         // user: %28
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %18
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %18
  %18 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %13 : $Builtin.Int8) // user: %30
  %19 = integer_literal $Builtin.Int64, 15505     // user: %20
  %20 = struct $UInt (%19 : $Builtin.Int64)       // user: %30
  %21 = string_literal utf8 ""                    // user: %22
  %22 = builtin "ptrtoint_Word"(%21 : $Builtin.RawPointer) : $Builtin.Word // user: %23
  %23 = struct $StaticString (%22 : $Builtin.Word, %6 : $Builtin.Word, %13 : $Builtin.Int8) // user: %30
  %24 = string_literal utf8 "Fatal error"         // user: %26
  %25 = integer_literal $Builtin.Word, 11         // user: %27
  %26 = builtin "ptrtoint_Word"(%24 : $Builtin.RawPointer) : $Builtin.Word // user: %27
  %27 = struct $StaticString (%26 : $Builtin.Word, %25 : $Builtin.Word, %13 : $Builtin.Int8) // user: %30
  %28 = struct $UInt32 (%14 : $Builtin.Int32)     // user: %30
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %29 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %30
  %30 = apply %29(%27, %23, %18, %20, %28) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %31

bb2:                                              // Preds: bb0
  %32 = end_init_let_ref %1 : $DataWrapper        // users: %41, %43
  %33 = struct $UnsafeMutableRawPointer (%7 : $Builtin.RawPointer) // user: %34
  %34 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %33 : $UnsafeMutableRawPointer // user: %40
  %35 = builtin "assumeNonNegative_Int64"(%4 : $Builtin.Int64) : $Builtin.Int64 // user: %36
  %36 = builtin "truncOrBitCast_Int64_Word"(%35 : $Builtin.Int64) : $Builtin.Word // user: %37
  %37 = index_raw_pointer %7 : $Builtin.RawPointer, %36 : $Builtin.Word // user: %38
  %38 = struct $UnsafeMutableRawPointer (%37 : $Builtin.RawPointer) // user: %39
  %39 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %38 : $UnsafeMutableRawPointer // user: %40
  %40 = struct $UnsafeMutableRawBufferPointer (%34 : $Optional<UnsafeMutableRawPointer>, %39 : $Optional<UnsafeMutableRawPointer>) // user: %42
  %41 = ref_element_addr %32 : $DataWrapper, #DataWrapper.pointer // user: %42
  store %40 to %41 : $*UnsafeMutableRawBufferPointer // id: %42
  return %32 : $DataWrapper                       // id: %43
} // end sil function '$s4main11DataWrapperC5countACSi_tcfc'

// DataWrapper.bytes.getter
sil hidden @$s4main11DataWrapperC5bytesSwvg : $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer {
[%0: read c*.v**, write c*.v**, copy c*.v**, destroy c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "self"                                      // users: %3, %2, %1
bb0(%0 : $DataWrapper):
  debug_value %0 : $DataWrapper, let, name "self", argno 1, implicit // id: %1
  %2 = class_method %0 : $DataWrapper, #DataWrapper.pointer!getter : (DataWrapper) -> () -> UnsafeMutableRawBufferPointer, $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed DataWrapper) -> UnsafeMutableRawBufferPointer // user: %4
  return %3 : $UnsafeMutableRawBufferPointer      // id: %4
} // end sil function '$s4main11DataWrapperC5bytesSwvg'

// DataWrapper.deinit
sil hidden @$s4main11DataWrapperCfd : $@convention(method) (@guaranteed DataWrapper) -> @owned Builtin.NativeObject {
[%0: escape => %r, read c0.s0.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "self"                                      // users: %15, %2, %1
bb0(%0 : $DataWrapper):
  debug_value %0 : $DataWrapper, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $DataWrapper, #DataWrapper.pointer // user: %3
  %3 = begin_access [read] [dynamic] [no_nested_conflict] %2 : $*UnsafeMutableRawBufferPointer // users: %4, %6
  %4 = struct_element_addr %3 : $*UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %5
  %5 = load %4 : $*Optional<UnsafeMutableRawPointer> // user: %7
  end_access %3 : $*UnsafeMutableRawBufferPointer // id: %6
  switch_enum %5 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb2 // id: %7

// %8                                             // user: %9
bb1(%8 : $UnsafeMutableRawPointer):               // Preds: bb0
  %9 = struct_extract %8 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %12
  %10 = integer_literal $Builtin.Word, -1         // user: %12
  %11 = integer_literal $Builtin.Word, 0          // user: %12
  %12 = builtin "deallocRaw"(%9 : $Builtin.RawPointer, %10 : $Builtin.Word, %11 : $Builtin.Word) : $()
  br bb3                                          // id: %13

bb2:                                              // Preds: bb0
  br bb3                                          // id: %14

bb3:                                              // Preds: bb2 bb1
  %15 = unchecked_ref_cast %0 : $DataWrapper to $Builtin.NativeObject // user: %16
  return %15 : $Builtin.NativeObject              // id: %16
} // end sil function '$s4main11DataWrapperCfd'

// DataWrapper.__deallocating_deinit
sil hidden @$s4main11DataWrapperCfD : $@convention(method) (@owned DataWrapper) -> () {
[%0: noescape, read c*.v**, write c*.v**, copy c*.v**, destroy c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "self"                                      // users: %16, %3, %2, %1
bb0(%0 : $DataWrapper):
  debug_value %0 : $DataWrapper, let, name "self", argno 1, implicit // id: %1
  debug_value %0 : $DataWrapper, let, name "self", argno 1, implicit // id: %2
  %3 = ref_element_addr %0 : $DataWrapper, #DataWrapper.pointer // user: %4
  %4 = begin_access [read] [dynamic] [no_nested_conflict] %3 : $*UnsafeMutableRawBufferPointer // users: %7, %5
  %5 = struct_element_addr %4 : $*UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %6
  %6 = load %5 : $*Optional<UnsafeMutableRawPointer> // user: %8
  end_access %4 : $*UnsafeMutableRawBufferPointer // id: %7
  switch_enum %6 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb2 // id: %8

// %9                                             // user: %10
bb1(%9 : $UnsafeMutableRawPointer):               // Preds: bb0
  %10 = struct_extract %9 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // user: %13
  %11 = integer_literal $Builtin.Word, -1         // user: %13
  %12 = integer_literal $Builtin.Word, 0          // user: %13
  %13 = builtin "deallocRaw"(%10 : $Builtin.RawPointer, %11 : $Builtin.Word, %12 : $Builtin.Word) : $()
  br bb3                                          // id: %14

bb2:                                              // Preds: bb0
  br bb3                                          // id: %15

bb3:                                              // Preds: bb2 bb1
  dealloc_ref %0 : $DataWrapper                   // id: %16
  %17 = tuple ()                                  // user: %18
  return %17 : $()                                // id: %18
} // end sil function '$s4main11DataWrapperCfD'

// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doit(_:)
sil hidden @$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF : $@convention(thin) (@guaranteed Array<UInt8>) -> () {
[%0: noescape **, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "input"                                     // users: %2, %49, %1
bb0(%0 : $Array<UInt8>):
  debug_value %0 : $Array<UInt8>, let, name "input", argno 1 // id: %1
  %2 = struct_extract %0 : $Array<UInt8>, #Array._buffer // user: %3
  %3 = struct_extract %2 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // user: %4
  %4 = ref_element_addr [immutable] %3 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %5
  %5 = struct_element_addr %4 : $*_ArrayBody, #_ArrayBody._storage // user: %6
  %6 = struct_element_addr %5 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %7
  %7 = struct_element_addr %6 : $*Int, #Int._value // user: %8
  %8 = load %7 : $*Builtin.Int64                  // users: %34, %11
  %9 = integer_literal $Builtin.Word, 0           // users: %47, %37, %24
  %10 = integer_literal $Builtin.Int64, 0         // user: %11
  %11 = builtin "cmp_slt_Int64"(%8 : $Builtin.Int64, %10 : $Builtin.Int64) : $Builtin.Int1 // user: %13
  %12 = integer_literal $Builtin.Int1, 0          // user: %13
  %13 = builtin "int_expect_Int1"(%11 : $Builtin.Int1, %12 : $Builtin.Int1) : $Builtin.Int1 // user: %14
  cond_br %13, bb1, bb2                           // id: %14

bb1:                                              // Preds: bb0
  %15 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %17
  %16 = integer_literal $Builtin.Word, 24         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %28, %24, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %32
  %20 = integer_literal $Builtin.Int64, 15505     // user: %21
  %21 = struct $UInt (%20 : $Builtin.Int64)       // user: %32
  %22 = string_literal utf8 ""                    // user: %23
  %23 = builtin "ptrtoint_Word"(%22 : $Builtin.RawPointer) : $Builtin.Word // user: %24
  %24 = struct $StaticString (%23 : $Builtin.Word, %9 : $Builtin.Word, %18 : $Builtin.Int8) // user: %32
  %25 = string_literal utf8 "Fatal error"         // user: %27
  %26 = integer_literal $Builtin.Word, 11         // user: %28
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %28
  %28 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %18 : $Builtin.Int8) // user: %32
  %29 = integer_literal $Builtin.Int32, 0         // user: %30
  %30 = struct $UInt32 (%29 : $Builtin.Int32)     // user: %32
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %31 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %32
  %32 = apply %31(%28, %24, %19, %21, %30) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %33

bb2:                                              // Preds: bb0
  %34 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // users: %35, %36, %40
  debug_value %34 : $Builtin.Int64, let, name "count", argno 1, type $Int, expr op_fragment:#Int._value // id: %35
  %36 = builtin "truncOrBitCast_Int64_Word"(%34 : $Builtin.Int64) : $Builtin.Word // user: %37
  %37 = builtin "allocRaw"(%36 : $Builtin.Word, %9 : $Builtin.Word) : $Builtin.RawPointer // users: %47, %42, %38
  %38 = struct $UnsafeMutableRawPointer (%37 : $Builtin.RawPointer) // user: %39
  %39 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %38 : $UnsafeMutableRawPointer // user: %45
  %40 = builtin "assumeNonNegative_Int64"(%34 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "truncOrBitCast_Int64_Word"(%40 : $Builtin.Int64) : $Builtin.Word // user: %42
  %42 = index_raw_pointer %37 : $Builtin.RawPointer, %41 : $Builtin.Word // user: %43
  %43 = struct $UnsafeMutableRawPointer (%42 : $Builtin.RawPointer) // user: %44
  %44 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %43 : $UnsafeMutableRawPointer // user: %45
  %45 = struct $UnsafeMutableRawBufferPointer (%39 : $Optional<UnsafeMutableRawPointer>, %44 : $Optional<UnsafeMutableRawPointer>) // user: %49
  %46 = integer_literal $Builtin.Word, -1         // user: %47
  %47 = builtin "deallocRaw"(%37 : $Builtin.RawPointer, %46 : $Builtin.Word, %9 : $Builtin.Word) : $()
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %48 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %49
  %49 = apply %48(%0, %45) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %50 = tuple ()                                  // user: %51
  return %50 : $()                                // id: %51
} // end sil function '$s4main63test_localVar_keepsObjectAliveBeyondCallToClassWithPointer_doityySays5UInt8VGF'

// Array.count.getter
sil public_external [_semantics "array.get_count"] @$sSa5countSivg : $@convention(method) <Element> (@guaranteed Array<Element>) -> Int {
[%0: noescape **]
// %0                                             // user: %2
bb0(%0 : $Array<Element>):
  // function_ref Array._getCount()
  %1 = function_ref @$sSa9_getCountSiyF : $@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int // user: %2
  %2 = apply %1<Element>(%0) : $@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int // user: %3
  return %2 : $Int                                // id: %3
} // end sil function '$sSa5countSivg'

// specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
sil shared @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () {
[%0: noescape **, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**]
[global: read,write,copy]
// %0                                             // user: %5
// %1                                             // user: %2
bb0(%0 : $Array<UInt8>, %1 : $UnsafeMutableRawBufferPointer):
  %2 = struct_extract %1 : $UnsafeMutableRawBufferPointer, #UnsafeMutableRawBufferPointer._position // user: %3
  switch_enum %2 : $Optional<UnsafeMutableRawPointer>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb4 // id: %3

// %4                                             // user: %42
bb1(%4 : $UnsafeMutableRawPointer):               // Preds: bb0
  %5 = struct_extract %0 : $Array<UInt8>, #Array._buffer // users: %44, %7
  %6 = alloc_stack $Optional<()>                  // users: %47, %46, %45
  %7 = struct_extract %5 : $_ContiguousArrayBuffer<UInt8>, #_ContiguousArrayBuffer._storage // users: %8, %38
  %8 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %9
  %9 = struct_element_addr %8 : $*_ArrayBody, #_ArrayBody._storage // user: %10
  %10 = struct_element_addr %9 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %11
  %11 = struct_element_addr %10 : $*Int, #Int._value // users: %79, %52, %12
  %12 = load %11 : $*Builtin.Int64                // users: %40, %25
  %13 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %15
  %14 = integer_literal $Builtin.Word, 24         // users: %85, %17
  %15 = builtin "ptrtoint_Word"(%13 : $Builtin.RawPointer) : $Builtin.Word // user: %17
  %16 = integer_literal $Builtin.Int8, 2          // users: %85, %89, %95, %104, %59, %32, %23, %17
  %17 = struct $StaticString (%15 : $Builtin.Word, %14 : $Builtin.Word, %16 : $Builtin.Int8) // users: %108, %63, %36
  %18 = integer_literal $Builtin.Int64, 15505     // user: %19
  %19 = struct $UInt (%18 : $Builtin.Int64)       // users: %108, %63, %36
  %20 = string_literal utf8 ""                    // user: %22
  %21 = integer_literal $Builtin.Word, 0          // user: %23
  %22 = builtin "ptrtoint_Word"(%20 : $Builtin.RawPointer) : $Builtin.Word // user: %23
  %23 = struct $StaticString (%22 : $Builtin.Word, %21 : $Builtin.Word, %16 : $Builtin.Int8) // users: %108, %63, %36
  %24 = integer_literal $Builtin.Int64, 0         // users: %76, %80, %53, %70, %72, %66, %25
  %25 = builtin "cmp_slt_Int64"(%12 : $Builtin.Int64, %24 : $Builtin.Int64) : $Builtin.Int1 // user: %27
  %26 = integer_literal $Builtin.Int1, 0          // users: %81, %54, %123, %43, %27
  %27 = builtin "int_expect_Int1"(%25 : $Builtin.Int1, %26 : $Builtin.Int1) : $Builtin.Int1 // user: %28
  cond_br %27, bb2, bb3                           // id: %28

bb2:                                              // Preds: bb1
  %29 = string_literal utf8 "Fatal error"         // user: %31
  %30 = integer_literal $Builtin.Word, 11         // user: %32
  %31 = builtin "ptrtoint_Word"(%29 : $Builtin.RawPointer) : $Builtin.Word // user: %32
  %32 = struct $StaticString (%31 : $Builtin.Word, %30 : $Builtin.Word, %16 : $Builtin.Int8) // user: %36
  %33 = integer_literal $Builtin.Int32, 0         // user: %34
  %34 = struct $UInt32 (%33 : $Builtin.Int32)     // user: %36
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %35 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %36
  %36 = apply %35(%32, %23, %17, %19, %34) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %37

bb3:                                              // Preds: bb1
  %38 = ref_tail_addr %7 : $__ContiguousArrayStorageBase, $UInt8 // users: %115, %39
  %39 = address_to_pointer %38 : $*UInt8 to $Builtin.RawPointer // user: %43
  %40 = builtin "assumeNonNegative_Int64"(%12 : $Builtin.Int64) : $Builtin.Int64 // user: %41
  %41 = builtin "assumeNonNegative_Int64"(%40 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = struct_extract %4 : $UnsafeMutableRawPointer, #UnsafeMutableRawPointer._rawValue // users: %122, %43
  %43 = builtin "int_memmove_RawPointer_RawPointer_Int64"(%42 : $Builtin.RawPointer, %39 : $Builtin.RawPointer, %41 : $Builtin.Int64, %26 : $Builtin.Int1) : $()
  fix_lifetime %5 : $_ContiguousArrayBuffer<UInt8> // id: %44
  inject_enum_addr %6 : $*Optional<()>, #Optional.some!enumelt // id: %45
  %46 = load %6 : $*Optional<()>                  // user: %48
  dealloc_stack %6 : $*Optional<()>               // id: %47
  switch_enum %46 : $Optional<()>, case #Optional.some!enumelt: bb5, case #Optional.none!enumelt: bb6 // id: %48

bb4:                                              // Preds: bb0
  br bb10                                         // id: %49

bb5(%50 : $()):                                   // Preds: bb3
  br bb10                                         // id: %51

bb6:                                              // Preds: bb3
  %52 = load %11 : $*Builtin.Int64                // users: %65, %53
  %53 = builtin "cmp_slt_Int64"(%52 : $Builtin.Int64, %24 : $Builtin.Int64) : $Builtin.Int1 // user: %54
  %54 = builtin "int_expect_Int1"(%53 : $Builtin.Int1, %26 : $Builtin.Int1) : $Builtin.Int1 // user: %55
  cond_br %54, bb7, bb8                           // id: %55

bb7:                                              // Preds: bb6
  %56 = string_literal utf8 "Fatal error"         // user: %58
  %57 = integer_literal $Builtin.Word, 11         // user: %59
  %58 = builtin "ptrtoint_Word"(%56 : $Builtin.RawPointer) : $Builtin.Word // user: %59
  %59 = struct $StaticString (%58 : $Builtin.Word, %57 : $Builtin.Word, %16 : $Builtin.Int8) // user: %63
  %60 = integer_literal $Builtin.Int32, 0         // user: %61
  %61 = struct $UInt32 (%60 : $Builtin.Int32)     // user: %63
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %62 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %63
  %63 = apply %62(%59, %23, %17, %19, %61) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %64

bb8:                                              // Preds: bb6
  %65 = builtin "assumeNonNegative_Int64"(%52 : $Builtin.Int64) : $Builtin.Int64 // users: %125, %66, %70
  %66 = builtin "cmp_eq_Int64"(%65 : $Builtin.Int64, %24 : $Builtin.Int64) : $Builtin.Int1 // user: %67
  cond_br %66, bb21, bb9                          // id: %67

bb9:                                              // Preds: bb8
  %68 = integer_literal $Builtin.Int64, 1         // users: %123, %117
  %69 = integer_literal $Builtin.Int1, -1         // users: %112, %117
  %70 = builtin "cmp_sge_Int64"(%24 : $Builtin.Int64, %65 : $Builtin.Int64) : $Builtin.Int1 // user: %71
  cond_fail %70 : $Builtin.Int1, "loop induction variable overflowed" // id: %71
  br bb11(%24 : $Builtin.Int64)                   // id: %72

bb10:                                             // Preds: bb20 bb4 bb21 bb5
  %73 = tuple ()                                  // user: %74
  return %73 : $()                                // id: %74

// %75                                            // users: %76, %111, %114, %117
bb11(%75 : $Builtin.Int64):                       // Preds: bb9 bb19
  %76 = builtin "cmp_slt_Int64"(%75 : $Builtin.Int64, %24 : $Builtin.Int64) : $Builtin.Int1 // user: %77
  cond_br %76, bb12, bb13                         // id: %77

bb12:                                             // Preds: bb11
  br bb14                                         // id: %78

bb13:                                             // Preds: bb11
  %79 = load %11 : $*Builtin.Int64                // users: %110, %80
  %80 = builtin "cmp_slt_Int64"(%79 : $Builtin.Int64, %24 : $Builtin.Int64) : $Builtin.Int1 // user: %81
  %81 = builtin "int_expect_Int1"(%80 : $Builtin.Int1, %26 : $Builtin.Int1) : $Builtin.Int1 // user: %82
  cond_br %81, bb15, bb16                         // id: %82

bb14:                                             // Preds: bb18 bb12
  %83 = string_literal utf8 "Array index out of range" // user: %84
  %84 = builtin "ptrtoint_Word"(%83 : $Builtin.RawPointer) : $Builtin.Word // user: %85
  %85 = struct $StaticString (%84 : $Builtin.Word, %14 : $Builtin.Word, %16 : $Builtin.Int8) // user: %99
  %86 = string_literal utf8 "Swift/ContiguousArrayBuffer.swift" // user: %88
  %87 = integer_literal $Builtin.Word, 33         // user: %89
  %88 = builtin "ptrtoint_Word"(%86 : $Builtin.RawPointer) : $Builtin.Word // user: %89
  %89 = struct $StaticString (%88 : $Builtin.Word, %87 : $Builtin.Word, %16 : $Builtin.Int8) // user: %99
  %90 = integer_literal $Builtin.Int64, 502       // user: %91
  %91 = struct $UInt (%90 : $Builtin.Int64)       // user: %99
  %92 = string_literal utf8 "Fatal error"         // user: %94
  %93 = integer_literal $Builtin.Word, 11         // user: %95
  %94 = builtin "ptrtoint_Word"(%92 : $Builtin.RawPointer) : $Builtin.Word // user: %95
  %95 = struct $StaticString (%94 : $Builtin.Word, %93 : $Builtin.Word, %16 : $Builtin.Int8) // user: %99
  %96 = integer_literal $Builtin.Int32, 0         // user: %97
  %97 = struct $UInt32 (%96 : $Builtin.Int32)     // user: %99
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %98 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %99
  %99 = apply %98(%95, %85, %89, %91, %97) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %100

bb15:                                             // Preds: bb13
  %101 = string_literal utf8 "Fatal error"        // user: %103
  %102 = integer_literal $Builtin.Word, 11        // user: %104
  %103 = builtin "ptrtoint_Word"(%101 : $Builtin.RawPointer) : $Builtin.Word // user: %104
  %104 = struct $StaticString (%103 : $Builtin.Word, %102 : $Builtin.Word, %16 : $Builtin.Int8) // user: %108
  %105 = integer_literal $Builtin.Int32, 0        // user: %106
  %106 = struct $UInt32 (%105 : $Builtin.Int32)   // user: %108
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %107 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %108
  %108 = apply %107(%104, %23, %17, %19, %106) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %109

bb16:                                             // Preds: bb13
  %110 = builtin "assumeNonNegative_Int64"(%79 : $Builtin.Int64) : $Builtin.Int64 // user: %111
  %111 = builtin "cmp_slt_Int64"(%75 : $Builtin.Int64, %110 : $Builtin.Int64) : $Builtin.Int1 // user: %112
  %112 = builtin "int_expect_Int1"(%111 : $Builtin.Int1, %69 : $Builtin.Int1) : $Builtin.Int1 // user: %113
  cond_br %112, bb17, bb18                        // id: %113

bb17:                                             // Preds: bb16
  %114 = builtin "truncOrBitCast_Int64_Word"(%75 : $Builtin.Int64) : $Builtin.Word // users: %122, %115
  %115 = index_addr [stack_protection] %38 : $*UInt8, %114 : $Builtin.Word // user: %116
  %116 = load %115 : $*UInt8                      // user: %120
  %117 = builtin "sadd_with_overflow_Int64"(%75 : $Builtin.Int64, %68 : $Builtin.Int64, %69 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %118
  %118 = tuple_extract %117 : $(Builtin.Int64, Builtin.Int1), 0 // users: %128, %125
  %119 = alloc_stack $UInt8                       // users: %124, %121, %120
  store %116 to %119 : $*UInt8                    // id: %120
  %121 = address_to_pointer [stack_protection] %119 : $*UInt8 to $Builtin.RawPointer // user: %123
  %122 = index_raw_pointer %42 : $Builtin.RawPointer, %114 : $Builtin.Word // user: %123
  %123 = builtin "int_memcpy_RawPointer_RawPointer_Int64"(%122 : $Builtin.RawPointer, %121 : $Builtin.RawPointer, %68 : $Builtin.Int64, %26 : $Builtin.Int1) : $()
  dealloc_stack %119 : $*UInt8                    // id: %124
  %125 = builtin "cmp_eq_Int64"(%118 : $Builtin.Int64, %65 : $Builtin.Int64) : $Builtin.Int1 // user: %126
  cond_br %125, bb20, bb19                        // id: %126

bb18:                                             // Preds: bb16
  br bb14                                         // id: %127

bb19:                                             // Preds: bb17
  br bb11(%118 : $Builtin.Int64)                  // id: %128

bb20:                                             // Preds: bb17
  br bb10                                         // id: %129

bb21:                                             // Preds: bb8
  br bb10                                         // id: %130
} // end sil function '$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5'

// test_localVar_keepsObjectAliveBeyondCallToClassWithPointer()
sil hidden @$s4main58test_localVar_keepsObjectAliveBeyondCallToClassWithPointeryyF : $@convention(thin) () -> () {
[global: read,write,copy,destroy,allocate,deinit_barrier]
bb0:
  %0 = integer_literal $Builtin.Word, 5           // users: %49, %46, %3
  %1 = integer_literal $Builtin.Int64, 5          // users: %45, %2
  %2 = struct $Int (%1 : $Builtin.Int64)          // user: %8
  %3 = alloc_ref [stack] [tail_elems $UInt8 * %0 : $Builtin.Word] $_ContiguousArrayStorage<UInt8> // users: %58, %4, %119
  %4 = upcast %3 : $_ContiguousArrayStorage<UInt8> to $__ContiguousArrayStorageBase // users: %40, %13, %10, %5
  %5 = struct $_ContiguousArrayBuffer<UInt8> (%4 : $__ContiguousArrayStorageBase) // user: %12
  %6 = integer_literal $Builtin.Int64, 10         // user: %7
  %7 = struct $UInt (%6 : $Builtin.Int64)         // user: %8
  %8 = struct $_SwiftArrayBodyStorage (%2 : $Int, %7 : $UInt) // user: %9
  %9 = struct $_ArrayBody (%8 : $_SwiftArrayBodyStorage) // user: %11
  %10 = ref_element_addr %4 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %11
  store %9 to %10 : $*_ArrayBody                  // id: %11
  %12 = struct $Array<UInt8> (%5 : $_ContiguousArrayBuffer<UInt8>) // user: %15
  %13 = ref_tail_addr %4 : $__ContiguousArrayStorageBase, $UInt8 // user: %14
  %14 = address_to_pointer %13 : $*UInt8 to $Builtin.RawPointer // user: %15
  %15 = mark_dependence %14 : $Builtin.RawPointer on %12 : $Array<UInt8> // user: %16
  %16 = pointer_to_address %15 : $Builtin.RawPointer to [strict] $*UInt8 // users: %19, %36, %31, %26, %21
  %17 = integer_literal $Builtin.Int8, 1          // user: %18
  %18 = struct $UInt8 (%17 : $Builtin.Int8)       // user: %19
  store %18 to %16 : $*UInt8                      // id: %19
  %20 = integer_literal $Builtin.Word, 1          // user: %21
  %21 = index_addr %16 : $*UInt8, %20 : $Builtin.Word // user: %24
  %22 = integer_literal $Builtin.Int8, 2          // users: %73, %78, %82, %102, %106, %112, %23
  %23 = struct $UInt8 (%22 : $Builtin.Int8)       // user: %24
  store %23 to %21 : $*UInt8                      // id: %24
  %25 = integer_literal $Builtin.Word, 2          // user: %26
  %26 = index_addr %16 : $*UInt8, %25 : $Builtin.Word // user: %29
  %27 = integer_literal $Builtin.Int8, 3          // user: %28
  %28 = struct $UInt8 (%27 : $Builtin.Int8)       // user: %29
  store %28 to %26 : $*UInt8                      // id: %29
  %30 = integer_literal $Builtin.Word, 3          // user: %31
  %31 = index_addr %16 : $*UInt8, %30 : $Builtin.Word // user: %34
  %32 = integer_literal $Builtin.Int8, 4          // user: %33
  %33 = struct $UInt8 (%32 : $Builtin.Int8)       // user: %34
  store %33 to %31 : $*UInt8                      // id: %34
  %35 = integer_literal $Builtin.Word, 4          // user: %36
  %36 = index_addr %16 : $*UInt8, %35 : $Builtin.Word // user: %39
  %37 = integer_literal $Builtin.Int8, 50         // user: %38
  %38 = struct $UInt8 (%37 : $Builtin.Int8)       // user: %39
  store %38 to %36 : $*UInt8                      // id: %39
  %40 = end_cow_mutation %4 : $__ContiguousArrayStorageBase // users: %57, %41
  %41 = struct $_ContiguousArrayBuffer<UInt8> (%40 : $__ContiguousArrayStorageBase) // user: %42
  %42 = struct $Array<UInt8> (%41 : $_ContiguousArrayBuffer<UInt8>) // users: %43, %56
  debug_value %42 : $Array<UInt8>, let, name "input", argno 1 // id: %43
  %44 = integer_literal $Builtin.Word, 0          // users: %78, %54, %46
  debug_value %1 : $Builtin.Int64, let, name "count", argno 1, type $Int, expr op_fragment:#Int._value // id: %45
  %46 = builtin "allocRaw"(%0 : $Builtin.Word, %44 : $Builtin.Word) : $Builtin.RawPointer // users: %54, %49, %47
  %47 = struct $UnsafeMutableRawPointer (%46 : $Builtin.RawPointer) // user: %48
  %48 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %47 : $UnsafeMutableRawPointer // user: %52
  %49 = index_raw_pointer %46 : $Builtin.RawPointer, %0 : $Builtin.Word // user: %50
  %50 = struct $UnsafeMutableRawPointer (%49 : $Builtin.RawPointer) // user: %51
  %51 = enum $Optional<UnsafeMutableRawPointer>, #Optional.some!enumelt, %50 : $UnsafeMutableRawPointer // user: %52
  %52 = struct $UnsafeMutableRawBufferPointer (%48 : $Optional<UnsafeMutableRawPointer>, %51 : $Optional<UnsafeMutableRawPointer>) // user: %56
  %53 = integer_literal $Builtin.Word, -1         // user: %54
  %54 = builtin "deallocRaw"(%46 : $Builtin.RawPointer, %53 : $Builtin.Word, %44 : $Builtin.Word) : $()
  // function_ref specialized UnsafeMutableRawBufferPointer.copyBytes<A>(from:)
  %55 = function_ref @$sSw9copyBytes4fromyx_tSlRzs5UInt8V7ElementRtzlFSayADG_Tg5 : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> () // user: %56
  %56 = apply %55(%42, %52) : $@convention(method) (@guaranteed Array<UInt8>, UnsafeMutableRawBufferPointer) -> ()
  %57 = unchecked_ref_cast %40 : $__ContiguousArrayStorageBase to $_ContiguousArrayStorage<UInt8> // user: %58
  %58 = begin_dealloc_ref %57 : $_ContiguousArrayStorage<UInt8> of %3 : $_ContiguousArrayStorage<UInt8> // users: %118, %88, %59
  %59 = upcast %58 : $_ContiguousArrayStorage<UInt8> to $__ContiguousArrayStorageBase // users: %89, %60
  %60 = ref_element_addr %59 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %61
  %61 = struct_element_addr %60 : $*_ArrayBody, #_ArrayBody._storage // user: %62
  %62 = struct_element_addr %61 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %63
  %63 = struct_element_addr %62 : $*Int, #Int._value // user: %64
  %64 = load %63 : $*Builtin.Int64                // user: %66
  %65 = integer_literal $Builtin.Int64, 0         // user: %66
  %66 = builtin "cmp_slt_Int64"(%64 : $Builtin.Int64, %65 : $Builtin.Int64) : $Builtin.Int1 // user: %68
  %67 = integer_literal $Builtin.Int1, 0          // users: %97, %68
  %68 = builtin "int_expect_Int1"(%66 : $Builtin.Int1, %67 : $Builtin.Int1) : $Builtin.Int1 // user: %69
  cond_br %68, bb1, bb2                           // id: %69

bb1:                                              // Preds: bb0
  %70 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %72
  %71 = integer_literal $Builtin.Word, 24         // user: %73
  %72 = builtin "ptrtoint_Word"(%70 : $Builtin.RawPointer) : $Builtin.Word // user: %73
  %73 = struct $StaticString (%72 : $Builtin.Word, %71 : $Builtin.Word, %22 : $Builtin.Int8) // user: %86
  %74 = integer_literal $Builtin.Int64, 15505     // user: %75
  %75 = struct $UInt (%74 : $Builtin.Int64)       // user: %86
  %76 = string_literal utf8 ""                    // user: %77
  %77 = builtin "ptrtoint_Word"(%76 : $Builtin.RawPointer) : $Builtin.Word // user: %78
  %78 = struct $StaticString (%77 : $Builtin.Word, %44 : $Builtin.Word, %22 : $Builtin.Int8) // user: %86
  %79 = string_literal utf8 "Fatal error"         // user: %81
  %80 = integer_literal $Builtin.Word, 11         // user: %82
  %81 = builtin "ptrtoint_Word"(%79 : $Builtin.RawPointer) : $Builtin.Word // user: %82
  %82 = struct $StaticString (%81 : $Builtin.Word, %80 : $Builtin.Word, %22 : $Builtin.Int8) // user: %86
  %83 = integer_literal $Builtin.Int32, 0         // user: %84
  %84 = struct $UInt32 (%83 : $Builtin.Int32)     // user: %86
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %85 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %86
  %86 = apply %85(%82, %78, %73, %75, %84) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %87

bb2:                                              // Preds: bb0
  fix_lifetime %58 : $_ContiguousArrayStorage<UInt8> // id: %88
  %89 = init_existential_ref %59 : $__ContiguousArrayStorageBase : $__ContiguousArrayStorageBase, $AnyObject // user: %94
  %90 = global_addr @_swiftEmptyArrayStorage : $*_SwiftEmptyArrayStorage // user: %91
  %91 = address_to_pointer [stack_protection] %90 : $*_SwiftEmptyArrayStorage to $Builtin.RawPointer // user: %92
  %92 = raw_pointer_to_ref %91 : $Builtin.RawPointer to $__EmptyArrayStorage // user: %93
  %93 = init_existential_ref %92 : $__EmptyArrayStorage : $__EmptyArrayStorage, $AnyObject // user: %95
  %94 = ref_to_raw_pointer %89 : $AnyObject to $Builtin.RawPointer // user: %96
  %95 = ref_to_raw_pointer %93 : $AnyObject to $Builtin.RawPointer // user: %96
  %96 = builtin "cmp_eq_RawPointer"(%94 : $Builtin.RawPointer, %95 : $Builtin.RawPointer) : $Builtin.Int1 // user: %97
  %97 = builtin "int_expect_Int1"(%96 : $Builtin.Int1, %67 : $Builtin.Int1) : $Builtin.Int1 // user: %98
  cond_br %97, bb3, bb4                           // id: %98

bb3:                                              // Preds: bb2
  %99 = string_literal utf8 "Deallocating empty array storage?!" // user: %101
  %100 = integer_literal $Builtin.Word, 34        // user: %102
  %101 = builtin "ptrtoint_Word"(%99 : $Builtin.RawPointer) : $Builtin.Word // user: %102
  %102 = struct $StaticString (%101 : $Builtin.Word, %100 : $Builtin.Word, %22 : $Builtin.Int8) // user: %116
  %103 = string_literal utf8 "Swift/SwiftNativeNSArray.swift" // user: %105
  %104 = integer_literal $Builtin.Word, 30        // user: %106
  %105 = builtin "ptrtoint_Word"(%103 : $Builtin.RawPointer) : $Builtin.Word // user: %106
  %106 = struct $StaticString (%105 : $Builtin.Word, %104 : $Builtin.Word, %22 : $Builtin.Int8) // user: %116
  %107 = integer_literal $Builtin.Int64, 579      // user: %108
  %108 = struct $UInt (%107 : $Builtin.Int64)     // user: %116
  %109 = string_literal utf8 "Fatal error"        // user: %111
  %110 = integer_literal $Builtin.Word, 11        // user: %112
  %111 = builtin "ptrtoint_Word"(%109 : $Builtin.RawPointer) : $Builtin.Word // user: %112
  %112 = struct $StaticString (%111 : $Builtin.Word, %110 : $Builtin.Word, %22 : $Builtin.Int8) // user: %116
  %113 = integer_literal $Builtin.Int32, 0        // user: %114
  %114 = struct $UInt32 (%113 : $Builtin.Int32)   // user: %116
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %115 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %116
  %116 = apply %115(%112, %102, %106, %108, %114) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %117

bb4:                                              // Preds: bb2
  dealloc_ref %58 : $_ContiguousArrayStorage<UInt8> // id: %118
  dealloc_stack_ref %3 : $_ContiguousArrayStorage<UInt8> // id: %119
  %120 = tuple ()                                 // user: %121
  return %120 : $()                               // id: %121
} // end sil function '$s4main58test_localVar_keepsObjectAliveBeyondCallToClassWithPointeryyF'

// do_foo_async(_:)
sil hidden @$s4main12do_foo_asyncyScTyyts5NeverOGyycF : $@convention(thin) (@guaranteed @callee_guaranteed () -> ()) -> @owned Task<(), Never> {
[%0: read v**.c*.v**, write v**.c*.v**, copy v**.**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "work"                                      // users: %11, %19, %5, %1
bb0(%0 : $@callee_guaranteed () -> ()):
  debug_value %0 : $@callee_guaranteed () -> (), let, name "work", argno 1 // id: %1
  %2 = alloc_stack $Optional<TaskPriority>        // users: %6, %20, %7, %36, %3
  inject_enum_addr %2 : $*Optional<TaskPriority>, #Optional.none!enumelt // id: %3
  // function_ref closure #1 in do_foo_async(_:)
  %4 = function_ref @$s4main12do_foo_asyncyScTyyts5NeverOGyycFyyYaYbcfU_ : $@convention(thin) @Sendable @async @substituted <τ_0_0> (@guaranteed @callee_guaranteed () -> ()) -> @out τ_0_0 for <()> // user: %5
  %5 = partial_apply [callee_guaranteed] %4(%0) : $@convention(thin) @Sendable @async @substituted <τ_0_0> (@guaranteed @callee_guaranteed () -> ()) -> @out τ_0_0 for <()> // user: %27
  switch_enum_addr %2 : $*Optional<TaskPriority>, case #Optional.some!enumelt: bb1, case #Optional.none!enumelt: bb2 // id: %6

bb1:                                              // Preds: bb0
  %7 = unchecked_take_enum_data_addr %2 : $*Optional<TaskPriority>, #Optional.some!enumelt // users: %14, %9
  %8 = alloc_stack $TaskPriority                  // users: %15, %13, %12, %9
  copy_addr %7 to [init] %8 : $*TaskPriority      // id: %9
  // function_ref TaskPriority.rawValue.getter
  %10 = function_ref @$sScP8rawValues5UInt8Vvg : $@convention(method) (@in_guaranteed TaskPriority) -> UInt8 // user: %12
  strong_retain %0 : $@callee_guaranteed () -> () // id: %11
  %12 = apply %10(%8) : $@convention(method) (@in_guaranteed TaskPriority) -> UInt8 // user: %16
  destroy_addr %8 : $*TaskPriority                // id: %13
  destroy_addr %7 : $*TaskPriority                // id: %14
  dealloc_stack %8 : $*TaskPriority               // id: %15
  %16 = struct_extract %12 : $UInt8, #UInt8._value // user: %17
  %17 = builtin "zextOrBitCast_Int8_Int64"(%16 : $Builtin.Int8) : $Builtin.Int64 // user: %18
  br bb3(%17 : $Builtin.Int64)                    // id: %18

bb2:                                              // Preds: bb0
  strong_retain %0 : $@callee_guaranteed () -> () // id: %19
  destroy_addr %2 : $*Optional<TaskPriority>      // id: %20
  %21 = integer_literal $Builtin.Int64, 0         // user: %22
  br bb3(%21 : $Builtin.Int64)                    // id: %22

// %23                                            // user: %25
bb3(%23 : $Builtin.Int64):                        // Preds: bb2 bb1
  %24 = integer_literal $Builtin.Int64, 7168      // user: %25
  %25 = builtin "or_Int64"(%23 : $Builtin.Int64, %24 : $Builtin.Int64) : $Builtin.Int64 // user: %26
  %26 = struct $Int (%25 : $Builtin.Int64)        // user: %33
  %27 = convert_function %5 : $@Sendable @async @callee_guaranteed @substituted <τ_0_0> () -> @out τ_0_0 for <()> to $@Sendable @async @callee_guaranteed () -> @out () // user: %29
  // function_ref specialized thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A)
  %28 = function_ref @$sxIeghHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5 : $@convention(thin) @async (@guaranteed @Sendable @async @callee_guaranteed () -> @out ()) -> (@out (), @error any Error) // user: %29
  %29 = partial_apply [callee_guaranteed] %28(%27) : $@convention(thin) @async (@guaranteed @Sendable @async @callee_guaranteed () -> @out ()) -> (@out (), @error any Error) // user: %30
  %30 = convert_function %29 : $@async @callee_guaranteed () -> (@out (), @error any Error) to $@async @callee_guaranteed @substituted <τ_0_0> () -> (@out τ_0_0, @error any Error) for <()> // user: %33
  %31 = metatype $@thick ().Type                  // user: %32
  %32 = init_existential_metatype %31 : $@thick ().Type, $@thick any Any.Type // user: %33
  %33 = builtin "createAsyncTask"<()>(%26 : $Int, %32 : $@thick any Any.Type, %30 : $@async @callee_guaranteed @substituted <τ_0_0> () -> (@out τ_0_0, @error any Error) for <()>) : $(Builtin.NativeObject, Builtin.RawPointer) // user: %34
  %34 = tuple_extract %33 : $(Builtin.NativeObject, Builtin.RawPointer), 0 // user: %35
  %35 = struct $Task<(), Never> (%34 : $Builtin.NativeObject) // user: %37
  dealloc_stack %2 : $*Optional<TaskPriority>     // id: %36
  return %35 : $Task<(), Never>                   // id: %37
} // end sil function '$s4main12do_foo_asyncyScTyyts5NeverOGyycF'

// closure #1 in do_foo_async(_:)
sil private @$s4main12do_foo_asyncyScTyyts5NeverOGyycFyyYaYbcfU_ : $@convention(thin) @Sendable @async @substituted <τ_0_0> (@guaranteed @callee_guaranteed () -> ()) -> @out τ_0_0 for <()> {
[%1: noescape **, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "$return_value"
// %1 "work"                                      // users: %5, %2
bb0(%0 : $*(), %1 : @closureCapture $@callee_guaranteed () -> ()):
  debug_value %1 : $@callee_guaranteed () -> (), let, name "work", argno 1 // id: %2
  %3 = enum $Optional<Builtin.Executor>, #Optional.none!enumelt // user: %4
  hop_to_executor %3 : $Optional<Builtin.Executor> // id: %4
  %5 = apply %1() : $@callee_guaranteed () -> ()
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$s4main12do_foo_asyncyScTyyts5NeverOGyycFyyYaYbcfU_'

// variable initialization expression of FooerAsync.strongSelf
sil hidden [transparent] @$s4main10FooerAsyncC10strongSelfACSgvpfi : $@convention(thin) () -> @owned Optional<FooerAsync> {
[global: ]
bb0:
  %0 = enum $Optional<FooerAsync>, #Optional.none!enumelt // user: %1
  return %0 : $Optional<FooerAsync>               // id: %1
} // end sil function '$s4main10FooerAsyncC10strongSelfACSgvpfi'

// FooerAsync.strongSelf.getter
sil hidden [transparent] @$s4main10FooerAsyncC10strongSelfACSgvg : $@convention(method) (@guaranteed FooerAsync) -> @owned Optional<FooerAsync> {
[%0: noescape, escape c*.v** -> %r.v**, read c0.v**, copy c*.v**]
[global: copy]
// %0 "self"                                      // users: %2, %1
bb0(%0 : $FooerAsync):
  debug_value %0 : $FooerAsync, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $FooerAsync, #FooerAsync.strongSelf // user: %3
  %3 = begin_access [read] [dynamic] [no_nested_conflict] %2 : $*Optional<FooerAsync> // users: %4, %5
  %4 = load %3 : $*Optional<FooerAsync>           // users: %6, %7
  end_access %3 : $*Optional<FooerAsync>          // id: %5
  retain_value %4 : $Optional<FooerAsync>         // id: %6
  return %4 : $Optional<FooerAsync>               // id: %7
} // end sil function '$s4main10FooerAsyncC10strongSelfACSgvg'

// FooerAsync.strongSelf.setter
sil hidden [transparent] @$s4main10FooerAsyncC10strongSelfACSgvs : $@convention(method) (@owned Optional<FooerAsync>, @guaranteed FooerAsync) -> () {
[%0: escape v** -> %1.c0.v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[%1: noescape, noescape c*.v**, read c0.v**, write c0.v**, copy c*.v**, destroy c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "value"                                     // users: %7, %2
// %1 "self"                                      // users: %4, %3
bb0(%0 : $Optional<FooerAsync>, %1 : $FooerAsync):
  debug_value %0 : $Optional<FooerAsync>, let, name "value", argno 1, implicit // id: %2
  debug_value %1 : $FooerAsync, let, name "self", argno 2, implicit // id: %3
  %4 = ref_element_addr %1 : $FooerAsync, #FooerAsync.strongSelf // user: %5
  %5 = begin_access [modify] [dynamic] [no_nested_conflict] %4 : $*Optional<FooerAsync> // users: %7, %6, %8
  %6 = load %5 : $*Optional<FooerAsync>           // user: %9
  store %0 to %5 : $*Optional<FooerAsync>         // id: %7
  end_access %5 : $*Optional<FooerAsync>          // id: %8
  release_value %6 : $Optional<FooerAsync>        // id: %9
  %10 = tuple ()                                  // user: %11
  return %10 : $()                                // id: %11
} // end sil function '$s4main10FooerAsyncC10strongSelfACSgvs'

// FooerAsync.strongSelf.modify
sil hidden [transparent] @$s4main10FooerAsyncC10strongSelfACSgvM : $@yield_once @convention(method) (@guaranteed FooerAsync) -> @yields @inout Optional<FooerAsync> {
[%0: noescape, read c*.v**, write c*.v**, copy c*.v**, destroy c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "self"                                      // users: %2, %1
bb0(%0 : $FooerAsync):
  debug_value %0 : $FooerAsync, let, name "self", argno 1, implicit // id: %1
  %2 = ref_element_addr %0 : $FooerAsync, #FooerAsync.strongSelf // user: %3
  %3 = begin_access [modify] [dynamic] %2 : $*Optional<FooerAsync> // users: %5, %8, %4
  yield %3 : $*Optional<FooerAsync>, resume bb1, unwind bb2 // id: %4

bb1:                                              // Preds: bb0
  end_access %3 : $*Optional<FooerAsync>          // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7

bb2:                                              // Preds: bb0
  end_access %3 : $*Optional<FooerAsync>          // id: %8
  unwind                                          // id: %9
} // end sil function '$s4main10FooerAsyncC10strongSelfACSgvM'

// FooerAsync.foo()
sil hidden @$s4main10FooerAsyncC3fooScTyyts5NeverOGyF : $@convention(method) (@owned FooerAsync) -> @owned Task<(), Never> {
[%0: read v**.c*.v**, write v**.c*.v**, copy **, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "self"                                      // users: %14, %7, %4, %6, %8, %1
bb0(%0 : $FooerAsync):
  debug_value %0 : $FooerAsync, let, name "self", argno 1, implicit // id: %1
  %2 = alloc_box ${ var @sil_weak Optional<FooerAsync> }, var, name "weakSelf" // users: %16, %12, %10, %3
  %3 = project_box %2 : ${ var @sil_weak Optional<FooerAsync> }, 0 // user: %5
  %4 = enum $Optional<FooerAsync>, #Optional.some!enumelt, %0 : $FooerAsync // users: %8, %5
  store_weak %4 to [init] %3 : $*@sil_weak Optional<FooerAsync> // id: %5
  %6 = class_method %0 : $FooerAsync, #FooerAsync.strongSelf!setter : (FooerAsync) -> (FooerAsync?) -> (), $@convention(method) (@owned Optional<FooerAsync>, @guaranteed FooerAsync) -> () // user: %8
  strong_retain %0 : $FooerAsync                  // id: %7
  %8 = apply %6(%4, %0) : $@convention(method) (@owned Optional<FooerAsync>, @guaranteed FooerAsync) -> ()
  // function_ref closure #1 in FooerAsync.foo()
  %9 = function_ref @$s4main10FooerAsyncC3fooScTyyts5NeverOGyFyycfU_ : $@convention(thin) (@guaranteed { var @sil_weak Optional<FooerAsync> }) -> () // user: %10
  %10 = partial_apply [callee_guaranteed] %9(%2) : $@convention(thin) (@guaranteed { var @sil_weak Optional<FooerAsync> }) -> () // users: %15, %13
  // function_ref do_foo_async(_:)
  %11 = function_ref @$s4main12do_foo_asyncyScTyyts5NeverOGyycF : $@convention(thin) (@guaranteed @callee_guaranteed () -> ()) -> @owned Task<(), Never> // user: %13
  strong_retain %2 : ${ var @sil_weak Optional<FooerAsync> } // id: %12
  %13 = apply %11(%10) : $@convention(thin) (@guaranteed @callee_guaranteed () -> ()) -> @owned Task<(), Never> // user: %17
  strong_release %0 : $FooerAsync                 // id: %14
  strong_release %10 : $@callee_guaranteed () -> () // id: %15
  strong_release %2 : ${ var @sil_weak Optional<FooerAsync> } // id: %16
  return %13 : $Task<(), Never>                   // id: %17
} // end sil function '$s4main10FooerAsyncC3fooScTyyts5NeverOGyF'

// closure #1 in FooerAsync.foo()
sil private @$s4main10FooerAsyncC3fooScTyyts5NeverOGyFyycfU_ : $@convention(thin) (@guaranteed { var @sil_weak Optional<FooerAsync> }) -> () {
[%0: noescape v**, read c0.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "weakSelf"                                  // user: %1
bb0(%0 : @closureCapture ${ var @sil_weak Optional<FooerAsync> }):
  %1 = project_box %0 : ${ var @sil_weak Optional<FooerAsync> }, 0 // users: %15, %3, %2
  debug_value %1 : $*@sil_weak Optional<FooerAsync>, var, name "weakSelf", argno 1, expr op_deref // id: %2
  %3 = begin_access [read] [dynamic] [no_nested_conflict] %1 : $*@sil_weak Optional<FooerAsync> // users: %10, %6, %4
  %4 = load_weak %3 : $*@sil_weak Optional<FooerAsync> // users: %13, %9, %5
  switch_enum %4 : $Optional<FooerAsync>, case #Optional.none!enumelt: bb1, case #Optional.some!enumelt: bb2 // id: %5

bb1:                                              // Preds: bb0
  end_access %3 : $*@sil_weak Optional<FooerAsync> // id: %6
  br bb3                                          // id: %7

bb2(%8 : $FooerAsync):                            // Preds: bb0
  %9 = unchecked_enum_data %4 : $Optional<FooerAsync>, #Optional.some!enumelt // users: %11, %12
  end_access %3 : $*@sil_weak Optional<FooerAsync> // id: %10
  %11 = class_method %9 : $FooerAsync, #FooerAsync.foo1 : (FooerAsync) -> () -> (), $@convention(method) (@guaranteed FooerAsync) -> () // user: %12
  %12 = apply %11(%9) : $@convention(method) (@guaranteed FooerAsync) -> ()
  release_value %4 : $Optional<FooerAsync>        // id: %13
  br bb3                                          // id: %14

bb3:                                              // Preds: bb2 bb1
  %15 = begin_access [read] [dynamic] [no_nested_conflict] %1 : $*@sil_weak Optional<FooerAsync> // users: %22, %18, %16
  %16 = load_weak %15 : $*@sil_weak Optional<FooerAsync> // users: %25, %21, %17
  switch_enum %16 : $Optional<FooerAsync>, case #Optional.none!enumelt: bb4, case #Optional.some!enumelt: bb5 // id: %17

bb4:                                              // Preds: bb3
  end_access %15 : $*@sil_weak Optional<FooerAsync> // id: %18
  br bb6                                          // id: %19

bb5(%20 : $FooerAsync):                           // Preds: bb3
  %21 = unchecked_enum_data %16 : $Optional<FooerAsync>, #Optional.some!enumelt // users: %23, %24
  end_access %15 : $*@sil_weak Optional<FooerAsync> // id: %22
  %23 = class_method %21 : $FooerAsync, #FooerAsync.foo2 : (FooerAsync) -> () -> (), $@convention(method) (@guaranteed FooerAsync) -> () // user: %24
  %24 = apply %23(%21) : $@convention(method) (@guaranteed FooerAsync) -> ()
  release_value %16 : $Optional<FooerAsync>       // id: %25
  br bb6                                          // id: %26

bb6:                                              // Preds: bb5 bb4
  %27 = tuple ()                                  // user: %28
  return %27 : $()                                // id: %28
} // end sil function '$s4main10FooerAsyncC3fooScTyyts5NeverOGyFyycfU_'

// FooerAsync.foo1()
sil hidden @$s4main10FooerAsyncC4foo1yyF : $@convention(method) (@guaranteed FooerAsync) -> () {
[%0: read c*.v**, write c*.v**, copy c*.v**, destroy c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "self"                                      // users: %145, %144, %19, %1
bb0(%0 : $FooerAsync):
  debug_value %0 : $FooerAsync, let, name "self", argno 1, implicit // id: %1
  %2 = integer_literal $Builtin.Word, 2           // user: %5
  %3 = integer_literal $Builtin.Int64, 2          // user: %4
  %4 = struct $Int (%3 : $Builtin.Int64)          // user: %10
  %5 = alloc_ref [tail_elems $Any * %2 : $Builtin.Word] $_ContiguousArrayStorage<Any> // user: %6
  %6 = upcast %5 : $_ContiguousArrayStorage<Any> to $__ContiguousArrayStorageBase // users: %122, %15, %12, %7
  %7 = struct $_ContiguousArrayBuffer<Any> (%6 : $__ContiguousArrayStorageBase) // user: %14
  %8 = integer_literal $Builtin.Int64, 4          // user: %9
  %9 = struct $UInt (%8 : $Builtin.Int64)         // user: %10
  %10 = struct $_SwiftArrayBodyStorage (%4 : $Int, %9 : $UInt) // user: %11
  %11 = struct $_ArrayBody (%10 : $_SwiftArrayBodyStorage) // user: %13
  %12 = ref_element_addr %6 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %13
  store %11 to %12 : $*_ArrayBody                 // id: %13
  %14 = struct $Array<Any> (%7 : $_ContiguousArrayBuffer<Any>) // user: %17
  %15 = ref_tail_addr %6 : $__ContiguousArrayStorageBase, $Any // user: %16
  %16 = address_to_pointer %15 : $*Any to $Builtin.RawPointer // user: %17
  %17 = mark_dependence %16 : $Builtin.RawPointer on %14 : $Array<Any> // user: %18
  %18 = pointer_to_address %17 : $Builtin.RawPointer to [strict] $*Any // users: %78, %20
  %19 = value_metatype $@thick FooerAsync.Type, %0 : $FooerAsync // user: %21
  %20 = init_existential_addr %18 : $*Any, $FooerAsync.Type // user: %21
  store %19 to %20 : $*@thick FooerAsync.Type     // id: %21
  %22 = integer_literal $Builtin.Int8, 2          // users: %117, %109, %64, %72, %41, %28
  %23 = integer_literal $Builtin.Int32, 0         // users: %118, %110, %65, %73
  %24 = integer_literal $Builtin.Word, 24         // user: %41
  %25 = string_literal utf8 ""                    // user: %27
  %26 = integer_literal $Builtin.Word, 0          // user: %28
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %28
  %28 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %22 : $Builtin.Int8) // users: %120, %112, %67, %75
  %29 = integer_literal $Builtin.Int1, -1         // users: %98, %47
  %30 = integer_literal $Builtin.Int64, 45252604817254 // user: %31
  %31 = struct $UInt64 (%30 : $Builtin.Int64)     // users: %51, %34
  %32 = integer_literal $Builtin.Int64, -1873497444986126336 // users: %33, %46, %38
  %33 = struct $UInt64 (%32 : $Builtin.Int64)     // user: %34
  %34 = tuple (%31 : $UInt64, %33 : $UInt64)      // user: %35
  %35 = struct $_SmallString (%34 : $(UInt64, UInt64)) // user: %37
  // function_ref _SmallString._invariantCheck()
  %36 = function_ref @$ss12_SmallStringV15_invariantCheckyyF : $@convention(method) (_SmallString) -> () // users: %133, %93, %37
  %37 = apply %36(%35) : $@convention(method) (_SmallString) -> ()
  %38 = value_to_bridge_object %32 : $Builtin.Int64 // users: %51, %44
  %39 = string_literal utf8 "Swift/StringObject.swift" // user: %40
  %40 = builtin "ptrtoint_Word"(%39 : $Builtin.RawPointer) : $Builtin.Word // user: %41
  %41 = struct $StaticString (%40 : $Builtin.Word, %24 : $Builtin.Word, %22 : $Builtin.Int8) // users: %120, %112, %67, %75
  %42 = integer_literal $Builtin.Int64, 245       // user: %43
  %43 = struct $UInt (%42 : $Builtin.Int64)       // users: %112, %67
  %44 = unchecked_trivial_bit_cast %38 : $Builtin.BridgeObject to $UInt64 // user: %45
  %45 = struct_extract %44 : $UInt64, #UInt64._value // users: %57, %46
  %46 = builtin "cmp_eq_Int64"(%45 : $Builtin.Int64, %32 : $Builtin.Int64) : $Builtin.Int1 // user: %47
  %47 = builtin "int_expect_Int1"(%46 : $Builtin.Int1, %29 : $Builtin.Int1) : $Builtin.Int1 // user: %48
  cond_br %47, bb1, bb2                           // id: %48

bb1:                                              // Preds: bb0
  %49 = integer_literal $Builtin.Int1, 0          // users: %104, %59
  %50 = integer_literal $Builtin.Int64, 0         // users: %103, %58
  %51 = struct $_StringObject (%31 : $UInt64, %38 : $Builtin.BridgeObject) // users: %79, %53
  // function_ref _StringObject._invariantCheck()
  %52 = function_ref @$ss13_StringObjectV15_invariantCheckyyF : $@convention(method) (@guaranteed _StringObject) -> () // users: %135, %101, %53
  %53 = apply %52(%51) : $@convention(method) (@guaranteed _StringObject) -> ()
  %54 = integer_literal $Builtin.Int64, 612       // user: %55
  %55 = struct $UInt (%54 : $Builtin.Int64)       // users: %120, %75
  %56 = integer_literal $Builtin.Int64, 2305843009213693952 // users: %102, %57
  %57 = builtin "and_Int64"(%45 : $Builtin.Int64, %56 : $Builtin.Int64) : $Builtin.Int64 // user: %58
  %58 = builtin "cmp_eq_Int64"(%57 : $Builtin.Int64, %50 : $Builtin.Int64) : $Builtin.Int1 // user: %59
  %59 = builtin "int_expect_Int1"(%58 : $Builtin.Int1, %49 : $Builtin.Int1) : $Builtin.Int1 // user: %60
  cond_br %59, bb3, bb4                           // id: %60

bb2:                                              // Preds: bb0
  %61 = string_literal utf8 "Fatal error"         // user: %63
  %62 = integer_literal $Builtin.Word, 11         // user: %64
  %63 = builtin "ptrtoint_Word"(%61 : $Builtin.RawPointer) : $Builtin.Word // user: %64
  %64 = struct $StaticString (%63 : $Builtin.Word, %62 : $Builtin.Word, %22 : $Builtin.Int8) // user: %67
  %65 = struct $UInt32 (%23 : $Builtin.Int32)     // user: %67
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %66 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %67
  %67 = apply %66(%64, %28, %41, %43, %65) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %68

bb3:                                              // Preds: bb1
  %69 = string_literal utf8 "Fatal error"         // user: %71
  %70 = integer_literal $Builtin.Word, 11         // user: %72
  %71 = builtin "ptrtoint_Word"(%69 : $Builtin.RawPointer) : $Builtin.Word // user: %72
  %72 = struct $StaticString (%71 : $Builtin.Word, %70 : $Builtin.Word, %22 : $Builtin.Int8) // user: %75
  %73 = struct $UInt32 (%23 : $Builtin.Int32)     // user: %75
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %74 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %75
  %75 = apply %74(%72, %28, %41, %55, %73) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %76

bb4:                                              // Preds: bb1
  %77 = integer_literal $Builtin.Word, 1          // user: %78
  %78 = index_addr %18 : $*Any, %77 : $Builtin.Word // user: %85
  %79 = struct $_StringGuts (%51 : $_StringObject) // users: %82, %81
  // function_ref _StringGuts._invariantCheck()
  %80 = function_ref @$ss11_StringGutsV15_invariantCheckyyF : $@convention(method) (@guaranteed _StringGuts) -> () // users: %137, %126, %81
  %81 = apply %80(%79) : $@convention(method) (@guaranteed _StringGuts) -> ()
  %82 = struct $String (%79 : $_StringGuts)       // users: %86, %84
  // function_ref String._invariantCheck()
  %83 = function_ref @$sSS15_invariantCheckyyF : $@convention(method) (@guaranteed String) -> () // users: %139, %128, %84
  %84 = apply %83(%82) : $@convention(method) (@guaranteed String) -> ()
  %85 = init_existential_addr %78 : $*Any, $String // user: %86
  store %82 to %85 : $*String                     // id: %86
  %87 = integer_literal $Builtin.Int64, 32        // user: %88
  %88 = struct $UInt64 (%87 : $Builtin.Int64)     // users: %100, %91
  %89 = integer_literal $Builtin.Int64, -2233785415175766016 // users: %90, %97, %94
  %90 = struct $UInt64 (%89 : $Builtin.Int64)     // users: %131, %91
  %91 = tuple (%88 : $UInt64, %90 : $UInt64)      // user: %92
  %92 = struct $_SmallString (%91 : $(UInt64, UInt64)) // user: %93
  %93 = apply %36(%92) : $@convention(method) (_SmallString) -> ()
  %94 = value_to_bridge_object %89 : $Builtin.Int64 // users: %134, %100, %95
  %95 = unchecked_trivial_bit_cast %94 : $Builtin.BridgeObject to $UInt64 // user: %96
  %96 = struct_extract %95 : $UInt64, #UInt64._value // users: %102, %97
  %97 = builtin "cmp_eq_Int64"(%96 : $Builtin.Int64, %89 : $Builtin.Int64) : $Builtin.Int1 // user: %98
  %98 = builtin "int_expect_Int1"(%97 : $Builtin.Int1, %29 : $Builtin.Int1) : $Builtin.Int1 // user: %99
  cond_br %98, bb5, bb6                           // id: %99

bb5:                                              // Preds: bb4
  %100 = struct $_StringObject (%88 : $UInt64, %94 : $Builtin.BridgeObject) // users: %125, %101
  %101 = apply %52(%100) : $@convention(method) (@guaranteed _StringObject) -> ()
  %102 = builtin "and_Int64"(%96 : $Builtin.Int64, %56 : $Builtin.Int64) : $Builtin.Int64 // user: %103
  %103 = builtin "cmp_eq_Int64"(%102 : $Builtin.Int64, %50 : $Builtin.Int64) : $Builtin.Int1 // user: %104
  %104 = builtin "int_expect_Int1"(%103 : $Builtin.Int1, %49 : $Builtin.Int1) : $Builtin.Int1 // user: %105
  cond_br %104, bb7, bb8                          // id: %105

bb6:                                              // Preds: bb4
  %106 = string_literal utf8 "Fatal error"        // user: %108
  %107 = integer_literal $Builtin.Word, 11        // user: %109
  %108 = builtin "ptrtoint_Word"(%106 : $Builtin.RawPointer) : $Builtin.Word // user: %109
  %109 = struct $StaticString (%108 : $Builtin.Word, %107 : $Builtin.Word, %22 : $Builtin.Int8) // user: %112
  %110 = struct $UInt32 (%23 : $Builtin.Int32)    // user: %112
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %111 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %112
  %112 = apply %111(%109, %28, %41, %43, %110) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %113

bb7:                                              // Preds: bb5
  %114 = string_literal utf8 "Fatal error"        // user: %116
  %115 = integer_literal $Builtin.Word, 11        // user: %117
  %116 = builtin "ptrtoint_Word"(%114 : $Builtin.RawPointer) : $Builtin.Word // user: %117
  %117 = struct $StaticString (%116 : $Builtin.Word, %115 : $Builtin.Word, %22 : $Builtin.Int8) // user: %120
  %118 = struct $UInt32 (%23 : $Builtin.Int32)    // user: %120
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %119 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %120
  %120 = apply %119(%117, %28, %41, %55, %118) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %121

bb8:                                              // Preds: bb5
  %122 = end_cow_mutation %6 : $__ContiguousArrayStorageBase // users: %142, %123
  %123 = struct $_ContiguousArrayBuffer<Any> (%122 : $__ContiguousArrayStorageBase) // user: %124
  %124 = struct $Array<Any> (%123 : $_ContiguousArrayBuffer<Any>) // user: %141
  %125 = struct $_StringGuts (%100 : $_StringObject) // users: %127, %126
  %126 = apply %80(%125) : $@convention(method) (@guaranteed _StringGuts) -> ()
  %127 = struct $String (%125 : $_StringGuts)     // users: %141, %128
  %128 = apply %83(%127) : $@convention(method) (@guaranteed String) -> ()
  %129 = integer_literal $Builtin.Int64, 10       // user: %130
  %130 = struct $UInt64 (%129 : $Builtin.Int64)   // users: %134, %131
  %131 = tuple (%130 : $UInt64, %90 : $UInt64)    // user: %132
  %132 = struct $_SmallString (%131 : $(UInt64, UInt64)) // user: %133
  %133 = apply %36(%132) : $@convention(method) (_SmallString) -> ()
  %134 = struct $_StringObject (%130 : $UInt64, %94 : $Builtin.BridgeObject) // users: %136, %135
  %135 = apply %52(%134) : $@convention(method) (@guaranteed _StringObject) -> ()
  %136 = struct $_StringGuts (%134 : $_StringObject) // users: %138, %137
  %137 = apply %80(%136) : $@convention(method) (@guaranteed _StringGuts) -> ()
  %138 = struct $String (%136 : $_StringGuts)     // users: %141, %139
  %139 = apply %83(%138) : $@convention(method) (@guaranteed String) -> ()
  // function_ref print(_:separator:terminator:)
  %140 = function_ref @$ss5print_9separator10terminatoryypd_S2StF : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> () // user: %141
  %141 = apply %140(%124, %127, %138) : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()
  strong_release %122 : $__ContiguousArrayStorageBase // id: %142
  %143 = enum $Optional<FooerAsync>, #Optional.none!enumelt // user: %145
  %144 = class_method %0 : $FooerAsync, #FooerAsync.strongSelf!setter : (FooerAsync) -> (FooerAsync?) -> (), $@convention(method) (@owned Optional<FooerAsync>, @guaranteed FooerAsync) -> () // user: %145
  %145 = apply %144(%143, %0) : $@convention(method) (@owned Optional<FooerAsync>, @guaranteed FooerAsync) -> ()
  %146 = tuple ()                                 // user: %147
  return %146 : $()                               // id: %147
} // end sil function '$s4main10FooerAsyncC4foo1yyF'

// print(_:separator:terminator:)
sil @$ss5print_9separator10terminatoryypd_S2StF : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()

// FooerAsync.foo2()
sil hidden @$s4main10FooerAsyncC4foo2yyF : $@convention(method) (@guaranteed FooerAsync) -> () {
[%0: noescape **, read c*.v**, write c*.v**, copy c*.v**, destroy c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "self"                                      // users: %19, %1
bb0(%0 : $FooerAsync):
  debug_value %0 : $FooerAsync, let, name "self", argno 1, implicit // id: %1
  %2 = integer_literal $Builtin.Word, 2           // user: %5
  %3 = integer_literal $Builtin.Int64, 2          // user: %4
  %4 = struct $Int (%3 : $Builtin.Int64)          // user: %10
  %5 = alloc_ref [tail_elems $Any * %2 : $Builtin.Word] $_ContiguousArrayStorage<Any> // user: %6
  %6 = upcast %5 : $_ContiguousArrayStorage<Any> to $__ContiguousArrayStorageBase // users: %122, %15, %12, %7
  %7 = struct $_ContiguousArrayBuffer<Any> (%6 : $__ContiguousArrayStorageBase) // user: %14
  %8 = integer_literal $Builtin.Int64, 4          // user: %9
  %9 = struct $UInt (%8 : $Builtin.Int64)         // user: %10
  %10 = struct $_SwiftArrayBodyStorage (%4 : $Int, %9 : $UInt) // user: %11
  %11 = struct $_ArrayBody (%10 : $_SwiftArrayBodyStorage) // user: %13
  %12 = ref_element_addr %6 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %13
  store %11 to %12 : $*_ArrayBody                 // id: %13
  %14 = struct $Array<Any> (%7 : $_ContiguousArrayBuffer<Any>) // user: %17
  %15 = ref_tail_addr %6 : $__ContiguousArrayStorageBase, $Any // user: %16
  %16 = address_to_pointer %15 : $*Any to $Builtin.RawPointer // user: %17
  %17 = mark_dependence %16 : $Builtin.RawPointer on %14 : $Array<Any> // user: %18
  %18 = pointer_to_address %17 : $Builtin.RawPointer to [strict] $*Any // users: %78, %20
  %19 = value_metatype $@thick FooerAsync.Type, %0 : $FooerAsync // user: %21
  %20 = init_existential_addr %18 : $*Any, $FooerAsync.Type // user: %21
  store %19 to %20 : $*@thick FooerAsync.Type     // id: %21
  %22 = integer_literal $Builtin.Int8, 2          // users: %117, %109, %64, %72, %41, %28
  %23 = integer_literal $Builtin.Int32, 0         // users: %118, %110, %65, %73
  %24 = integer_literal $Builtin.Word, 24         // user: %41
  %25 = string_literal utf8 ""                    // user: %27
  %26 = integer_literal $Builtin.Word, 0          // user: %28
  %27 = builtin "ptrtoint_Word"(%25 : $Builtin.RawPointer) : $Builtin.Word // user: %28
  %28 = struct $StaticString (%27 : $Builtin.Word, %26 : $Builtin.Word, %22 : $Builtin.Int8) // users: %120, %112, %67, %75
  %29 = integer_literal $Builtin.Int1, -1         // users: %98, %47
  %30 = integer_literal $Builtin.Int64, 45252621594470 // user: %31
  %31 = struct $UInt64 (%30 : $Builtin.Int64)     // users: %51, %34
  %32 = integer_literal $Builtin.Int64, -1873497444986126336 // users: %33, %46, %38
  %33 = struct $UInt64 (%32 : $Builtin.Int64)     // user: %34
  %34 = tuple (%31 : $UInt64, %33 : $UInt64)      // user: %35
  %35 = struct $_SmallString (%34 : $(UInt64, UInt64)) // user: %37
  // function_ref _SmallString._invariantCheck()
  %36 = function_ref @$ss12_SmallStringV15_invariantCheckyyF : $@convention(method) (_SmallString) -> () // users: %133, %93, %37
  %37 = apply %36(%35) : $@convention(method) (_SmallString) -> ()
  %38 = value_to_bridge_object %32 : $Builtin.Int64 // users: %51, %44
  %39 = string_literal utf8 "Swift/StringObject.swift" // user: %40
  %40 = builtin "ptrtoint_Word"(%39 : $Builtin.RawPointer) : $Builtin.Word // user: %41
  %41 = struct $StaticString (%40 : $Builtin.Word, %24 : $Builtin.Word, %22 : $Builtin.Int8) // users: %120, %112, %67, %75
  %42 = integer_literal $Builtin.Int64, 245       // user: %43
  %43 = struct $UInt (%42 : $Builtin.Int64)       // users: %112, %67
  %44 = unchecked_trivial_bit_cast %38 : $Builtin.BridgeObject to $UInt64 // user: %45
  %45 = struct_extract %44 : $UInt64, #UInt64._value // users: %57, %46
  %46 = builtin "cmp_eq_Int64"(%45 : $Builtin.Int64, %32 : $Builtin.Int64) : $Builtin.Int1 // user: %47
  %47 = builtin "int_expect_Int1"(%46 : $Builtin.Int1, %29 : $Builtin.Int1) : $Builtin.Int1 // user: %48
  cond_br %47, bb1, bb2                           // id: %48

bb1:                                              // Preds: bb0
  %49 = integer_literal $Builtin.Int1, 0          // users: %104, %59
  %50 = integer_literal $Builtin.Int64, 0         // users: %103, %58
  %51 = struct $_StringObject (%31 : $UInt64, %38 : $Builtin.BridgeObject) // users: %79, %53
  // function_ref _StringObject._invariantCheck()
  %52 = function_ref @$ss13_StringObjectV15_invariantCheckyyF : $@convention(method) (@guaranteed _StringObject) -> () // users: %135, %101, %53
  %53 = apply %52(%51) : $@convention(method) (@guaranteed _StringObject) -> ()
  %54 = integer_literal $Builtin.Int64, 612       // user: %55
  %55 = struct $UInt (%54 : $Builtin.Int64)       // users: %120, %75
  %56 = integer_literal $Builtin.Int64, 2305843009213693952 // users: %102, %57
  %57 = builtin "and_Int64"(%45 : $Builtin.Int64, %56 : $Builtin.Int64) : $Builtin.Int64 // user: %58
  %58 = builtin "cmp_eq_Int64"(%57 : $Builtin.Int64, %50 : $Builtin.Int64) : $Builtin.Int1 // user: %59
  %59 = builtin "int_expect_Int1"(%58 : $Builtin.Int1, %49 : $Builtin.Int1) : $Builtin.Int1 // user: %60
  cond_br %59, bb3, bb4                           // id: %60

bb2:                                              // Preds: bb0
  %61 = string_literal utf8 "Fatal error"         // user: %63
  %62 = integer_literal $Builtin.Word, 11         // user: %64
  %63 = builtin "ptrtoint_Word"(%61 : $Builtin.RawPointer) : $Builtin.Word // user: %64
  %64 = struct $StaticString (%63 : $Builtin.Word, %62 : $Builtin.Word, %22 : $Builtin.Int8) // user: %67
  %65 = struct $UInt32 (%23 : $Builtin.Int32)     // user: %67
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %66 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %67
  %67 = apply %66(%64, %28, %41, %43, %65) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %68

bb3:                                              // Preds: bb1
  %69 = string_literal utf8 "Fatal error"         // user: %71
  %70 = integer_literal $Builtin.Word, 11         // user: %72
  %71 = builtin "ptrtoint_Word"(%69 : $Builtin.RawPointer) : $Builtin.Word // user: %72
  %72 = struct $StaticString (%71 : $Builtin.Word, %70 : $Builtin.Word, %22 : $Builtin.Int8) // user: %75
  %73 = struct $UInt32 (%23 : $Builtin.Int32)     // user: %75
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %74 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %75
  %75 = apply %74(%72, %28, %41, %55, %73) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %76

bb4:                                              // Preds: bb1
  %77 = integer_literal $Builtin.Word, 1          // user: %78
  %78 = index_addr %18 : $*Any, %77 : $Builtin.Word // user: %85
  %79 = struct $_StringGuts (%51 : $_StringObject) // users: %82, %81
  // function_ref _StringGuts._invariantCheck()
  %80 = function_ref @$ss11_StringGutsV15_invariantCheckyyF : $@convention(method) (@guaranteed _StringGuts) -> () // users: %137, %126, %81
  %81 = apply %80(%79) : $@convention(method) (@guaranteed _StringGuts) -> ()
  %82 = struct $String (%79 : $_StringGuts)       // users: %86, %84
  // function_ref String._invariantCheck()
  %83 = function_ref @$sSS15_invariantCheckyyF : $@convention(method) (@guaranteed String) -> () // users: %139, %128, %84
  %84 = apply %83(%82) : $@convention(method) (@guaranteed String) -> ()
  %85 = init_existential_addr %78 : $*Any, $String // user: %86
  store %82 to %85 : $*String                     // id: %86
  %87 = integer_literal $Builtin.Int64, 32        // user: %88
  %88 = struct $UInt64 (%87 : $Builtin.Int64)     // users: %100, %91
  %89 = integer_literal $Builtin.Int64, -2233785415175766016 // users: %90, %97, %94
  %90 = struct $UInt64 (%89 : $Builtin.Int64)     // users: %131, %91
  %91 = tuple (%88 : $UInt64, %90 : $UInt64)      // user: %92
  %92 = struct $_SmallString (%91 : $(UInt64, UInt64)) // user: %93
  %93 = apply %36(%92) : $@convention(method) (_SmallString) -> ()
  %94 = value_to_bridge_object %89 : $Builtin.Int64 // users: %134, %100, %95
  %95 = unchecked_trivial_bit_cast %94 : $Builtin.BridgeObject to $UInt64 // user: %96
  %96 = struct_extract %95 : $UInt64, #UInt64._value // users: %102, %97
  %97 = builtin "cmp_eq_Int64"(%96 : $Builtin.Int64, %89 : $Builtin.Int64) : $Builtin.Int1 // user: %98
  %98 = builtin "int_expect_Int1"(%97 : $Builtin.Int1, %29 : $Builtin.Int1) : $Builtin.Int1 // user: %99
  cond_br %98, bb5, bb6                           // id: %99

bb5:                                              // Preds: bb4
  %100 = struct $_StringObject (%88 : $UInt64, %94 : $Builtin.BridgeObject) // users: %125, %101
  %101 = apply %52(%100) : $@convention(method) (@guaranteed _StringObject) -> ()
  %102 = builtin "and_Int64"(%96 : $Builtin.Int64, %56 : $Builtin.Int64) : $Builtin.Int64 // user: %103
  %103 = builtin "cmp_eq_Int64"(%102 : $Builtin.Int64, %50 : $Builtin.Int64) : $Builtin.Int1 // user: %104
  %104 = builtin "int_expect_Int1"(%103 : $Builtin.Int1, %49 : $Builtin.Int1) : $Builtin.Int1 // user: %105
  cond_br %104, bb7, bb8                          // id: %105

bb6:                                              // Preds: bb4
  %106 = string_literal utf8 "Fatal error"        // user: %108
  %107 = integer_literal $Builtin.Word, 11        // user: %109
  %108 = builtin "ptrtoint_Word"(%106 : $Builtin.RawPointer) : $Builtin.Word // user: %109
  %109 = struct $StaticString (%108 : $Builtin.Word, %107 : $Builtin.Word, %22 : $Builtin.Int8) // user: %112
  %110 = struct $UInt32 (%23 : $Builtin.Int32)    // user: %112
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %111 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %112
  %112 = apply %111(%109, %28, %41, %43, %110) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %113

bb7:                                              // Preds: bb5
  %114 = string_literal utf8 "Fatal error"        // user: %116
  %115 = integer_literal $Builtin.Word, 11        // user: %117
  %116 = builtin "ptrtoint_Word"(%114 : $Builtin.RawPointer) : $Builtin.Word // user: %117
  %117 = struct $StaticString (%116 : $Builtin.Word, %115 : $Builtin.Word, %22 : $Builtin.Int8) // user: %120
  %118 = struct $UInt32 (%23 : $Builtin.Int32)    // user: %120
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %119 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %120
  %120 = apply %119(%117, %28, %41, %55, %118) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %121

bb8:                                              // Preds: bb5
  %122 = end_cow_mutation %6 : $__ContiguousArrayStorageBase // users: %142, %123
  %123 = struct $_ContiguousArrayBuffer<Any> (%122 : $__ContiguousArrayStorageBase) // user: %124
  %124 = struct $Array<Any> (%123 : $_ContiguousArrayBuffer<Any>) // user: %141
  %125 = struct $_StringGuts (%100 : $_StringObject) // users: %127, %126
  %126 = apply %80(%125) : $@convention(method) (@guaranteed _StringGuts) -> ()
  %127 = struct $String (%125 : $_StringGuts)     // users: %141, %128
  %128 = apply %83(%127) : $@convention(method) (@guaranteed String) -> ()
  %129 = integer_literal $Builtin.Int64, 10       // user: %130
  %130 = struct $UInt64 (%129 : $Builtin.Int64)   // users: %134, %131
  %131 = tuple (%130 : $UInt64, %90 : $UInt64)    // user: %132
  %132 = struct $_SmallString (%131 : $(UInt64, UInt64)) // user: %133
  %133 = apply %36(%132) : $@convention(method) (_SmallString) -> ()
  %134 = struct $_StringObject (%130 : $UInt64, %94 : $Builtin.BridgeObject) // users: %136, %135
  %135 = apply %52(%134) : $@convention(method) (@guaranteed _StringObject) -> ()
  %136 = struct $_StringGuts (%134 : $_StringObject) // users: %138, %137
  %137 = apply %80(%136) : $@convention(method) (@guaranteed _StringGuts) -> ()
  %138 = struct $String (%136 : $_StringGuts)     // users: %141, %139
  %139 = apply %83(%138) : $@convention(method) (@guaranteed String) -> ()
  // function_ref print(_:separator:terminator:)
  %140 = function_ref @$ss5print_9separator10terminatoryypd_S2StF : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> () // user: %141
  %141 = apply %140(%124, %127, %138) : $@convention(thin) (@guaranteed Array<Any>, @guaranteed String, @guaranteed String) -> ()
  strong_release %122 : $__ContiguousArrayStorageBase // id: %142
  %143 = tuple ()                                 // user: %144
  return %143 : $()                               // id: %144
} // end sil function '$s4main10FooerAsyncC4foo2yyF'

// FooerAsync.deinit
sil hidden @$s4main10FooerAsyncCfd : $@convention(method) (@guaranteed FooerAsync) -> @owned Builtin.NativeObject {
[%0: escape => %r, read c0.v**, write c0.v**, copy c*.v**, destroy c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "self"                                      // users: %27, %3, %1
bb0(%0 : $FooerAsync):
  debug_value %0 : $FooerAsync, let, name "self", argno 1, implicit // id: %1
  %2 = enum $Optional<FooerAsync>, #Optional.none!enumelt // user: %6
  %3 = ref_element_addr %0 : $FooerAsync, #FooerAsync.strongSelf // users: %6, %5
  %4 = alloc_stack $Optional<FooerAsync>          // users: %24, %18, %14, %9, %7, %26, %12
  %5 = load %3 : $*Optional<FooerAsync>           // user: %7
  store %2 to %3 : $*Optional<FooerAsync>         // id: %6
  store %5 to %4 : $*Optional<FooerAsync>         // id: %7
  br bb1                                          // id: %8

bb1:                                              // Preds: bb3 bb0
  %9 = load %4 : $*Optional<FooerAsync>           // user: %10
  switch_enum %9 : $Optional<FooerAsync>, case #Optional.some!enumelt: bb2, case #Optional.none!enumelt: bb5 // id: %10

bb2(%11 : $FooerAsync):                           // Preds: bb1
  %12 = is_unique %4 : $*Optional<FooerAsync>     // user: %13
  cond_br %12, bb3, bb4                           // id: %13

bb3:                                              // Preds: bb2
  %14 = load %4 : $*Optional<FooerAsync>          // users: %20, %15
  %15 = unchecked_enum_data %14 : $Optional<FooerAsync>, #Optional.some!enumelt // user: %16
  %16 = ref_element_addr %15 : $FooerAsync, #FooerAsync.strongSelf // user: %17
  %17 = load %16 : $*Optional<FooerAsync>         // users: %19, %18
  store %17 to %4 : $*Optional<FooerAsync>        // id: %18
  retain_value %17 : $Optional<FooerAsync>        // id: %19
  release_value %14 : $Optional<FooerAsync>       // id: %20
  br bb1                                          // id: %21

bb4:                                              // Preds: bb2
  br bb6                                          // id: %22

bb5:                                              // Preds: bb1
  br bb6                                          // id: %23

bb6:                                              // Preds: bb5 bb4
  %24 = load %4 : $*Optional<FooerAsync>          // user: %25
  release_value %24 : $Optional<FooerAsync>       // id: %25
  dealloc_stack %4 : $*Optional<FooerAsync>       // id: %26
  %27 = unchecked_ref_cast %0 : $FooerAsync to $Builtin.NativeObject // user: %28
  return %27 : $Builtin.NativeObject              // id: %28
} // end sil function '$s4main10FooerAsyncCfd'

// FooerAsync.__deallocating_deinit
sil hidden @$s4main10FooerAsyncCfD : $@convention(method) (@owned FooerAsync) -> () {
[%0: noescape, read c0.v**, write c0.v**, copy c*.v**, destroy c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "self"                                      // users: %3, %1
bb0(%0 : $FooerAsync):
  debug_value %0 : $FooerAsync, let, name "self", argno 1, implicit // id: %1
  // function_ref FooerAsync.deinit
  %2 = function_ref @$s4main10FooerAsyncCfd : $@convention(method) (@guaranteed FooerAsync) -> @owned Builtin.NativeObject // user: %3
  %3 = apply %2(%0) : $@convention(method) (@guaranteed FooerAsync) -> @owned Builtin.NativeObject // user: %4
  %4 = unchecked_ref_cast %3 : $Builtin.NativeObject to $FooerAsync // user: %5
  dealloc_ref %4 : $FooerAsync                    // id: %5
  %6 = tuple ()                                   // user: %7
  return %6 : $()                                 // id: %7
} // end sil function '$s4main10FooerAsyncCfD'

// FooerAsync.__allocating_init()
sil hidden [exact_self_class] @$s4main10FooerAsyncCACycfC : $@convention(method) (@thick FooerAsync.Type) -> @owned FooerAsync {
[global: allocate]
// %0 "$metatype"
bb0(%0 : $@thick FooerAsync.Type):
  %1 = alloc_ref $FooerAsync                      // users: %3, %2
  debug_value %1 : $FooerAsync, let, name "self", argno 1, implicit // id: %2
  %3 = end_init_let_ref %1 : $FooerAsync          // users: %7, %4
  %4 = ref_element_addr %3 : $FooerAsync, #FooerAsync.strongSelf // user: %6
  %5 = enum $Optional<FooerAsync>, #Optional.none!enumelt // user: %6
  store %5 to %4 : $*Optional<FooerAsync>         // id: %6
  return %3 : $FooerAsync                         // id: %7
} // end sil function '$s4main10FooerAsyncCACycfC'

// FooerAsync.init()
sil hidden @$s4main10FooerAsyncCACycfc : $@convention(method) (@owned FooerAsync) -> @owned FooerAsync {
[%0: escape => %r, escape c*.v** -> %r.c*.v**, write c0.v**]
[global: ]
// %0 "self"                                      // users: %2, %1
bb0(%0 : $FooerAsync):
  debug_value %0 : $FooerAsync, let, name "self", argno 1, implicit // id: %1
  %2 = end_init_let_ref %0 : $FooerAsync          // users: %3, %6
  %3 = ref_element_addr %2 : $FooerAsync, #FooerAsync.strongSelf // user: %5
  %4 = enum $Optional<FooerAsync>, #Optional.none!enumelt // user: %5
  store %4 to %3 : $*Optional<FooerAsync>         // id: %5
  return %2 : $FooerAsync                         // id: %6
} // end sil function '$s4main10FooerAsyncCACycfc'

// test_repeatedLoadWeakSelf()
sil hidden @$s4main25test_repeatedLoadWeakSelfScTyyts5NeverOGyF : $@convention(thin) () -> @owned Task<(), Never> {
[global: read,write,copy,destroy,allocate,deinit_barrier]
bb0:
  %0 = alloc_ref $FooerAsync                      // users: %2, %1
  debug_value %0 : $FooerAsync, let, name "self", argno 1, implicit // id: %1
  %2 = end_init_let_ref %0 : $FooerAsync          // users: %24, %17, %12, %9, %6, %3
  %3 = ref_element_addr %2 : $FooerAsync, #FooerAsync.strongSelf // users: %13, %5
  %4 = enum $Optional<FooerAsync>, #Optional.none!enumelt // user: %5
  store %4 to %3 : $*Optional<FooerAsync>         // id: %5
  debug_value %2 : $FooerAsync, let, name "self", argno 1, implicit // id: %6
  %7 = alloc_box ${ var @sil_weak Optional<FooerAsync> }, var, name "weakSelf" // users: %26, %22, %20, %8
  %8 = project_box %7 : ${ var @sil_weak Optional<FooerAsync> }, 0 // user: %10
  %9 = enum $Optional<FooerAsync>, #Optional.some!enumelt, %2 : $FooerAsync // users: %15, %11, %10
  store_weak %9 to [init] %8 : $*@sil_weak Optional<FooerAsync> // id: %10
  debug_value %9 : $Optional<FooerAsync>, let, name "value", argno 1, implicit // id: %11
  debug_value %2 : $FooerAsync, let, name "self", argno 2, implicit // id: %12
  %13 = begin_access [modify] [dynamic] [no_nested_conflict] %3 : $*Optional<FooerAsync> // users: %16, %15, %14
  %14 = load %13 : $*Optional<FooerAsync>         // user: %18
  store %9 to %13 : $*Optional<FooerAsync>        // id: %15
  end_access %13 : $*Optional<FooerAsync>         // id: %16
  strong_retain %2 : $FooerAsync                  // id: %17
  release_value %14 : $Optional<FooerAsync>       // id: %18
  // function_ref closure #1 in FooerAsync.foo()
  %19 = function_ref @$s4main10FooerAsyncC3fooScTyyts5NeverOGyFyycfU_ : $@convention(thin) (@guaranteed { var @sil_weak Optional<FooerAsync> }) -> () // user: %20
  %20 = partial_apply [callee_guaranteed] %19(%7) : $@convention(thin) (@guaranteed { var @sil_weak Optional<FooerAsync> }) -> () // users: %25, %23
  // function_ref do_foo_async(_:)
  %21 = function_ref @$s4main12do_foo_asyncyScTyyts5NeverOGyycF : $@convention(thin) (@guaranteed @callee_guaranteed () -> ()) -> @owned Task<(), Never> // user: %23
  strong_retain %7 : ${ var @sil_weak Optional<FooerAsync> } // id: %22
  %23 = apply %21(%20) : $@convention(thin) (@guaranteed @callee_guaranteed () -> ()) -> @owned Task<(), Never> // user: %27
  strong_release %2 : $FooerAsync                 // id: %24
  strong_release %20 : $@callee_guaranteed () -> () // id: %25
  strong_release %7 : ${ var @sil_weak Optional<FooerAsync> } // id: %26
  return %23 : $Task<(), Never>                   // id: %27
} // end sil function '$s4main25test_repeatedLoadWeakSelfScTyyts5NeverOGyF'

// static Main.main()
sil hidden @$s4main4MainVAAyyYaFZ : $@convention(method) @async (@thin Main.Type) -> () {
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "self"                                      // user: %1
bb0(%0 : $@thin Main.Type):
  debug_value %0 : $@thin Main.Type, let, name "self", argno 1, implicit // id: %1
  %2 = metatype $@thick MainActor.Type            // user: %4
  // function_ref static MainActor.shared.getter
  %3 = function_ref @$sScM6sharedScMvgZ : $@convention(method) (@thick MainActor.Type) -> @owned MainActor // user: %4
  %4 = apply %3(%2) : $@convention(method) (@thick MainActor.Type) -> @owned MainActor // users: %40, %5, %39
  hop_to_executor %4 : $MainActor                 // id: %5
  // function_ref test_localVar_keepsObjectAliveBeyondCallToClassWithPointer()
  %6 = function_ref @$s4main58test_localVar_keepsObjectAliveBeyondCallToClassWithPointeryyF : $@convention(thin) () -> () // user: %7
  %7 = apply %6() : $@convention(thin) () -> ()
  %8 = alloc_ref $FooerAsync                      // users: %10, %9
  debug_value %8 : $FooerAsync, let, name "self", argno 1, implicit // id: %9
  %10 = end_init_let_ref %8 : $FooerAsync         // users: %32, %25, %20, %17, %14, %11
  %11 = ref_element_addr %10 : $FooerAsync, #FooerAsync.strongSelf // users: %21, %13
  %12 = enum $Optional<FooerAsync>, #Optional.none!enumelt // user: %13
  store %12 to %11 : $*Optional<FooerAsync>       // id: %13
  debug_value %10 : $FooerAsync, let, name "self", argno 1, implicit // id: %14
  %15 = alloc_box ${ var @sil_weak Optional<FooerAsync> }, var, name "weakSelf" // users: %34, %30, %28, %16
  %16 = project_box %15 : ${ var @sil_weak Optional<FooerAsync> }, 0 // user: %18
  %17 = enum $Optional<FooerAsync>, #Optional.some!enumelt, %10 : $FooerAsync // users: %23, %19, %18
  store_weak %17 to [init] %16 : $*@sil_weak Optional<FooerAsync> // id: %18
  debug_value %17 : $Optional<FooerAsync>, let, name "value", argno 1, implicit // id: %19
  debug_value %10 : $FooerAsync, let, name "self", argno 2, implicit // id: %20
  %21 = begin_access [modify] [dynamic] [no_nested_conflict] %11 : $*Optional<FooerAsync> // users: %24, %23, %22
  %22 = load %21 : $*Optional<FooerAsync>         // user: %26
  store %17 to %21 : $*Optional<FooerAsync>       // id: %23
  end_access %21 : $*Optional<FooerAsync>         // id: %24
  strong_retain %10 : $FooerAsync                 // id: %25
  release_value %22 : $Optional<FooerAsync>       // id: %26
  // function_ref closure #1 in FooerAsync.foo()
  %27 = function_ref @$s4main10FooerAsyncC3fooScTyyts5NeverOGyFyycfU_ : $@convention(thin) (@guaranteed { var @sil_weak Optional<FooerAsync> }) -> () // user: %28
  %28 = partial_apply [callee_guaranteed] %27(%15) : $@convention(thin) (@guaranteed { var @sil_weak Optional<FooerAsync> }) -> () // users: %33, %31
  // function_ref do_foo_async(_:)
  %29 = function_ref @$s4main12do_foo_asyncyScTyyts5NeverOGyycF : $@convention(thin) (@guaranteed @callee_guaranteed () -> ()) -> @owned Task<(), Never> // user: %31
  strong_retain %15 : ${ var @sil_weak Optional<FooerAsync> } // id: %30
  %31 = apply %29(%28) : $@convention(thin) (@guaranteed @callee_guaranteed () -> ()) -> @owned Task<(), Never> // users: %38, %37
  strong_release %10 : $FooerAsync                // id: %32
  strong_release %28 : $@callee_guaranteed () -> () // id: %33
  strong_release %15 : ${ var @sil_weak Optional<FooerAsync> } // id: %34
  %35 = alloc_stack $()                           // users: %41, %37
  // function_ref Task<>.value.getter
  %36 = function_ref @$sScTss5NeverORs_rlE5valuexvg : $@convention(method) @async <τ_0_0, τ_0_1 where τ_0_0 : Sendable, τ_0_1 == Never> (@guaranteed Task<τ_0_0, Never>) -> @out τ_0_0 // user: %37
  %37 = apply %36<(), Never>(%35, %31) : $@convention(method) @async <τ_0_0, τ_0_1 where τ_0_0 : Sendable, τ_0_1 == Never> (@guaranteed Task<τ_0_0, Never>) -> @out τ_0_0
  release_value %31 : $Task<(), Never>            // id: %38
  hop_to_executor %4 : $MainActor                 // id: %39
  strong_release %4 : $MainActor                  // id: %40
  dealloc_stack %35 : $*()                        // id: %41
  %42 = tuple ()                                  // user: %43
  return %42 : $()                                // id: %43
} // end sil function '$s4main4MainVAAyyYaFZ'

// static MainActor.shared.getter
sil @$sScM6sharedScMvgZ : $@convention(method) (@thick MainActor.Type) -> @owned MainActor

// Task<>.value.getter
sil @$sScTss5NeverORs_rlE5valuexvg : $@convention(method) @async <τ_0_0, τ_0_1 where τ_0_0 : Sendable, τ_0_1 == Never> (@guaranteed Task<τ_0_0, Never>) -> @out τ_0_0

// static Main.$main()
sil hidden [signature_optimized_thunk] [always_inline] @$s4main4MainV5$mainyyYaFZ : $@convention(method) @async (@thin Main.Type) -> () {
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "self"
bb0(%0 : $@thin Main.Type):
  // function_ref specialized static Main.$main()
  %1 = function_ref @$s4main4MainV5$mainyyYaFZTf4d_n : $@convention(thin) @async () -> () // user: %2
  %2 = apply %1() : $@convention(thin) @async () -> () // user: %3
  return %2 : $()                                 // id: %3
} // end sil function '$s4main4MainV5$mainyyYaFZ'

// Main.init()
sil hidden @$s4main4MainVACycfC : $@convention(method) (@thin Main.Type) -> Main {
[global: ]
// %0 "$metatype"
bb0(%0 : $@thin Main.Type):
  %1 = struct $Main ()                            // user: %2
  return %1 : $Main                               // id: %2
} // end sil function '$s4main4MainVACycfC'

// exit
// clang name: exit
sil [clang exit] @exit : $@convention(c) (Int32) -> Never

// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
[%1: noescape **]
[global: read,write,copy,destroy,allocate,deinit_barrier]
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  %2 = integer_literal $Builtin.Int64, 2048       // user: %3
  %3 = struct $Int (%2 : $Builtin.Int64)          // user: %9
  %4 = metatype $@thick ().Type                   // user: %5
  %5 = init_existential_metatype %4 : $@thick ().Type, $@thick any Any.Type // user: %9
  // function_ref specialized thunk for @escaping @convention(thin) @async () -> ()
  %6 = function_ref @$sIetH_yts5Error_pIegHrzo_TR10async_MainTf3npf_n : $@convention(thin) @async () -> (@out (), @error any Error) // user: %7
  %7 = thin_to_thick_function %6 : $@convention(thin) @async () -> (@out (), @error any Error) to $@async @callee_guaranteed () -> (@out (), @error any Error) // user: %8
  %8 = convert_function %7 : $@async @callee_guaranteed () -> (@out (), @error any Error) to $@async @callee_guaranteed @substituted <τ_0_0> () -> (@out τ_0_0, @error any Error) for <()> // user: %9
  %9 = builtin "createAsyncTask"<()>(%3 : $Int, %5 : $@thick any Any.Type, %8 : $@async @callee_guaranteed @substituted <τ_0_0> () -> (@out τ_0_0, @error any Error) for <()>) : $(Builtin.NativeObject, Builtin.RawPointer) // user: %10
  %10 = tuple_extract %9 : $(Builtin.NativeObject, Builtin.RawPointer), 0 // user: %12
  // function_ref swift_job_run
  %11 = function_ref @swift_job_run : $@convention(thin) (UnownedJob, UnownedSerialExecutor) -> () // user: %16
  %12 = builtin "convertTaskToJob"(%10 : $Builtin.NativeObject) : $Builtin.Job // user: %13
  %13 = struct $UnownedJob (%12 : $Builtin.Job)   // user: %16
  %14 = builtin "buildMainActorExecutorRef"() : $Builtin.Executor // user: %15
  %15 = struct $UnownedSerialExecutor (%14 : $Builtin.Executor) // user: %16
  %16 = apply %11(%13, %15) : $@convention(thin) (UnownedJob, UnownedSerialExecutor) -> ()
  // function_ref swift_task_asyncMainDrainQueue
  %17 = function_ref @swift_task_asyncMainDrainQueue : $@convention(thin) () -> Never // user: %18
  %18 = apply %17() : $@convention(thin) () -> Never
  unreachable                                     // id: %19
} // end sil function 'main'

// specialized thunk for @escaping @convention(thin) @async () -> ()
sil shared [transparent] [reabstraction_thunk] @$sIetH_yts5Error_pIegHrzo_TR10async_MainTf3npf_n : $@convention(thin) @async () -> (@out (), @error any Error) {
[global: read,write,copy,destroy,allocate,deinit_barrier]
bb0(%0 : $*()):
  // function_ref specialized static Main.$main()
  %1 = function_ref @$s4main4MainV5$mainyyYaFZTf4d_n : $@convention(thin) @async () -> () // user: %2
  %2 = apply %1() : $@convention(thin) @async () -> ()
  %3 = integer_literal $Builtin.Int32, 0          // user: %4
  %4 = struct $Int32 (%3 : $Builtin.Int32)        // user: %6
  // function_ref exit
  %5 = function_ref @exit : $@convention(c) (Int32) -> Never // user: %6
  %6 = apply %5(%4) : $@convention(c) (Int32) -> Never
  unreachable                                     // id: %7
} // end sil function '$sIetH_yts5Error_pIegHrzo_TR10async_MainTf3npf_n'

// swift_job_run
sil @swift_job_run : $@convention(thin) (UnownedJob, UnownedSerialExecutor) -> ()

// swift_task_asyncMainDrainQueue
sil @swift_task_asyncMainDrainQueue : $@convention(thin) () -> Never

// Array._endMutation()
sil shared [_semantics "array.end_mutation"] [_specialize exported: true, kind: full, where  @_noMetadata Element : _Class] @$sSa12_endMutationyyF : $@convention(method) <Element> (@inout Array<Element>) -> () {
[%0: noescape! **, read s0.s0.v**, write v**]
[global: ]
// %0                                             // users: %7, %1
bb0(%0 : $*Array<Element>):
  %1 = struct_element_addr %0 : $*Array<Element>, #Array._buffer // user: %2
  %2 = struct_element_addr %1 : $*_ContiguousArrayBuffer<Element>, #_ContiguousArrayBuffer._storage // user: %3
  %3 = load %2 : $*__ContiguousArrayStorageBase   // user: %4
  %4 = end_cow_mutation %3 : $__ContiguousArrayStorageBase // user: %5
  %5 = struct $_ContiguousArrayBuffer<Element> (%4 : $__ContiguousArrayStorageBase) // user: %6
  %6 = struct $Array<Element> (%5 : $_ContiguousArrayBuffer<Element>) // user: %7
  store %6 to %0 : $*Array<Element>               // id: %7
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9
} // end sil function '$sSa12_endMutationyyF'

// TaskPriority.rawValue.getter
sil @$sScP8rawValues5UInt8Vvg : $@convention(method) (@in_guaranteed TaskPriority) -> UInt8

// specialized thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out A)
sil shared [transparent] [reabstraction_thunk] @$sxIeghHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5 : $@convention(thin) @async (@guaranteed @Sendable @async @callee_guaranteed () -> @out ()) -> (@out (), @error any Error) {
[%0: read v**, write v**, copy v**, destroy v**]
[%1: noescape **, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // user: %2
// %1                                             // user: %2
bb0(%0 : $*(), %1 : $@Sendable @async @callee_guaranteed () -> @out ()):
  %2 = apply %1(%0) : $@Sendable @async @callee_guaranteed () -> @out ()
  %3 = tuple ()                                   // user: %4
  return %3 : $()                                 // id: %4
} // end sil function '$sxIeghHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5'

// _fatalErrorMessage(_:_:file:line:flags:)
sil [noinline] [_semantics "programtermination_point"] @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never

// Array._getCount()
sil public_external [_semantics "array.get_count"] @$sSa9_getCountSiyF : $@convention(method) <Element> (@guaranteed Array<Element>) -> Int {
[%0: noescape! **]
// %0                                             // user: %1
bb0(%0 : $Array<Element>):
  %1 = struct_extract %0 : $Array<Element>, #Array._buffer // user: %2
  %2 = struct_extract %1 : $_ContiguousArrayBuffer<Element>, #_ContiguousArrayBuffer._storage // user: %3
  %3 = ref_element_addr [immutable] %2 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %4
  %4 = struct_element_addr %3 : $*_ArrayBody, #_ArrayBody._storage // user: %5
  %5 = struct_element_addr %4 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %6
  %6 = struct_element_addr %5 : $*Int, #Int._value // user: %7
  %7 = load %6 : $*Builtin.Int64                  // users: %9, %13
  %8 = integer_literal $Builtin.Int64, 0          // user: %9
  %9 = builtin "cmp_slt_Int64"(%7 : $Builtin.Int64, %8 : $Builtin.Int64) : $Builtin.Int1 // user: %11
  %10 = integer_literal $Builtin.Int1, 0          // user: %11
  %11 = builtin "int_expect_Int1"(%9 : $Builtin.Int1, %10 : $Builtin.Int1) : $Builtin.Int1 // user: %12
  cond_br %11, bb2, bb1                           // id: %12

bb1:                                              // Preds: bb0
  %13 = builtin "assumeNonNegative_Int64"(%7 : $Builtin.Int64) : $Builtin.Int64 // user: %14
  %14 = struct $Int (%13 : $Builtin.Int64)        // user: %15
  return %14 : $Int                               // id: %15

bb2:                                              // Preds: bb0
  %16 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %18
  %17 = integer_literal $Builtin.Word, 24         // user: %20
  %18 = builtin "ptrtoint_Word"(%16 : $Builtin.RawPointer) : $Builtin.Word // user: %20
  %19 = integer_literal $Builtin.Int8, 2          // users: %30, %26, %20
  %20 = struct $StaticString (%18 : $Builtin.Word, %17 : $Builtin.Word, %19 : $Builtin.Int8) // user: %34
  %21 = integer_literal $Builtin.Int64, 15505     // user: %22
  %22 = struct $UInt (%21 : $Builtin.Int64)       // user: %34
  %23 = string_literal utf8 ""                    // user: %25
  %24 = integer_literal $Builtin.Word, 0          // user: %26
  %25 = builtin "ptrtoint_Word"(%23 : $Builtin.RawPointer) : $Builtin.Word // user: %26
  %26 = struct $StaticString (%25 : $Builtin.Word, %24 : $Builtin.Word, %19 : $Builtin.Int8) // user: %34
  %27 = string_literal utf8 "Fatal error"         // user: %29
  %28 = integer_literal $Builtin.Word, 11         // user: %30
  %29 = builtin "ptrtoint_Word"(%27 : $Builtin.RawPointer) : $Builtin.Word // user: %30
  %30 = struct $StaticString (%29 : $Builtin.Word, %28 : $Builtin.Word, %19 : $Builtin.Int8) // user: %34
  %31 = integer_literal $Builtin.Int32, 0         // user: %32
  %32 = struct $UInt32 (%31 : $Builtin.Int32)     // user: %34
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %33 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %34
  %34 = apply %33(%30, %26, %20, %22, %32) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %35
} // end sil function '$sSa9_getCountSiyF'

// getContiguousArrayStorageType<A>(for:)
sil shared [noinline] [readonly] [_semantics "array.getContiguousArrayStorageType"] @$ss29getContiguousArrayStorageType3fors01_bcD0CyxGmxm_tlF : $@convention(thin) <Element> (@thick Element.Type) -> @thick _ContiguousArrayStorage<Element>.Type {
bb0(%0 : $@thick Element.Type):
  %1 = metatype $@thick Element.Type              // user: %2
  checked_cast_br Element.Type in %1 : $@thick Element.Type to any AnyObject.Type, bb2, bb1 // id: %2

bb1:                                              // Preds: bb0
  %3 = metatype $@thick _ContiguousArrayStorage<Element>.Type // user: %4
  br bb3(%3 : $@thick _ContiguousArrayStorage<Element>.Type) // id: %4

bb2(%5 : $@thick any AnyObject.Type):             // Preds: bb0
  %6 = metatype $@thick _ContiguousArrayStorage<AnyObject>.Type // user: %7
  %7 = unchecked_trivial_bit_cast %6 : $@thick _ContiguousArrayStorage<AnyObject>.Type to $@thick _ContiguousArrayStorage<Element>.Type // user: %8
  br bb3(%7 : $@thick _ContiguousArrayStorage<Element>.Type) // id: %8

// %9                                             // user: %10
bb3(%9 : $@thick _ContiguousArrayStorage<Element>.Type): // Preds: bb2 bb1
  return %9 : $@thick _ContiguousArrayStorage<Element>.Type // id: %10
} // end sil function '$ss29getContiguousArrayStorageType3fors01_bcD0CyxGmxm_tlF'

// __ContiguousArrayStorageBase.__allocating_init()
sil public_external [exact_self_class] @$ss28__ContiguousArrayStorageBaseCABycfC : $@convention(method) (@thick __ContiguousArrayStorageBase.Type) -> @owned __ContiguousArrayStorageBase {
bb0(%0 : $@thick __ContiguousArrayStorageBase.Type):
  %1 = string_literal utf8 "Swift.__ContiguousArrayStorageBase" // user: %3
  %2 = string_literal utf8 "init()"               // user: %4
  %3 = struct $UnsafePointer<UInt8> (%1 : $Builtin.RawPointer) // user: %12
  %4 = struct $UnsafePointer<UInt8> (%2 : $Builtin.RawPointer) // user: %12
  %5 = integer_literal $Builtin.Int32, 0          // user: %10
  %6 = integer_literal $Builtin.Int32, 34         // user: %7
  %7 = struct $Int32 (%6 : $Builtin.Int32)        // user: %12
  %8 = integer_literal $Builtin.Int32, 6          // user: %9
  %9 = struct $Int32 (%8 : $Builtin.Int32)        // user: %12
  %10 = struct $UInt32 (%5 : $Builtin.Int32)      // user: %12
  // function_ref _swift_stdlib_reportUnimplementedInitializer
  %11 = function_ref @_swift_stdlib_reportUnimplementedInitializer : $@convention(c) (UnsafePointer<UInt8>, Int32, UnsafePointer<UInt8>, Int32, UInt32) -> () // user: %12
  %12 = apply %11(%3, %7, %4, %9, %10) : $@convention(c) (UnsafePointer<UInt8>, Int32, UnsafePointer<UInt8>, Int32, UInt32) -> ()
  %13 = builtin "int_trap"() : $Never
  unreachable                                     // id: %14
} // end sil function '$ss28__ContiguousArrayStorageBaseCABycfC'

// _ContiguousArrayStorage.__allocating_init(_doNotCallMeBase:)
sil public_external [exact_self_class] @$ss23_ContiguousArrayStorageC16_doNotCallMeBaseAByxGyt_tcfC : $@convention(method) <Element> (@thick _ContiguousArrayStorage<Element>.Type) -> @owned _ContiguousArrayStorage<Element> {
bb0(%0 : $@thick _ContiguousArrayStorage<Element>.Type):
  %1 = string_literal utf8 "creating instance of __ContiguousArrayStorageBase" // user: %3
  %2 = integer_literal $Builtin.Word, 49          // user: %5
  %3 = builtin "ptrtoint_Word"(%1 : $Builtin.RawPointer) : $Builtin.Word // user: %5
  %4 = integer_literal $Builtin.Int8, 2           // users: %15, %9, %5
  %5 = struct $StaticString (%3 : $Builtin.Word, %2 : $Builtin.Word, %4 : $Builtin.Int8) // user: %19
  %6 = string_literal utf8 "Swift/SwiftNativeNSArray.swift" // user: %8
  %7 = integer_literal $Builtin.Word, 30          // user: %9
  %8 = builtin "ptrtoint_Word"(%6 : $Builtin.RawPointer) : $Builtin.Word // user: %9
  %9 = struct $StaticString (%8 : $Builtin.Word, %7 : $Builtin.Word, %4 : $Builtin.Int8) // user: %19
  %10 = integer_literal $Builtin.Int64, 521       // user: %11
  %11 = struct $UInt (%10 : $Builtin.Int64)       // user: %19
  %12 = string_literal utf8 "Fatal error"         // user: %14
  %13 = integer_literal $Builtin.Word, 11         // user: %15
  %14 = builtin "ptrtoint_Word"(%12 : $Builtin.RawPointer) : $Builtin.Word // user: %15
  %15 = struct $StaticString (%14 : $Builtin.Word, %13 : $Builtin.Word, %4 : $Builtin.Int8) // user: %19
  %16 = integer_literal $Builtin.Int32, 0         // user: %17
  %17 = struct $UInt32 (%16 : $Builtin.Int32)     // user: %19
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %18 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %19
  %19 = apply %18(%15, %5, %9, %11, %17) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %20
} // end sil function '$ss23_ContiguousArrayStorageC16_doNotCallMeBaseAByxGyt_tcfC'

// _ContiguousArrayStorage.canStoreElements(ofDynamicType:)
sil public_external @$ss23_ContiguousArrayStorageC16canStoreElements13ofDynamicTypeSbypXp_tF : $@convention(method) <Element> (@thick any Any.Type, @guaranteed _ContiguousArrayStorage<Element>) -> Bool {
[%1: noescape **]
bb0(%0 : $@thick any Any.Type, %1 : $_ContiguousArrayStorage<Element>):
  %2 = integer_literal $Builtin.Int1, 0           // user: %3
  %3 = struct $Bool (%2 : $Builtin.Int1)          // user: %4
  return %3 : $Bool                               // id: %4
} // end sil function '$ss23_ContiguousArrayStorageC16canStoreElements13ofDynamicTypeSbypXp_tF'

// _ContiguousArrayStorage.staticElementType.getter
sil public_external @$ss23_ContiguousArrayStorageC17staticElementTypeypXpvg : $@convention(method) <Element> (@guaranteed _ContiguousArrayStorage<Element>) -> @thick any Any.Type {
[%0: noescape **]
bb0(%0 : $_ContiguousArrayStorage<Element>):
  %1 = metatype $@thick Element.Type              // user: %2
  %2 = init_existential_metatype %1 : $@thick Element.Type, $@thick any Any.Type // user: %3
  return %2 : $@thick any Any.Type                // id: %3
} // end sil function '$ss23_ContiguousArrayStorageC17staticElementTypeypXpvg'

// _ContiguousArrayStorage.__deallocating_deinit
sil public_external @$ss23_ContiguousArrayStorageCfD : $@convention(method) <Element> (@owned _ContiguousArrayStorage<Element>) -> () {
// %0                                             // user: %2
bb0(%0 : $_ContiguousArrayStorage<Element>):
  // function_ref _ContiguousArrayStorage.deinit
  %1 = function_ref @$ss23_ContiguousArrayStorageCfd : $@convention(method) <τ_0_0> (@guaranteed _ContiguousArrayStorage<τ_0_0>) -> @owned Builtin.NativeObject // user: %2
  %2 = apply %1<Element>(%0) : $@convention(method) <τ_0_0> (@guaranteed _ContiguousArrayStorage<τ_0_0>) -> @owned Builtin.NativeObject // user: %3
  %3 = unchecked_ref_cast %2 : $Builtin.NativeObject to $_ContiguousArrayStorage<Element> // user: %4
  dealloc_ref %3 : $_ContiguousArrayStorage<Element> // id: %4
  %5 = tuple ()                                   // user: %6
  return %5 : $()                                 // id: %6
} // end sil function '$ss23_ContiguousArrayStorageCfD'

// __ContiguousArrayStorageBase.__allocating_init(_doNotCallMeBase:)
sil public_external [exact_self_class] @$ss28__ContiguousArrayStorageBaseC012_doNotCallMeD0AByt_tcfC : $@convention(method) (@thick __ContiguousArrayStorageBase.Type) -> @owned __ContiguousArrayStorageBase {
bb0(%0 : $@thick __ContiguousArrayStorageBase.Type):
  %1 = string_literal utf8 "creating instance of __ContiguousArrayStorageBase" // user: %3
  %2 = integer_literal $Builtin.Word, 49          // user: %5
  %3 = builtin "ptrtoint_Word"(%1 : $Builtin.RawPointer) : $Builtin.Word // user: %5
  %4 = integer_literal $Builtin.Int8, 2           // users: %15, %9, %5
  %5 = struct $StaticString (%3 : $Builtin.Word, %2 : $Builtin.Word, %4 : $Builtin.Int8) // user: %19
  %6 = string_literal utf8 "Swift/SwiftNativeNSArray.swift" // user: %8
  %7 = integer_literal $Builtin.Word, 30          // user: %9
  %8 = builtin "ptrtoint_Word"(%6 : $Builtin.RawPointer) : $Builtin.Word // user: %9
  %9 = struct $StaticString (%8 : $Builtin.Word, %7 : $Builtin.Word, %4 : $Builtin.Int8) // user: %19
  %10 = integer_literal $Builtin.Int64, 521       // user: %11
  %11 = struct $UInt (%10 : $Builtin.Int64)       // user: %19
  %12 = string_literal utf8 "Fatal error"         // user: %14
  %13 = integer_literal $Builtin.Word, 11         // user: %15
  %14 = builtin "ptrtoint_Word"(%12 : $Builtin.RawPointer) : $Builtin.Word // user: %15
  %15 = struct $StaticString (%14 : $Builtin.Word, %13 : $Builtin.Word, %4 : $Builtin.Int8) // user: %19
  %16 = integer_literal $Builtin.Int32, 0         // user: %17
  %17 = struct $UInt32 (%16 : $Builtin.Int32)     // user: %19
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %18 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %19
  %19 = apply %18(%15, %5, %9, %11, %17) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %20
} // end sil function '$ss28__ContiguousArrayStorageBaseC012_doNotCallMeD0AByt_tcfC'

// __ContiguousArrayStorageBase.canStoreElements(ofDynamicType:)
sil public_external @$ss28__ContiguousArrayStorageBaseC16canStoreElements13ofDynamicTypeSbypXp_tF : $@convention(method) (@thick any Any.Type, @guaranteed __ContiguousArrayStorageBase) -> Bool {
[%1: noescape **]
bb0(%0 : $@thick any Any.Type, %1 : $__ContiguousArrayStorageBase):
  %2 = string_literal utf8 "Concrete subclasses must implement canStoreElements(ofDynamicType:)" // user: %4
  %3 = integer_literal $Builtin.Word, 67          // user: %6
  %4 = builtin "ptrtoint_Word"(%2 : $Builtin.RawPointer) : $Builtin.Word // user: %6
  %5 = integer_literal $Builtin.Int8, 2           // users: %16, %10, %6
  %6 = struct $StaticString (%4 : $Builtin.Word, %3 : $Builtin.Word, %5 : $Builtin.Int8) // user: %20
  %7 = string_literal utf8 "Swift/SwiftNativeNSArray.swift" // user: %9
  %8 = integer_literal $Builtin.Word, 30          // user: %10
  %9 = builtin "ptrtoint_Word"(%7 : $Builtin.RawPointer) : $Builtin.Word // user: %10
  %10 = struct $StaticString (%9 : $Builtin.Word, %8 : $Builtin.Word, %5 : $Builtin.Int8) // user: %20
  %11 = integer_literal $Builtin.Int64, 565       // user: %12
  %12 = struct $UInt (%11 : $Builtin.Int64)       // user: %20
  %13 = string_literal utf8 "Fatal error"         // user: %15
  %14 = integer_literal $Builtin.Word, 11         // user: %16
  %15 = builtin "ptrtoint_Word"(%13 : $Builtin.RawPointer) : $Builtin.Word // user: %16
  %16 = struct $StaticString (%15 : $Builtin.Word, %14 : $Builtin.Word, %5 : $Builtin.Int8) // user: %20
  %17 = integer_literal $Builtin.Int32, 0         // user: %18
  %18 = struct $UInt32 (%17 : $Builtin.Int32)     // user: %20
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %19 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %20
  %20 = apply %19(%16, %6, %10, %12, %18) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %21
} // end sil function '$ss28__ContiguousArrayStorageBaseC16canStoreElements13ofDynamicTypeSbypXp_tF'

// __ContiguousArrayStorageBase.staticElementType.getter
sil public_external @$ss28__ContiguousArrayStorageBaseC17staticElementTypeypXpvg : $@convention(method) (@guaranteed __ContiguousArrayStorageBase) -> @thick any Any.Type {
[%0: noescape **]
bb0(%0 : $__ContiguousArrayStorageBase):
  %1 = string_literal utf8 "Concrete subclasses must implement staticElementType" // user: %3
  %2 = integer_literal $Builtin.Word, 52          // user: %5
  %3 = builtin "ptrtoint_Word"(%1 : $Builtin.RawPointer) : $Builtin.Word // user: %5
  %4 = integer_literal $Builtin.Int8, 2           // users: %15, %9, %5
  %5 = struct $StaticString (%3 : $Builtin.Word, %2 : $Builtin.Word, %4 : $Builtin.Int8) // user: %19
  %6 = string_literal utf8 "Swift/SwiftNativeNSArray.swift" // user: %8
  %7 = integer_literal $Builtin.Word, 30          // user: %9
  %8 = builtin "ptrtoint_Word"(%6 : $Builtin.RawPointer) : $Builtin.Word // user: %9
  %9 = struct $StaticString (%8 : $Builtin.Word, %7 : $Builtin.Word, %4 : $Builtin.Int8) // user: %19
  %10 = integer_literal $Builtin.Int64, 573       // user: %11
  %11 = struct $UInt (%10 : $Builtin.Int64)       // user: %19
  %12 = string_literal utf8 "Fatal error"         // user: %14
  %13 = integer_literal $Builtin.Word, 11         // user: %15
  %14 = builtin "ptrtoint_Word"(%12 : $Builtin.RawPointer) : $Builtin.Word // user: %15
  %15 = struct $StaticString (%14 : $Builtin.Word, %13 : $Builtin.Word, %4 : $Builtin.Int8) // user: %19
  %16 = integer_literal $Builtin.Int32, 0         // user: %17
  %17 = struct $UInt32 (%16 : $Builtin.Int32)     // user: %19
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %18 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %19
  %19 = apply %18(%15, %5, %9, %11, %17) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %20
} // end sil function '$ss28__ContiguousArrayStorageBaseC17staticElementTypeypXpvg'

// __ContiguousArrayStorageBase.__deallocating_deinit
sil public_external @$ss28__ContiguousArrayStorageBaseCfD : $@convention(method) (@owned __ContiguousArrayStorageBase) -> () {
// %0                                             // users: %12, %1
bb0(%0 : $__ContiguousArrayStorageBase):
  %1 = init_existential_ref %0 : $__ContiguousArrayStorageBase : $__ContiguousArrayStorageBase, $AnyObject // user: %6
  %2 = global_addr @_swiftEmptyArrayStorage : $*_SwiftEmptyArrayStorage // user: %3
  %3 = address_to_pointer [stack_protection] %2 : $*_SwiftEmptyArrayStorage to $Builtin.RawPointer // user: %4
  %4 = raw_pointer_to_ref %3 : $Builtin.RawPointer to $__EmptyArrayStorage // user: %5
  %5 = init_existential_ref %4 : $__EmptyArrayStorage : $__EmptyArrayStorage, $AnyObject // user: %7
  %6 = ref_to_raw_pointer %1 : $AnyObject to $Builtin.RawPointer // user: %8
  %7 = ref_to_raw_pointer %5 : $AnyObject to $Builtin.RawPointer // user: %8
  %8 = builtin "cmp_eq_RawPointer"(%6 : $Builtin.RawPointer, %7 : $Builtin.RawPointer) : $Builtin.Int1 // user: %10
  %9 = integer_literal $Builtin.Int1, 0           // user: %10
  %10 = builtin "int_expect_Int1"(%8 : $Builtin.Int1, %9 : $Builtin.Int1) : $Builtin.Int1 // user: %11
  cond_br %10, bb2, bb1                           // id: %11

bb1:                                              // Preds: bb0
  dealloc_ref %0 : $__ContiguousArrayStorageBase  // id: %12
  %13 = tuple ()                                  // user: %14
  return %13 : $()                                // id: %14

bb2:                                              // Preds: bb0
  %15 = string_literal utf8 "Deallocating empty array storage?!" // user: %17
  %16 = integer_literal $Builtin.Word, 34         // user: %19
  %17 = builtin "ptrtoint_Word"(%15 : $Builtin.RawPointer) : $Builtin.Word // user: %19
  %18 = integer_literal $Builtin.Int8, 2          // users: %29, %23, %19
  %19 = struct $StaticString (%17 : $Builtin.Word, %16 : $Builtin.Word, %18 : $Builtin.Int8) // user: %33
  %20 = string_literal utf8 "Swift/SwiftNativeNSArray.swift" // user: %22
  %21 = integer_literal $Builtin.Word, 30         // user: %23
  %22 = builtin "ptrtoint_Word"(%20 : $Builtin.RawPointer) : $Builtin.Word // user: %23
  %23 = struct $StaticString (%22 : $Builtin.Word, %21 : $Builtin.Word, %18 : $Builtin.Int8) // user: %33
  %24 = integer_literal $Builtin.Int64, 579       // user: %25
  %25 = struct $UInt (%24 : $Builtin.Int64)       // user: %33
  %26 = string_literal utf8 "Fatal error"         // user: %28
  %27 = integer_literal $Builtin.Word, 11         // user: %29
  %28 = builtin "ptrtoint_Word"(%26 : $Builtin.RawPointer) : $Builtin.Word // user: %29
  %29 = struct $StaticString (%28 : $Builtin.Word, %27 : $Builtin.Word, %18 : $Builtin.Int8) // user: %33
  %30 = integer_literal $Builtin.Int32, 0         // user: %31
  %31 = struct $UInt32 (%30 : $Builtin.Int32)     // user: %33
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %32 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %33
  %33 = apply %32(%29, %19, %23, %25, %31) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %34
} // end sil function '$ss28__ContiguousArrayStorageBaseCfD'

// __SwiftNativeNSArrayWithContiguousStorage.__allocating_init()
sil public_external [exact_self_class] @$ss41__SwiftNativeNSArrayWithContiguousStorageCABycfC : $@convention(method) (@thick __SwiftNativeNSArrayWithContiguousStorage.Type) -> @owned __SwiftNativeNSArrayWithContiguousStorage {
bb0(%0 : $@thick __SwiftNativeNSArrayWithContiguousStorage.Type):
  %1 = alloc_ref $__SwiftNativeNSArrayWithContiguousStorage // user: %2
  %2 = end_init_let_ref %1 : $__SwiftNativeNSArrayWithContiguousStorage // user: %3
  return %2 : $__SwiftNativeNSArrayWithContiguousStorage // id: %3
} // end sil function '$ss41__SwiftNativeNSArrayWithContiguousStorageCABycfC'

// __SwiftNativeNSArrayWithContiguousStorage.__deallocating_deinit
sil public_external @$ss41__SwiftNativeNSArrayWithContiguousStorageCfD : $@convention(method) (@owned __SwiftNativeNSArrayWithContiguousStorage) -> () {
[%0: noescape **]
// %0                                             // user: %1
bb0(%0 : $__SwiftNativeNSArrayWithContiguousStorage):
  dealloc_ref %0 : $__SwiftNativeNSArrayWithContiguousStorage // id: %1
  %2 = tuple ()                                   // user: %3
  return %2 : $()                                 // id: %3
} // end sil function '$ss41__SwiftNativeNSArrayWithContiguousStorageCfD'

// _ContiguousArrayStorage.deinit
sil public_external @$ss23_ContiguousArrayStorageCfd : $@convention(method) <Element> (@guaranteed _ContiguousArrayStorage<Element>) -> @owned Builtin.NativeObject {
// %0                                             // users: %19, %30, %1, %13
bb0(%0 : $_ContiguousArrayStorage<Element>):
  %1 = upcast %0 : $_ContiguousArrayStorage<Element> to $__ContiguousArrayStorageBase // users: %20, %2
  %2 = ref_element_addr %1 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %3
  %3 = struct_element_addr %2 : $*_ArrayBody, #_ArrayBody._storage // user: %4
  %4 = struct_element_addr %3 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %5
  %5 = struct_element_addr %4 : $*Int, #Int._value // user: %6
  %6 = load %5 : $*Builtin.Int64                  // users: %9, %15
  %7 = integer_literal $Builtin.Int8, 2           // users: %64, %45, %39, %35, %60, %54
  %8 = integer_literal $Builtin.Int64, 0          // user: %9
  %9 = builtin "cmp_slt_Int64"(%6 : $Builtin.Int64, %8 : $Builtin.Int64) : $Builtin.Int1 // user: %11
  %10 = integer_literal $Builtin.Int1, 0          // users: %28, %11
  %11 = builtin "int_expect_Int1"(%9 : $Builtin.Int1, %10 : $Builtin.Int1) : $Builtin.Int1 // user: %12
  cond_br %11, bb4, bb1                           // id: %12

bb1:                                              // Preds: bb0
  %13 = ref_tail_addr %0 : $_ContiguousArrayStorage<Element>, $Element // user: %14
  %14 = address_to_pointer %13 : $*Element to $Builtin.RawPointer // user: %18
  %15 = builtin "assumeNonNegative_Int64"(%6 : $Builtin.Int64) : $Builtin.Int64 // user: %16
  %16 = builtin "truncOrBitCast_Int64_Word"(%15 : $Builtin.Int64) : $Builtin.Word // user: %18
  %17 = metatype $@thin Element.Type              // user: %18
  %18 = builtin "destroyArray"<Element>(%17 : $@thin Element.Type, %14 : $Builtin.RawPointer, %16 : $Builtin.Word) : $()
  fix_lifetime %0 : $_ContiguousArrayStorage<Element> // id: %19
  %20 = init_existential_ref %1 : $__ContiguousArrayStorageBase : $__ContiguousArrayStorageBase, $AnyObject // user: %25
  %21 = global_addr @_swiftEmptyArrayStorage : $*_SwiftEmptyArrayStorage // user: %22
  %22 = address_to_pointer [stack_protection] %21 : $*_SwiftEmptyArrayStorage to $Builtin.RawPointer // user: %23
  %23 = raw_pointer_to_ref %22 : $Builtin.RawPointer to $__EmptyArrayStorage // user: %24
  %24 = init_existential_ref %23 : $__EmptyArrayStorage : $__EmptyArrayStorage, $AnyObject // user: %26
  %25 = ref_to_raw_pointer %20 : $AnyObject to $Builtin.RawPointer // user: %27
  %26 = ref_to_raw_pointer %24 : $AnyObject to $Builtin.RawPointer // user: %27
  %27 = builtin "cmp_eq_RawPointer"(%25 : $Builtin.RawPointer, %26 : $Builtin.RawPointer) : $Builtin.Int1 // user: %28
  %28 = builtin "int_expect_Int1"(%27 : $Builtin.Int1, %10 : $Builtin.Int1) : $Builtin.Int1 // user: %29
  cond_br %28, bb3, bb2                           // id: %29

bb2:                                              // Preds: bb1
  %30 = unchecked_ref_cast %0 : $_ContiguousArrayStorage<Element> to $Builtin.NativeObject // user: %31
  return %30 : $Builtin.NativeObject              // id: %31

bb3:                                              // Preds: bb1
  %32 = string_literal utf8 "Deallocating empty array storage?!" // user: %34
  %33 = integer_literal $Builtin.Word, 34         // user: %35
  %34 = builtin "ptrtoint_Word"(%32 : $Builtin.RawPointer) : $Builtin.Word // user: %35
  %35 = struct $StaticString (%34 : $Builtin.Word, %33 : $Builtin.Word, %7 : $Builtin.Int8) // user: %49
  %36 = string_literal utf8 "Swift/SwiftNativeNSArray.swift" // user: %38
  %37 = integer_literal $Builtin.Word, 30         // user: %39
  %38 = builtin "ptrtoint_Word"(%36 : $Builtin.RawPointer) : $Builtin.Word // user: %39
  %39 = struct $StaticString (%38 : $Builtin.Word, %37 : $Builtin.Word, %7 : $Builtin.Int8) // user: %49
  %40 = integer_literal $Builtin.Int64, 579       // user: %41
  %41 = struct $UInt (%40 : $Builtin.Int64)       // user: %49
  %42 = string_literal utf8 "Fatal error"         // user: %44
  %43 = integer_literal $Builtin.Word, 11         // user: %45
  %44 = builtin "ptrtoint_Word"(%42 : $Builtin.RawPointer) : $Builtin.Word // user: %45
  %45 = struct $StaticString (%44 : $Builtin.Word, %43 : $Builtin.Word, %7 : $Builtin.Int8) // user: %49
  %46 = integer_literal $Builtin.Int32, 0         // user: %47
  %47 = struct $UInt32 (%46 : $Builtin.Int32)     // user: %49
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %48 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %49
  %49 = apply %48(%45, %35, %39, %41, %47) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %50

bb4:                                              // Preds: bb0
  %51 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %53
  %52 = integer_literal $Builtin.Word, 24         // user: %54
  %53 = builtin "ptrtoint_Word"(%51 : $Builtin.RawPointer) : $Builtin.Word // user: %54
  %54 = struct $StaticString (%53 : $Builtin.Word, %52 : $Builtin.Word, %7 : $Builtin.Int8) // user: %68
  %55 = integer_literal $Builtin.Int64, 15505     // user: %56
  %56 = struct $UInt (%55 : $Builtin.Int64)       // user: %68
  %57 = string_literal utf8 ""                    // user: %59
  %58 = integer_literal $Builtin.Word, 0          // user: %60
  %59 = builtin "ptrtoint_Word"(%57 : $Builtin.RawPointer) : $Builtin.Word // user: %60
  %60 = struct $StaticString (%59 : $Builtin.Word, %58 : $Builtin.Word, %7 : $Builtin.Int8) // user: %68
  %61 = string_literal utf8 "Fatal error"         // user: %63
  %62 = integer_literal $Builtin.Word, 11         // user: %64
  %63 = builtin "ptrtoint_Word"(%61 : $Builtin.RawPointer) : $Builtin.Word // user: %64
  %64 = struct $StaticString (%63 : $Builtin.Word, %62 : $Builtin.Word, %7 : $Builtin.Int8) // user: %68
  %65 = integer_literal $Builtin.Int32, 0         // user: %66
  %66 = struct $UInt32 (%65 : $Builtin.Int32)     // user: %68
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %67 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %68
  %68 = apply %67(%64, %60, %54, %56, %66) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %69
} // end sil function '$ss23_ContiguousArrayStorageCfd'

// _swift_stdlib_reportUnimplementedInitializer
// clang name: _swift_stdlib_reportUnimplementedInitializer
sil [clang _swift_stdlib_reportUnimplementedInitializer] @_swift_stdlib_reportUnimplementedInitializer : $@convention(c) (UnsafePointer<UInt8>, Int32, UnsafePointer<UInt8>, Int32, UInt32) -> ()

// _SmallString._invariantCheck()
sil [noinline] [releasenone] @$ss12_SmallStringV15_invariantCheckyyF : $@convention(method) (_SmallString) -> ()

// _StringObject._invariantCheck()
sil [noinline] [releasenone] @$ss13_StringObjectV15_invariantCheckyyF : $@convention(method) (@guaranteed _StringObject) -> ()

// _StringGuts._invariantCheck()
sil [noinline] [releasenone] @$ss11_StringGutsV15_invariantCheckyyF : $@convention(method) (@guaranteed _StringGuts) -> ()

// String._invariantCheck()
sil [noinline] [releasenone] @$sSS15_invariantCheckyyF : $@convention(method) (@guaranteed String) -> ()

// Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)
sil shared [_specialize exported: true, kind: full, where  @_noMetadata Element : _Class] @$sSa16_createNewBuffer14bufferIsUnique15minimumCapacity13growForAppendySb_SiSbtF : $@convention(method) <Element> (Bool, Int, Bool, @inout Array<Element>) -> () {
[%3: read v**, write v**, copy v**, destroy v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // users: %39, %4
// %1                                             // user: %39
// %2                                             // user: %39
// %3                                             // users: %43, %34, %7
bb0(%0 : $Bool, %1 : $Int, %2 : $Bool, %3 : $*Array<Element>):
  %4 = struct_extract %0 : $Bool, #Bool._value    // user: %5
  cond_br %4, bb2, bb1                            // id: %5

bb1:                                              // Preds: bb0
  br bb5                                          // id: %6

bb2:                                              // Preds: bb0
  %7 = struct_element_addr %3 : $*Array<Element>, #Array._buffer // user: %8
  %8 = struct_element_addr %7 : $*_ContiguousArrayBuffer<Element>, #_ContiguousArrayBuffer._storage // user: %9
  %9 = is_unique %8 : $*__ContiguousArrayStorageBase // user: %11
  %10 = integer_literal $Builtin.Int1, -1         // user: %11
  %11 = builtin "int_expect_Int1"(%9 : $Builtin.Int1, %10 : $Builtin.Int1) : $Builtin.Int1 // user: %12
  cond_br %11, bb4, bb3                           // id: %12

bb3:                                              // Preds: bb2
  %13 = string_literal utf8 "Swift/Array.swift"   // user: %15
  %14 = integer_literal $Builtin.Word, 17         // user: %17
  %15 = builtin "ptrtoint_Word"(%13 : $Builtin.RawPointer) : $Builtin.Word // user: %17
  %16 = integer_literal $Builtin.Int8, 2          // users: %27, %23, %17
  %17 = struct $StaticString (%15 : $Builtin.Word, %14 : $Builtin.Word, %16 : $Builtin.Int8) // user: %31
  %18 = integer_literal $Builtin.Int64, 1106      // user: %19
  %19 = struct $UInt (%18 : $Builtin.Int64)       // user: %31
  %20 = string_literal utf8 ""                    // user: %22
  %21 = integer_literal $Builtin.Word, 0          // user: %23
  %22 = builtin "ptrtoint_Word"(%20 : $Builtin.RawPointer) : $Builtin.Word // user: %23
  %23 = struct $StaticString (%22 : $Builtin.Word, %21 : $Builtin.Word, %16 : $Builtin.Int8) // user: %31
  %24 = string_literal utf8 "Fatal error"         // user: %26
  %25 = integer_literal $Builtin.Word, 11         // user: %27
  %26 = builtin "ptrtoint_Word"(%24 : $Builtin.RawPointer) : $Builtin.Word // user: %27
  %27 = struct $StaticString (%26 : $Builtin.Word, %25 : $Builtin.Word, %16 : $Builtin.Int8) // user: %31
  %28 = integer_literal $Builtin.Int32, 0         // user: %29
  %29 = struct $UInt32 (%28 : $Builtin.Int32)     // user: %31
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %30 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %31
  %31 = apply %30(%27, %23, %17, %19, %29) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %32

bb4:                                              // Preds: bb2
  br bb5                                          // id: %33

bb5:                                              // Preds: bb4 bb1
  %34 = struct_element_addr %3 : $*Array<Element>, #Array._buffer // users: %41, %35
  %35 = load %34 : $*_ContiguousArrayBuffer<Element> // users: %37, %39
  // function_ref _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)
  %36 = function_ref @$ss22_ContiguousArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtF : $@convention(method) <τ_0_0> (Bool, Int, Bool, @owned _ContiguousArrayBuffer<τ_0_0>) -> @owned _ContiguousArrayBuffer<τ_0_0> // user: %39
  %37 = struct_extract %35 : $_ContiguousArrayBuffer<Element>, #_ContiguousArrayBuffer._storage // user: %38
  strong_retain %37 : $__ContiguousArrayStorageBase // id: %38
  %39 = apply %36<Element>(%0, %1, %2, %35) : $@convention(method) <τ_0_0> (Bool, Int, Bool, @owned _ContiguousArrayBuffer<τ_0_0>) -> @owned _ContiguousArrayBuffer<τ_0_0> // user: %40
  %40 = struct $Array<Element> (%39 : $_ContiguousArrayBuffer<Element>) // user: %43
  %41 = struct_element_addr %34 : $*_ContiguousArrayBuffer<Element>, #_ContiguousArrayBuffer._storage // user: %42
  %42 = load %41 : $*__ContiguousArrayStorageBase // user: %44
  store %40 to %3 : $*Array<Element>              // id: %43
  strong_release %42 : $__ContiguousArrayStorageBase // id: %44
  %45 = tuple ()                                  // user: %46
  return %45 : $()                                // id: %46
} // end sil function '$sSa16_createNewBuffer14bufferIsUnique15minimumCapacity13growForAppendySb_SiSbtF'

// Array._makeUniqueAndReserveCapacityIfNotUnique()
sil public_external [_semantics "array.make_mutable"] [_specialize exported: true, kind: full, where  @_noMetadata Element : _Class] @$sSa034_makeUniqueAndReserveCapacityIfNotB0yyF : $@convention(method) <Element> (@inout Array<Element>) -> () {
[%0: noescape! **]
// %0                                             // users: %24, %8, %1
bb0(%0 : $*Array<Element>):
  %1 = struct_element_addr %0 : $*Array<Element>, #Array._buffer // user: %2
  %2 = struct_element_addr %1 : $*_ContiguousArrayBuffer<Element>, #_ContiguousArrayBuffer._storage // user: %3
  %3 = load %2 : $*__ContiguousArrayStorageBase   // user: %4
  (%4, %5) = begin_cow_mutation %3 : $__ContiguousArrayStorageBase // users: %9, %6
  %6 = struct $_ContiguousArrayBuffer<Element> (%5 : $__ContiguousArrayStorageBase) // users: %22, %7
  %7 = struct $Array<Element> (%6 : $_ContiguousArrayBuffer<Element>) // users: %13, %8
  store %7 to %0 : $*Array<Element>               // id: %8
  cond_br %4, bb2, bb1                            // id: %9

bb1:                                              // Preds: bb0
  %10 = integer_literal $Builtin.Int1, 0          // users: %16, %11
  %11 = struct $Bool (%10 : $Builtin.Int1)        // user: %22
  // function_ref Array.count.getter
  %12 = function_ref @$sSa5countSivg : $@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int // user: %13
  %13 = apply %12<Element>(%7) : $@convention(method) <τ_0_0> (@guaranteed Array<τ_0_0>) -> Int // user: %15
  %14 = integer_literal $Builtin.Int64, 1         // user: %16
  %15 = struct_extract %13 : $Int, #Int._value    // user: %16
  %16 = builtin "sadd_with_overflow_Int64"(%15 : $Builtin.Int64, %14 : $Builtin.Int64, %10 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %17
  %17 = tuple_extract %16 : $(Builtin.Int64, Builtin.Int1), 0 // user: %18
  %18 = struct $Int (%17 : $Builtin.Int64)        // user: %22
  %19 = integer_literal $Builtin.Int1, -1         // user: %20
  %20 = struct $Bool (%19 : $Builtin.Int1)        // user: %22
  // function_ref _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)
  %21 = function_ref @$ss22_ContiguousArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtF : $@convention(method) <τ_0_0> (Bool, Int, Bool, @owned _ContiguousArrayBuffer<τ_0_0>) -> @owned _ContiguousArrayBuffer<τ_0_0> // user: %22
  %22 = apply %21<Element>(%11, %18, %20, %6) : $@convention(method) <τ_0_0> (Bool, Int, Bool, @owned _ContiguousArrayBuffer<τ_0_0>) -> @owned _ContiguousArrayBuffer<τ_0_0> // user: %23
  %23 = struct $Array<Element> (%22 : $_ContiguousArrayBuffer<Element>) // user: %24
  store %23 to %0 : $*Array<Element>              // id: %24
  br bb3                                          // id: %25

bb2:                                              // Preds: bb0
  br bb3                                          // id: %26

bb3:                                              // Preds: bb2 bb1
  %27 = tuple ()                                  // user: %28
  return %27 : $()                                // id: %28
} // end sil function '$sSa034_makeUniqueAndReserveCapacityIfNotB0yyF'

// Array._appendElementAssumeUniqueAndCapacity(_:newElement:)
sil public_external [_semantics "array.mutate_unknown"] [_specialize exported: true, kind: full, where  @_noMetadata Element : _Class] @$sSa37_appendElementAssumeUniqueAndCapacity_03newB0ySi_xntF : $@convention(method) <Element> (Int, @in Element, @inout Array<Element>) -> () {
[%2: noescape! **]
// %0                                             // user: %51
// %1                                             // user: %69
// %2                                             // user: %12
bb0(%0 : $Int, %1 : $*Element, %2 : $*Array<Element>):
  %3 = string_literal utf8 "Swift/Array.swift"    // user: %5
  %4 = integer_literal $Builtin.Word, 17          // user: %7
  %5 = builtin "ptrtoint_Word"(%3 : $Builtin.RawPointer) : $Builtin.Word // user: %7
  %6 = integer_literal $Builtin.Int8, 2           // users: %118, %103, %92, %81, %75, %57, %112, %23, %11, %7
  %7 = struct $StaticString (%5 : $Builtin.Word, %4 : $Builtin.Word, %6 : $Builtin.Int8) // users: %107, %27
  %8 = string_literal utf8 ""                     // user: %10
  %9 = integer_literal $Builtin.Word, 0           // user: %11
  %10 = builtin "ptrtoint_Word"(%8 : $Builtin.RawPointer) : $Builtin.Word // user: %11
  %11 = struct $StaticString (%10 : $Builtin.Word, %9 : $Builtin.Word, %6 : $Builtin.Int8) // users: %122, %107, %96, %27
  %12 = struct_element_addr %2 : $*Array<Element>, #Array._buffer // user: %13
  %13 = struct_element_addr %12 : $*_ContiguousArrayBuffer<Element>, #_ContiguousArrayBuffer._storage // users: %29, %14
  %14 = is_unique %13 : $*__ContiguousArrayStorageBase // user: %16
  %15 = integer_literal $Builtin.Int1, -1         // user: %16
  %16 = builtin "int_expect_Int1"(%14 : $Builtin.Int1, %15 : $Builtin.Int1) : $Builtin.Int1 // user: %17
  cond_br %16, bb2, bb1                           // id: %17

bb1:                                              // Preds: bb0
  %18 = integer_literal $Builtin.Int64, 1165      // user: %19
  %19 = struct $UInt (%18 : $Builtin.Int64)       // user: %27
  %20 = string_literal utf8 "Fatal error"         // user: %22
  %21 = integer_literal $Builtin.Word, 11         // user: %23
  %22 = builtin "ptrtoint_Word"(%20 : $Builtin.RawPointer) : $Builtin.Word // user: %23
  %23 = struct $StaticString (%22 : $Builtin.Word, %21 : $Builtin.Word, %6 : $Builtin.Int8) // user: %27
  %24 = integer_literal $Builtin.Int32, 0         // user: %25
  %25 = struct $UInt32 (%24 : $Builtin.Int32)     // user: %27
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %26 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %27
  %27 = apply %26(%23, %11, %7, %19, %25) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %28

bb2:                                              // Preds: bb0
  %29 = load %13 : $*__ContiguousArrayStorageBase // users: %67, %30
  %30 = ref_element_addr %29 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %31
  %31 = struct_element_addr %30 : $*_ArrayBody, #_ArrayBody._storage // users: %35, %32
  %32 = struct_element_addr %31 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage._capacityAndFlags // user: %33
  %33 = struct_element_addr %32 : $*UInt, #UInt._value // user: %34
  %34 = load %33 : $*Builtin.Int64                // user: %44
  %35 = struct_element_addr %31 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // users: %65, %36
  %36 = struct_element_addr %35 : $*Int, #Int._value // user: %37
  %37 = load %36 : $*Builtin.Int64                // users: %39, %45
  %38 = integer_literal $Builtin.Int64, 0         // users: %58, %39
  %39 = builtin "cmp_slt_Int64"(%37 : $Builtin.Int64, %38 : $Builtin.Int64) : $Builtin.Int1 // user: %41
  %40 = integer_literal $Builtin.Int1, 0          // users: %62, %59, %52, %49, %46, %41
  %41 = builtin "int_expect_Int1"(%39 : $Builtin.Int1, %40 : $Builtin.Int1) : $Builtin.Int1 // user: %42
  cond_br %41, bb10, bb3                          // id: %42

bb3:                                              // Preds: bb2
  %43 = integer_literal $Builtin.Int64, 1         // users: %52, %46, %44
  %44 = builtin "lshr_Int64"(%34 : $Builtin.Int64, %43 : $Builtin.Int64) : $Builtin.Int64 // users: %61, %48
  %45 = builtin "assumeNonNegative_Int64"(%37 : $Builtin.Int64) : $Builtin.Int64 // user: %46
  %46 = builtin "sadd_with_overflow_Int64"(%45 : $Builtin.Int64, %43 : $Builtin.Int64, %40 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %47
  %47 = tuple_extract %46 : $(Builtin.Int64, Builtin.Int1), 0 // user: %48
  %48 = builtin "cmp_slt_Int64"(%44 : $Builtin.Int64, %47 : $Builtin.Int64) : $Builtin.Int1 // user: %49
  %49 = builtin "int_expect_Int1"(%48 : $Builtin.Int1, %40 : $Builtin.Int1) : $Builtin.Int1 // user: %50
  cond_br %49, bb9, bb4                           // id: %50

bb4:                                              // Preds: bb3
  %51 = struct_extract %0 : $Int, #Int._value     // users: %66, %52
  %52 = builtin "sadd_with_overflow_Int64"(%51 : $Builtin.Int64, %43 : $Builtin.Int64, %40 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %53
  %53 = tuple_extract %52 : $(Builtin.Int64, Builtin.Int1), 0 // users: %64, %58, %61
  %54 = string_literal utf8 "Swift/ContiguousArrayBuffer.swift" // user: %56
  %55 = integer_literal $Builtin.Word, 33         // user: %57
  %56 = builtin "ptrtoint_Word"(%54 : $Builtin.RawPointer) : $Builtin.Word // user: %57
  %57 = struct $StaticString (%56 : $Builtin.Word, %55 : $Builtin.Word, %6 : $Builtin.Int8) // users: %96, %85
  %58 = builtin "cmp_slt_Int64"(%53 : $Builtin.Int64, %38 : $Builtin.Int64) : $Builtin.Int1 // user: %59
  %59 = builtin "int_expect_Int1"(%58 : $Builtin.Int1, %40 : $Builtin.Int1) : $Builtin.Int1 // user: %60
  cond_br %59, bb8, bb5                           // id: %60

bb5:                                              // Preds: bb4
  %61 = builtin "cmp_slt_Int64"(%44 : $Builtin.Int64, %53 : $Builtin.Int64) : $Builtin.Int1 // user: %62
  %62 = builtin "int_expect_Int1"(%61 : $Builtin.Int1, %40 : $Builtin.Int1) : $Builtin.Int1 // user: %63
  cond_br %62, bb7, bb6                           // id: %63

bb6:                                              // Preds: bb5
  %64 = struct $Int (%53 : $Builtin.Int64)        // user: %65
  store %64 to %35 : $*Int                        // id: %65
  %66 = builtin "truncOrBitCast_Int64_Word"(%51 : $Builtin.Int64) : $Builtin.Word // user: %68
  %67 = ref_tail_addr %29 : $__ContiguousArrayStorageBase, $Element // user: %68
  %68 = index_addr [stack_protection] %67 : $*Element, %66 : $Builtin.Word // user: %69
  copy_addr [take] %1 to [init] %68 : $*Element   // id: %69
  %70 = tuple ()                                  // user: %71
  return %70 : $()                                // id: %71

bb7:                                              // Preds: bb5
  %72 = string_literal utf8 "Can't grow an array buffer past its capacity" // user: %74
  %73 = integer_literal $Builtin.Word, 44         // user: %75
  %74 = builtin "ptrtoint_Word"(%72 : $Builtin.RawPointer) : $Builtin.Word // user: %75
  %75 = struct $StaticString (%74 : $Builtin.Word, %73 : $Builtin.Word, %6 : $Builtin.Int8) // user: %85
  %76 = integer_literal $Builtin.Int64, 645       // user: %77
  %77 = struct $UInt (%76 : $Builtin.Int64)       // user: %85
  %78 = string_literal utf8 "Fatal error"         // user: %80
  %79 = integer_literal $Builtin.Word, 11         // user: %81
  %80 = builtin "ptrtoint_Word"(%78 : $Builtin.RawPointer) : $Builtin.Word // user: %81
  %81 = struct $StaticString (%80 : $Builtin.Word, %79 : $Builtin.Word, %6 : $Builtin.Int8) // user: %85
  %82 = integer_literal $Builtin.Int32, 0         // user: %83
  %83 = struct $UInt32 (%82 : $Builtin.Int32)     // user: %85
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %84 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %85
  %85 = apply %84(%81, %75, %57, %77, %83) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %86

bb8:                                              // Preds: bb4
  %87 = integer_literal $Builtin.Int64, 643       // user: %88
  %88 = struct $UInt (%87 : $Builtin.Int64)       // user: %96
  %89 = string_literal utf8 "Fatal error"         // user: %91
  %90 = integer_literal $Builtin.Word, 11         // user: %92
  %91 = builtin "ptrtoint_Word"(%89 : $Builtin.RawPointer) : $Builtin.Word // user: %92
  %92 = struct $StaticString (%91 : $Builtin.Word, %90 : $Builtin.Word, %6 : $Builtin.Int8) // user: %96
  %93 = integer_literal $Builtin.Int32, 0         // user: %94
  %94 = struct $UInt32 (%93 : $Builtin.Int32)     // user: %96
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %95 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %96
  %96 = apply %95(%92, %11, %57, %88, %94) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %97

bb9:                                              // Preds: bb3
  %98 = integer_literal $Builtin.Int64, 1166      // user: %99
  %99 = struct $UInt (%98 : $Builtin.Int64)       // user: %107
  %100 = string_literal utf8 "Fatal error"        // user: %102
  %101 = integer_literal $Builtin.Word, 11        // user: %103
  %102 = builtin "ptrtoint_Word"(%100 : $Builtin.RawPointer) : $Builtin.Word // user: %103
  %103 = struct $StaticString (%102 : $Builtin.Word, %101 : $Builtin.Word, %6 : $Builtin.Int8) // user: %107
  %104 = integer_literal $Builtin.Int32, 0        // user: %105
  %105 = struct $UInt32 (%104 : $Builtin.Int32)   // user: %107
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %106 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %107
  %107 = apply %106(%103, %11, %7, %99, %105) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %108

bb10:                                             // Preds: bb2
  %109 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %111
  %110 = integer_literal $Builtin.Word, 24        // user: %112
  %111 = builtin "ptrtoint_Word"(%109 : $Builtin.RawPointer) : $Builtin.Word // user: %112
  %112 = struct $StaticString (%111 : $Builtin.Word, %110 : $Builtin.Word, %6 : $Builtin.Int8) // user: %122
  %113 = integer_literal $Builtin.Int64, 15505    // user: %114
  %114 = struct $UInt (%113 : $Builtin.Int64)     // user: %122
  %115 = string_literal utf8 "Fatal error"        // user: %117
  %116 = integer_literal $Builtin.Word, 11        // user: %118
  %117 = builtin "ptrtoint_Word"(%115 : $Builtin.RawPointer) : $Builtin.Word // user: %118
  %118 = struct $StaticString (%117 : $Builtin.Word, %116 : $Builtin.Word, %6 : $Builtin.Int8) // user: %122
  %119 = integer_literal $Builtin.Int32, 0        // user: %120
  %120 = struct $UInt32 (%119 : $Builtin.Int32)   // user: %122
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %121 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %122
  %122 = apply %121(%118, %11, %112, %114, %120) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %123
} // end sil function '$sSa37_appendElementAssumeUniqueAndCapacity_03newB0ySi_xntF'

// ContiguousArray._endMutation()
sil shared [_semantics "array.end_mutation"] [_specialize exported: true, kind: full, where  @_noMetadata Element : _Class] @$ss15ContiguousArrayV12_endMutationyyF : $@convention(method) <Element> (@inout ContiguousArray<Element>) -> () {
[%0: escape v** -> %0.s0.s0.v**, escape v**.c*.v** -> %0.s0.s0.v**.c*.v**, read s0.s0.v**, write v**]
[global: ]
// %0                                             // users: %7, %1
bb0(%0 : $*ContiguousArray<Element>):
  %1 = struct_element_addr %0 : $*ContiguousArray<Element>, #ContiguousArray._buffer // user: %2
  %2 = struct_element_addr %1 : $*_ContiguousArrayBuffer<Element>, #_ContiguousArrayBuffer._storage // user: %3
  %3 = load %2 : $*__ContiguousArrayStorageBase   // user: %4
  %4 = end_cow_mutation %3 : $__ContiguousArrayStorageBase // user: %5
  %5 = struct $_ContiguousArrayBuffer<Element> (%4 : $__ContiguousArrayStorageBase) // user: %6
  %6 = struct $ContiguousArray<Element> (%5 : $_ContiguousArrayBuffer<Element>) // user: %7
  store %6 to %0 : $*ContiguousArray<Element>     // id: %7
  %8 = tuple ()                                   // user: %9
  return %8 : $()                                 // id: %9
} // end sil function '$ss15ContiguousArrayV12_endMutationyyF'

// ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)
sil shared [noinline] [_specialize exported: true, kind: full, where  @_noMetadata Element : _Class] @$ss15ContiguousArrayV16_createNewBuffer14bufferIsUnique15minimumCapacity13growForAppendySb_SiSbtF : $@convention(method) <Element> (Bool, Int, Bool, @inout ContiguousArray<Element>) -> () {
[%3: read v**, write v**, copy v**, destroy v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // users: %39, %4
// %1                                             // user: %39
// %2                                             // user: %39
// %3                                             // users: %43, %34, %7
bb0(%0 : $Bool, %1 : $Int, %2 : $Bool, %3 : $*ContiguousArray<Element>):
  %4 = struct_extract %0 : $Bool, #Bool._value    // user: %5
  cond_br %4, bb2, bb1                            // id: %5

bb1:                                              // Preds: bb0
  br bb5                                          // id: %6

bb2:                                              // Preds: bb0
  %7 = struct_element_addr %3 : $*ContiguousArray<Element>, #ContiguousArray._buffer // user: %8
  %8 = struct_element_addr %7 : $*_ContiguousArrayBuffer<Element>, #_ContiguousArrayBuffer._storage // user: %9
  %9 = is_unique %8 : $*__ContiguousArrayStorageBase // user: %11
  %10 = integer_literal $Builtin.Int1, -1         // user: %11
  %11 = builtin "int_expect_Int1"(%9 : $Builtin.Int1, %10 : $Builtin.Int1) : $Builtin.Int1 // user: %12
  cond_br %11, bb4, bb3                           // id: %12

bb3:                                              // Preds: bb2
  %13 = string_literal utf8 "Swift/ContiguousArray.swift" // user: %15
  %14 = integer_literal $Builtin.Word, 27         // user: %17
  %15 = builtin "ptrtoint_Word"(%13 : $Builtin.RawPointer) : $Builtin.Word // user: %17
  %16 = integer_literal $Builtin.Int8, 2          // users: %27, %23, %17
  %17 = struct $StaticString (%15 : $Builtin.Word, %14 : $Builtin.Word, %16 : $Builtin.Int8) // user: %31
  %18 = integer_literal $Builtin.Int64, 722       // user: %19
  %19 = struct $UInt (%18 : $Builtin.Int64)       // user: %31
  %20 = string_literal utf8 ""                    // user: %22
  %21 = integer_literal $Builtin.Word, 0          // user: %23
  %22 = builtin "ptrtoint_Word"(%20 : $Builtin.RawPointer) : $Builtin.Word // user: %23
  %23 = struct $StaticString (%22 : $Builtin.Word, %21 : $Builtin.Word, %16 : $Builtin.Int8) // user: %31
  %24 = string_literal utf8 "Fatal error"         // user: %26
  %25 = integer_literal $Builtin.Word, 11         // user: %27
  %26 = builtin "ptrtoint_Word"(%24 : $Builtin.RawPointer) : $Builtin.Word // user: %27
  %27 = struct $StaticString (%26 : $Builtin.Word, %25 : $Builtin.Word, %16 : $Builtin.Int8) // user: %31
  %28 = integer_literal $Builtin.Int32, 0         // user: %29
  %29 = struct $UInt32 (%28 : $Builtin.Int32)     // user: %31
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %30 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %31
  %31 = apply %30(%27, %23, %17, %19, %29) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %32

bb4:                                              // Preds: bb2
  br bb5                                          // id: %33

bb5:                                              // Preds: bb4 bb1
  %34 = struct_element_addr %3 : $*ContiguousArray<Element>, #ContiguousArray._buffer // users: %41, %35
  %35 = load %34 : $*_ContiguousArrayBuffer<Element> // users: %37, %39
  // function_ref _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)
  %36 = function_ref @$ss22_ContiguousArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtF : $@convention(method) <τ_0_0> (Bool, Int, Bool, @owned _ContiguousArrayBuffer<τ_0_0>) -> @owned _ContiguousArrayBuffer<τ_0_0> // user: %39
  %37 = struct_extract %35 : $_ContiguousArrayBuffer<Element>, #_ContiguousArrayBuffer._storage // user: %38
  strong_retain %37 : $__ContiguousArrayStorageBase // id: %38
  %39 = apply %36<Element>(%0, %1, %2, %35) : $@convention(method) <τ_0_0> (Bool, Int, Bool, @owned _ContiguousArrayBuffer<τ_0_0>) -> @owned _ContiguousArrayBuffer<τ_0_0> // user: %40
  %40 = struct $ContiguousArray<Element> (%39 : $_ContiguousArrayBuffer<Element>) // user: %43
  %41 = struct_element_addr %34 : $*_ContiguousArrayBuffer<Element>, #_ContiguousArrayBuffer._storage // user: %42
  %42 = load %41 : $*__ContiguousArrayStorageBase // user: %44
  store %40 to %3 : $*ContiguousArray<Element>    // id: %43
  strong_release %42 : $__ContiguousArrayStorageBase // id: %44
  %45 = tuple ()                                  // user: %46
  return %45 : $()                                // id: %46
} // end sil function '$ss15ContiguousArrayV16_createNewBuffer14bufferIsUnique15minimumCapacity13growForAppendySb_SiSbtF'

// ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()
sil public_external [_semantics "array.make_mutable"] [_specialize exported: true, kind: full, where  @_noMetadata Element : _Class] @$ss15ContiguousArrayV034_makeUniqueAndReserveCapacityIfNotD0yyF : $@convention(method) <Element> (@inout ContiguousArray<Element>) -> () {
// %0                                             // users: %8, %49, %1
bb0(%0 : $*ContiguousArray<Element>):
  %1 = struct_element_addr %0 : $*ContiguousArray<Element>, #ContiguousArray._buffer // user: %2
  %2 = struct_element_addr %1 : $*_ContiguousArrayBuffer<Element>, #_ContiguousArrayBuffer._storage // user: %3
  %3 = load %2 : $*__ContiguousArrayStorageBase   // user: %4
  (%4, %5) = begin_cow_mutation %3 : $__ContiguousArrayStorageBase // users: %9, %11, %6
  %6 = struct $_ContiguousArrayBuffer<Element> (%5 : $__ContiguousArrayStorageBase) // user: %7
  %7 = struct $ContiguousArray<Element> (%6 : $_ContiguousArrayBuffer<Element>) // user: %8
  store %7 to %0 : $*ContiguousArray<Element>     // id: %8
  cond_br %4, bb4, bb1                            // id: %9

bb1:                                              // Preds: bb0
  %10 = integer_literal $Builtin.Int1, 0          // users: %18, %43, %40
  %11 = ref_element_addr [immutable] %5 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %12
  %12 = struct_element_addr %11 : $*_ArrayBody, #_ArrayBody._storage // user: %13
  %13 = struct_element_addr %12 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %14
  %14 = struct_element_addr %13 : $*Int, #Int._value // user: %15
  %15 = load %14 : $*Builtin.Int64                // users: %41, %17
  %16 = integer_literal $Builtin.Int64, 0         // user: %17
  %17 = builtin "cmp_slt_Int64"(%15 : $Builtin.Int64, %16 : $Builtin.Int64) : $Builtin.Int1 // user: %18
  %18 = builtin "int_expect_Int1"(%17 : $Builtin.Int1, %10 : $Builtin.Int1) : $Builtin.Int1 // user: %19
  cond_br %18, bb2, bb3                           // id: %19

bb2:                                              // Preds: bb1
  %20 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %22
  %21 = integer_literal $Builtin.Word, 24         // user: %24
  %22 = builtin "ptrtoint_Word"(%20 : $Builtin.RawPointer) : $Builtin.Word // user: %24
  %23 = integer_literal $Builtin.Int8, 2          // users: %34, %30, %24
  %24 = struct $StaticString (%22 : $Builtin.Word, %21 : $Builtin.Word, %23 : $Builtin.Int8) // user: %38
  %25 = integer_literal $Builtin.Int64, 15505     // user: %26
  %26 = struct $UInt (%25 : $Builtin.Int64)       // user: %38
  %27 = string_literal utf8 ""                    // user: %29
  %28 = integer_literal $Builtin.Word, 0          // user: %30
  %29 = builtin "ptrtoint_Word"(%27 : $Builtin.RawPointer) : $Builtin.Word // user: %30
  %30 = struct $StaticString (%29 : $Builtin.Word, %28 : $Builtin.Word, %23 : $Builtin.Int8) // user: %38
  %31 = string_literal utf8 "Fatal error"         // user: %33
  %32 = integer_literal $Builtin.Word, 11         // user: %34
  %33 = builtin "ptrtoint_Word"(%31 : $Builtin.RawPointer) : $Builtin.Word // user: %34
  %34 = struct $StaticString (%33 : $Builtin.Word, %32 : $Builtin.Word, %23 : $Builtin.Int8) // user: %38
  %35 = integer_literal $Builtin.Int32, 0         // user: %36
  %36 = struct $UInt32 (%35 : $Builtin.Int32)     // user: %38
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %37 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %38
  %38 = apply %37(%34, %30, %24, %26, %36) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %39

bb3:                                              // Preds: bb1
  %40 = struct $Bool (%10 : $Builtin.Int1)        // user: %49
  %41 = builtin "assumeNonNegative_Int64"(%15 : $Builtin.Int64) : $Builtin.Int64 // user: %43
  %42 = integer_literal $Builtin.Int64, 1         // user: %43
  %43 = builtin "sadd_with_overflow_Int64"(%41 : $Builtin.Int64, %42 : $Builtin.Int64, %10 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %44
  %44 = tuple_extract %43 : $(Builtin.Int64, Builtin.Int1), 0 // user: %45
  %45 = struct $Int (%44 : $Builtin.Int64)        // user: %49
  %46 = integer_literal $Builtin.Int1, -1         // user: %47
  %47 = struct $Bool (%46 : $Builtin.Int1)        // user: %49
  // function_ref ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)
  %48 = function_ref @$ss15ContiguousArrayV16_createNewBuffer14bufferIsUnique15minimumCapacity13growForAppendySb_SiSbtF : $@convention(method) <τ_0_0> (Bool, Int, Bool, @inout ContiguousArray<τ_0_0>) -> () // user: %49
  %49 = apply %48<Element>(%40, %45, %47, %0) : $@convention(method) <τ_0_0> (Bool, Int, Bool, @inout ContiguousArray<τ_0_0>) -> ()
  br bb5                                          // id: %50

bb4:                                              // Preds: bb0
  br bb5                                          // id: %51

bb5:                                              // Preds: bb4 bb3
  %52 = tuple ()                                  // user: %53
  return %52 : $()                                // id: %53
} // end sil function '$ss15ContiguousArrayV034_makeUniqueAndReserveCapacityIfNotD0yyF'

// ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)
sil public_external [_semantics "array.mutate_unknown"] [_specialize exported: true, kind: full, where  @_noMetadata Element : _Class] @$ss15ContiguousArrayV37_appendElementAssumeUniqueAndCapacity_03newD0ySi_xntF : $@convention(method) <Element> (Int, @in Element, @inout ContiguousArray<Element>) -> () {
// %0                                             // user: %51
// %1                                             // user: %69
// %2                                             // user: %12
bb0(%0 : $Int, %1 : $*Element, %2 : $*ContiguousArray<Element>):
  %3 = string_literal utf8 "Swift/ContiguousArray.swift" // user: %5
  %4 = integer_literal $Builtin.Word, 27          // user: %7
  %5 = builtin "ptrtoint_Word"(%3 : $Builtin.RawPointer) : $Builtin.Word // user: %7
  %6 = integer_literal $Builtin.Int8, 2           // users: %118, %103, %92, %81, %75, %57, %112, %23, %11, %7
  %7 = struct $StaticString (%5 : $Builtin.Word, %4 : $Builtin.Word, %6 : $Builtin.Int8) // users: %107, %27
  %8 = string_literal utf8 ""                     // user: %10
  %9 = integer_literal $Builtin.Word, 0           // user: %11
  %10 = builtin "ptrtoint_Word"(%8 : $Builtin.RawPointer) : $Builtin.Word // user: %11
  %11 = struct $StaticString (%10 : $Builtin.Word, %9 : $Builtin.Word, %6 : $Builtin.Int8) // users: %122, %107, %96, %27
  %12 = struct_element_addr %2 : $*ContiguousArray<Element>, #ContiguousArray._buffer // user: %13
  %13 = struct_element_addr %12 : $*_ContiguousArrayBuffer<Element>, #_ContiguousArrayBuffer._storage // users: %29, %14
  %14 = is_unique %13 : $*__ContiguousArrayStorageBase // user: %16
  %15 = integer_literal $Builtin.Int1, -1         // user: %16
  %16 = builtin "int_expect_Int1"(%14 : $Builtin.Int1, %15 : $Builtin.Int1) : $Builtin.Int1 // user: %17
  cond_br %16, bb2, bb1                           // id: %17

bb1:                                              // Preds: bb0
  %18 = integer_literal $Builtin.Int64, 779       // user: %19
  %19 = struct $UInt (%18 : $Builtin.Int64)       // user: %27
  %20 = string_literal utf8 "Fatal error"         // user: %22
  %21 = integer_literal $Builtin.Word, 11         // user: %23
  %22 = builtin "ptrtoint_Word"(%20 : $Builtin.RawPointer) : $Builtin.Word // user: %23
  %23 = struct $StaticString (%22 : $Builtin.Word, %21 : $Builtin.Word, %6 : $Builtin.Int8) // user: %27
  %24 = integer_literal $Builtin.Int32, 0         // user: %25
  %25 = struct $UInt32 (%24 : $Builtin.Int32)     // user: %27
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %26 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %27
  %27 = apply %26(%23, %11, %7, %19, %25) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %28

bb2:                                              // Preds: bb0
  %29 = load %13 : $*__ContiguousArrayStorageBase // users: %67, %30
  %30 = ref_element_addr %29 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %31
  %31 = struct_element_addr %30 : $*_ArrayBody, #_ArrayBody._storage // users: %35, %32
  %32 = struct_element_addr %31 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage._capacityAndFlags // user: %33
  %33 = struct_element_addr %32 : $*UInt, #UInt._value // user: %34
  %34 = load %33 : $*Builtin.Int64                // user: %44
  %35 = struct_element_addr %31 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // users: %65, %36
  %36 = struct_element_addr %35 : $*Int, #Int._value // user: %37
  %37 = load %36 : $*Builtin.Int64                // users: %39, %45
  %38 = integer_literal $Builtin.Int64, 0         // users: %58, %39
  %39 = builtin "cmp_slt_Int64"(%37 : $Builtin.Int64, %38 : $Builtin.Int64) : $Builtin.Int1 // user: %41
  %40 = integer_literal $Builtin.Int1, 0          // users: %62, %59, %52, %49, %46, %41
  %41 = builtin "int_expect_Int1"(%39 : $Builtin.Int1, %40 : $Builtin.Int1) : $Builtin.Int1 // user: %42
  cond_br %41, bb10, bb3                          // id: %42

bb3:                                              // Preds: bb2
  %43 = integer_literal $Builtin.Int64, 1         // users: %52, %46, %44
  %44 = builtin "lshr_Int64"(%34 : $Builtin.Int64, %43 : $Builtin.Int64) : $Builtin.Int64 // users: %61, %48
  %45 = builtin "assumeNonNegative_Int64"(%37 : $Builtin.Int64) : $Builtin.Int64 // user: %46
  %46 = builtin "sadd_with_overflow_Int64"(%45 : $Builtin.Int64, %43 : $Builtin.Int64, %40 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %47
  %47 = tuple_extract %46 : $(Builtin.Int64, Builtin.Int1), 0 // user: %48
  %48 = builtin "cmp_slt_Int64"(%44 : $Builtin.Int64, %47 : $Builtin.Int64) : $Builtin.Int1 // user: %49
  %49 = builtin "int_expect_Int1"(%48 : $Builtin.Int1, %40 : $Builtin.Int1) : $Builtin.Int1 // user: %50
  cond_br %49, bb9, bb4                           // id: %50

bb4:                                              // Preds: bb3
  %51 = struct_extract %0 : $Int, #Int._value     // users: %66, %52
  %52 = builtin "sadd_with_overflow_Int64"(%51 : $Builtin.Int64, %43 : $Builtin.Int64, %40 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %53
  %53 = tuple_extract %52 : $(Builtin.Int64, Builtin.Int1), 0 // users: %64, %58, %61
  %54 = string_literal utf8 "Swift/ContiguousArrayBuffer.swift" // user: %56
  %55 = integer_literal $Builtin.Word, 33         // user: %57
  %56 = builtin "ptrtoint_Word"(%54 : $Builtin.RawPointer) : $Builtin.Word // user: %57
  %57 = struct $StaticString (%56 : $Builtin.Word, %55 : $Builtin.Word, %6 : $Builtin.Int8) // users: %96, %85
  %58 = builtin "cmp_slt_Int64"(%53 : $Builtin.Int64, %38 : $Builtin.Int64) : $Builtin.Int1 // user: %59
  %59 = builtin "int_expect_Int1"(%58 : $Builtin.Int1, %40 : $Builtin.Int1) : $Builtin.Int1 // user: %60
  cond_br %59, bb8, bb5                           // id: %60

bb5:                                              // Preds: bb4
  %61 = builtin "cmp_slt_Int64"(%44 : $Builtin.Int64, %53 : $Builtin.Int64) : $Builtin.Int1 // user: %62
  %62 = builtin "int_expect_Int1"(%61 : $Builtin.Int1, %40 : $Builtin.Int1) : $Builtin.Int1 // user: %63
  cond_br %62, bb7, bb6                           // id: %63

bb6:                                              // Preds: bb5
  %64 = struct $Int (%53 : $Builtin.Int64)        // user: %65
  store %64 to %35 : $*Int                        // id: %65
  %66 = builtin "truncOrBitCast_Int64_Word"(%51 : $Builtin.Int64) : $Builtin.Word // user: %68
  %67 = ref_tail_addr %29 : $__ContiguousArrayStorageBase, $Element // user: %68
  %68 = index_addr [stack_protection] %67 : $*Element, %66 : $Builtin.Word // user: %69
  copy_addr [take] %1 to [init] %68 : $*Element   // id: %69
  %70 = tuple ()                                  // user: %71
  return %70 : $()                                // id: %71

bb7:                                              // Preds: bb5
  %72 = string_literal utf8 "Can't grow an array buffer past its capacity" // user: %74
  %73 = integer_literal $Builtin.Word, 44         // user: %75
  %74 = builtin "ptrtoint_Word"(%72 : $Builtin.RawPointer) : $Builtin.Word // user: %75
  %75 = struct $StaticString (%74 : $Builtin.Word, %73 : $Builtin.Word, %6 : $Builtin.Int8) // user: %85
  %76 = integer_literal $Builtin.Int64, 645       // user: %77
  %77 = struct $UInt (%76 : $Builtin.Int64)       // user: %85
  %78 = string_literal utf8 "Fatal error"         // user: %80
  %79 = integer_literal $Builtin.Word, 11         // user: %81
  %80 = builtin "ptrtoint_Word"(%78 : $Builtin.RawPointer) : $Builtin.Word // user: %81
  %81 = struct $StaticString (%80 : $Builtin.Word, %79 : $Builtin.Word, %6 : $Builtin.Int8) // user: %85
  %82 = integer_literal $Builtin.Int32, 0         // user: %83
  %83 = struct $UInt32 (%82 : $Builtin.Int32)     // user: %85
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %84 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %85
  %85 = apply %84(%81, %75, %57, %77, %83) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %86

bb8:                                              // Preds: bb4
  %87 = integer_literal $Builtin.Int64, 643       // user: %88
  %88 = struct $UInt (%87 : $Builtin.Int64)       // user: %96
  %89 = string_literal utf8 "Fatal error"         // user: %91
  %90 = integer_literal $Builtin.Word, 11         // user: %92
  %91 = builtin "ptrtoint_Word"(%89 : $Builtin.RawPointer) : $Builtin.Word // user: %92
  %92 = struct $StaticString (%91 : $Builtin.Word, %90 : $Builtin.Word, %6 : $Builtin.Int8) // user: %96
  %93 = integer_literal $Builtin.Int32, 0         // user: %94
  %94 = struct $UInt32 (%93 : $Builtin.Int32)     // user: %96
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %95 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %96
  %96 = apply %95(%92, %11, %57, %88, %94) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %97

bb9:                                              // Preds: bb3
  %98 = integer_literal $Builtin.Int64, 780       // user: %99
  %99 = struct $UInt (%98 : $Builtin.Int64)       // user: %107
  %100 = string_literal utf8 "Fatal error"        // user: %102
  %101 = integer_literal $Builtin.Word, 11        // user: %103
  %102 = builtin "ptrtoint_Word"(%100 : $Builtin.RawPointer) : $Builtin.Word // user: %103
  %103 = struct $StaticString (%102 : $Builtin.Word, %101 : $Builtin.Word, %6 : $Builtin.Int8) // user: %107
  %104 = integer_literal $Builtin.Int32, 0        // user: %105
  %105 = struct $UInt32 (%104 : $Builtin.Int32)   // user: %107
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %106 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %107
  %107 = apply %106(%103, %11, %7, %99, %105) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %108

bb10:                                             // Preds: bb2
  %109 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %111
  %110 = integer_literal $Builtin.Word, 24        // user: %112
  %111 = builtin "ptrtoint_Word"(%109 : $Builtin.RawPointer) : $Builtin.Word // user: %112
  %112 = struct $StaticString (%111 : $Builtin.Word, %110 : $Builtin.Word, %6 : $Builtin.Int8) // user: %122
  %113 = integer_literal $Builtin.Int64, 15505    // user: %114
  %114 = struct $UInt (%113 : $Builtin.Int64)     // user: %122
  %115 = string_literal utf8 "Fatal error"        // user: %117
  %116 = integer_literal $Builtin.Word, 11        // user: %118
  %117 = builtin "ptrtoint_Word"(%115 : $Builtin.RawPointer) : $Builtin.Word // user: %118
  %118 = struct $StaticString (%117 : $Builtin.Word, %116 : $Builtin.Word, %6 : $Builtin.Int8) // user: %122
  %119 = integer_literal $Builtin.Int32, 0        // user: %120
  %120 = struct $UInt32 (%119 : $Builtin.Int32)   // user: %122
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %121 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %122
  %122 = apply %121(%118, %11, %112, %114, %120) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %123
} // end sil function '$ss15ContiguousArrayV37_appendElementAssumeUniqueAndCapacity_03newD0ySi_xntF'

// ContiguousArray._reserveCapacityImpl(minimumCapacity:growForAppend:)
sil shared [_specialize exported: true, kind: full, where  @_noMetadata Element : _Class] @$ss15ContiguousArrayV20_reserveCapacityImpl07minimumD013growForAppendySi_SbtF : $@convention(method) <Element> (Int, Bool, @inout ContiguousArray<Element>) -> () {
[%2: read v**, write v**, copy v**, destroy v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // users: %46, %41, %69, %21
// %1                                             // user: %50
// %2                                             // users: %10, %50, %3
bb0(%0 : $Int, %1 : $Bool, %2 : $*ContiguousArray<Element>):
  %3 = struct_element_addr %2 : $*ContiguousArray<Element>, #ContiguousArray._buffer // user: %4
  %4 = struct_element_addr %3 : $*_ContiguousArrayBuffer<Element>, #_ContiguousArrayBuffer._storage // users: %61, %5, %77
  %5 = load %4 : $*__ContiguousArrayStorageBase   // user: %6
  (%6, %7) = begin_cow_mutation %5 : $__ContiguousArrayStorageBase // users: %11, %30, %14, %8
  %8 = struct $_ContiguousArrayBuffer<Element> (%7 : $__ContiguousArrayStorageBase) // user: %9
  %9 = struct $ContiguousArray<Element> (%8 : $_ContiguousArrayBuffer<Element>) // user: %10
  store %9 to %2 : $*ContiguousArray<Element>     // id: %10
  cond_br %6, bb2, bb1                            // id: %11

bb1:                                              // Preds: bb0
  %12 = integer_literal $Builtin.Int1, 0          // user: %13
  br bb5(%12 : $Builtin.Int1)                     // id: %13

bb2:                                              // Preds: bb0
  %14 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %15
  %15 = struct_element_addr %14 : $*_ArrayBody, #_ArrayBody._storage // user: %16
  %16 = struct_element_addr %15 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage._capacityAndFlags // user: %17
  %17 = struct_element_addr %16 : $*UInt, #UInt._value // user: %18
  %18 = load %17 : $*Builtin.Int64                // user: %20
  %19 = integer_literal $Builtin.Int64, 1         // user: %20
  %20 = builtin "lshr_Int64"(%18 : $Builtin.Int64, %19 : $Builtin.Int64) : $Builtin.Int64 // user: %22
  %21 = struct_extract %0 : $Int, #Int._value     // user: %22
  %22 = builtin "cmp_slt_Int64"(%20 : $Builtin.Int64, %21 : $Builtin.Int64) : $Builtin.Int1 // user: %24
  %23 = integer_literal $Builtin.Int1, 0          // user: %24
  %24 = builtin "int_expect_Int1"(%22 : $Builtin.Int1, %23 : $Builtin.Int1) : $Builtin.Int1 // user: %25
  cond_br %24, bb4, bb3                           // id: %25

bb3:                                              // Preds: bb2
  br bb10                                         // id: %26

bb4:                                              // Preds: bb2
  %27 = integer_literal $Builtin.Int1, -1         // user: %28
  br bb5(%27 : $Builtin.Int1)                     // id: %28

// %29                                            // user: %48
bb5(%29 : $Builtin.Int1):                         // Preds: bb1 bb4
  %30 = ref_element_addr %7 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %31
  %31 = struct_element_addr %30 : $*_ArrayBody, #_ArrayBody._storage // user: %32
  %32 = struct_element_addr %31 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %33
  %33 = struct_element_addr %32 : $*Int, #Int._value // user: %34
  %34 = load %33 : $*Builtin.Int64                // users: %36, %40
  %35 = integer_literal $Builtin.Int64, 0         // user: %36
  %36 = builtin "cmp_slt_Int64"(%34 : $Builtin.Int64, %35 : $Builtin.Int64) : $Builtin.Int1 // user: %38
  %37 = integer_literal $Builtin.Int1, 0          // user: %38
  %38 = builtin "int_expect_Int1"(%36 : $Builtin.Int1, %37 : $Builtin.Int1) : $Builtin.Int1 // user: %39
  cond_br %38, bb18, bb6                          // id: %39

bb6:                                              // Preds: bb5
  %40 = builtin "assumeNonNegative_Int64"(%34 : $Builtin.Int64) : $Builtin.Int64 // users: %44, %42
  %41 = struct_extract %0 : $Int, #Int._value     // user: %42
  %42 = builtin "cmp_slt_Int64"(%40 : $Builtin.Int64, %41 : $Builtin.Int64) : $Builtin.Int1 // user: %43
  cond_br %42, bb8, bb7                           // id: %43

bb7:                                              // Preds: bb6
  %44 = struct $Int (%40 : $Builtin.Int64)        // user: %45
  br bb9(%44 : $Int)                              // id: %45

bb8:                                              // Preds: bb6
  br bb9(%0 : $Int)                               // id: %46

// %47                                            // user: %50
bb9(%47 : $Int):                                  // Preds: bb8 bb7
  %48 = struct $Bool (%29 : $Builtin.Int1)        // user: %50
  // function_ref ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)
  %49 = function_ref @$ss15ContiguousArrayV16_createNewBuffer14bufferIsUnique15minimumCapacity13growForAppendySb_SiSbtF : $@convention(method) <τ_0_0> (Bool, Int, Bool, @inout ContiguousArray<τ_0_0>) -> () // user: %50
  %50 = apply %49<Element>(%48, %47, %1, %2) : $@convention(method) <τ_0_0> (Bool, Int, Bool, @inout ContiguousArray<τ_0_0>) -> ()
  br bb10                                         // id: %51

bb10:                                             // Preds: bb9 bb3
  %52 = string_literal utf8 "Swift/ContiguousArray.swift" // user: %54
  %53 = integer_literal $Builtin.Word, 27         // user: %56
  %54 = builtin "ptrtoint_Word"(%52 : $Builtin.RawPointer) : $Builtin.Word // user: %56
  %55 = integer_literal $Builtin.Int8, 2          // users: %101, %86, %60, %56
  %56 = struct $StaticString (%54 : $Builtin.Word, %53 : $Builtin.Word, %55 : $Builtin.Int8) // users: %105, %90
  %57 = string_literal utf8 ""                    // user: %59
  %58 = integer_literal $Builtin.Word, 0          // user: %60
  %59 = builtin "ptrtoint_Word"(%57 : $Builtin.RawPointer) : $Builtin.Word // user: %60
  %60 = struct $StaticString (%59 : $Builtin.Word, %58 : $Builtin.Word, %55 : $Builtin.Int8) // users: %105, %90
  %61 = load %4 : $*__ContiguousArrayStorageBase  // user: %62
  %62 = ref_element_addr %61 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %63
  %63 = struct_element_addr %62 : $*_ArrayBody, #_ArrayBody._storage // user: %64
  %64 = struct_element_addr %63 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage._capacityAndFlags // user: %65
  %65 = struct_element_addr %64 : $*UInt, #UInt._value // user: %66
  %66 = load %65 : $*Builtin.Int64                // user: %68
  %67 = integer_literal $Builtin.Int64, 1         // user: %68
  %68 = builtin "lshr_Int64"(%66 : $Builtin.Int64, %67 : $Builtin.Int64) : $Builtin.Int64 // users: %75, %70
  %69 = struct_extract %0 : $Int, #Int._value     // user: %70
  %70 = builtin "cmp_slt_Int64"(%68 : $Builtin.Int64, %69 : $Builtin.Int64) : $Builtin.Int1 // user: %72
  %71 = integer_literal $Builtin.Int1, 0          // user: %72
  %72 = builtin "int_expect_Int1"(%70 : $Builtin.Int1, %71 : $Builtin.Int1) : $Builtin.Int1 // user: %73
  cond_br %72, bb17, bb11                         // id: %73

bb11:                                             // Preds: bb10
  %74 = integer_literal $Builtin.Int64, 0         // user: %75
  %75 = builtin "cmp_eq_Int64"(%68 : $Builtin.Int64, %74 : $Builtin.Int64) : $Builtin.Int1 // user: %76
  cond_br %75, bb15, bb12                         // id: %76

bb12:                                             // Preds: bb11
  %77 = is_unique %4 : $*__ContiguousArrayStorageBase // user: %79
  %78 = integer_literal $Builtin.Int1, -1         // user: %79
  %79 = builtin "int_expect_Int1"(%77 : $Builtin.Int1, %78 : $Builtin.Int1) : $Builtin.Int1 // user: %80
  cond_br %79, bb14, bb13                         // id: %80

bb13:                                             // Preds: bb12
  %81 = integer_literal $Builtin.Int64, 706       // user: %82
  %82 = struct $UInt (%81 : $Builtin.Int64)       // user: %90
  %83 = string_literal utf8 "Fatal error"         // user: %85
  %84 = integer_literal $Builtin.Word, 11         // user: %86
  %85 = builtin "ptrtoint_Word"(%83 : $Builtin.RawPointer) : $Builtin.Word // user: %86
  %86 = struct $StaticString (%85 : $Builtin.Word, %84 : $Builtin.Word, %55 : $Builtin.Int8) // user: %90
  %87 = integer_literal $Builtin.Int32, 0         // user: %88
  %88 = struct $UInt32 (%87 : $Builtin.Int32)     // user: %90
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %89 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %90
  %90 = apply %89(%86, %60, %56, %82, %88) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %91

bb14:                                             // Preds: bb12
  br bb16                                         // id: %92

bb15:                                             // Preds: bb11
  br bb16                                         // id: %93

bb16:                                             // Preds: bb15 bb14
  %94 = tuple ()                                  // user: %95
  return %94 : $()                                // id: %95

bb17:                                             // Preds: bb10
  %96 = integer_literal $Builtin.Int64, 705       // user: %97
  %97 = struct $UInt (%96 : $Builtin.Int64)       // user: %105
  %98 = string_literal utf8 "Fatal error"         // user: %100
  %99 = integer_literal $Builtin.Word, 11         // user: %101
  %100 = builtin "ptrtoint_Word"(%98 : $Builtin.RawPointer) : $Builtin.Word // user: %101
  %101 = struct $StaticString (%100 : $Builtin.Word, %99 : $Builtin.Word, %55 : $Builtin.Int8) // user: %105
  %102 = integer_literal $Builtin.Int32, 0        // user: %103
  %103 = struct $UInt32 (%102 : $Builtin.Int32)   // user: %105
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %104 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %105
  %105 = apply %104(%101, %60, %56, %97, %103) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %106

bb18:                                             // Preds: bb5
  %107 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %109
  %108 = integer_literal $Builtin.Word, 24        // user: %111
  %109 = builtin "ptrtoint_Word"(%107 : $Builtin.RawPointer) : $Builtin.Word // user: %111
  %110 = integer_literal $Builtin.Int8, 2         // users: %121, %117, %111
  %111 = struct $StaticString (%109 : $Builtin.Word, %108 : $Builtin.Word, %110 : $Builtin.Int8) // user: %125
  %112 = integer_literal $Builtin.Int64, 15505    // user: %113
  %113 = struct $UInt (%112 : $Builtin.Int64)     // user: %125
  %114 = string_literal utf8 ""                   // user: %116
  %115 = integer_literal $Builtin.Word, 0         // user: %117
  %116 = builtin "ptrtoint_Word"(%114 : $Builtin.RawPointer) : $Builtin.Word // user: %117
  %117 = struct $StaticString (%116 : $Builtin.Word, %115 : $Builtin.Word, %110 : $Builtin.Int8) // user: %125
  %118 = string_literal utf8 "Fatal error"        // user: %120
  %119 = integer_literal $Builtin.Word, 11        // user: %121
  %120 = builtin "ptrtoint_Word"(%118 : $Builtin.RawPointer) : $Builtin.Word // user: %121
  %121 = struct $StaticString (%120 : $Builtin.Word, %119 : $Builtin.Word, %110 : $Builtin.Int8) // user: %125
  %122 = integer_literal $Builtin.Int32, 0        // user: %123
  %123 = struct $UInt32 (%122 : $Builtin.Int32)   // user: %125
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %124 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %125
  %125 = apply %124(%121, %117, %111, %113, %123) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %126
} // end sil function '$ss15ContiguousArrayV20_reserveCapacityImpl07minimumD013growForAppendySi_SbtF'

// ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)
sil public_external [_semantics "array.mutate_unknown"] [_specialize exported: true, kind: full, where  @_noMetadata Element : _Class] @$ss15ContiguousArrayV36_reserveCapacityAssumingUniqueBuffer8oldCountySi_tF : $@convention(method) <Element> (Int, @inout ContiguousArray<Element>) -> () {
// %0                                             // user: %41
// %1                                             // users: %55, %2
bb0(%0 : $Int, %1 : $*ContiguousArray<Element>):
  %2 = struct_element_addr %1 : $*ContiguousArray<Element>, #ContiguousArray._buffer // user: %3
  %3 = struct_element_addr %2 : $*_ContiguousArrayBuffer<Element>, #_ContiguousArrayBuffer._storage // users: %4, %15
  %4 = load %3 : $*__ContiguousArrayStorageBase   // user: %5
  %5 = ref_element_addr %4 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %6
  %6 = struct_element_addr %5 : $*_ArrayBody, #_ArrayBody._storage // user: %7
  %7 = struct_element_addr %6 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage._capacityAndFlags // user: %8
  %8 = struct_element_addr %7 : $*UInt, #UInt._value // user: %9
  %9 = load %8 : $*Builtin.Int64                  // user: %11
  %10 = integer_literal $Builtin.Int64, 1         // users: %43, %11
  %11 = builtin "lshr_Int64"(%9 : $Builtin.Int64, %10 : $Builtin.Int64) : $Builtin.Int64 // users: %49, %45, %13
  %12 = integer_literal $Builtin.Int64, 0         // users: %49, %13
  %13 = builtin "cmp_eq_Int64"(%11 : $Builtin.Int64, %12 : $Builtin.Int64) : $Builtin.Int1 // user: %14
  cond_br %13, bb4, bb1                           // id: %14

bb1:                                              // Preds: bb0
  %15 = is_unique %3 : $*__ContiguousArrayStorageBase // user: %17
  %16 = integer_literal $Builtin.Int1, -1         // user: %17
  %17 = builtin "int_expect_Int1"(%15 : $Builtin.Int1, %16 : $Builtin.Int1) : $Builtin.Int1 // user: %18
  cond_br %17, bb3, bb2                           // id: %18

bb2:                                              // Preds: bb1
  %19 = string_literal utf8 "Swift/ContiguousArray.swift" // user: %21
  %20 = integer_literal $Builtin.Word, 27         // user: %23
  %21 = builtin "ptrtoint_Word"(%19 : $Builtin.RawPointer) : $Builtin.Word // user: %23
  %22 = integer_literal $Builtin.Int8, 2          // users: %33, %29, %23
  %23 = struct $StaticString (%21 : $Builtin.Word, %20 : $Builtin.Word, %22 : $Builtin.Int8) // user: %37
  %24 = integer_literal $Builtin.Int64, 764       // user: %25
  %25 = struct $UInt (%24 : $Builtin.Int64)       // user: %37
  %26 = string_literal utf8 ""                    // user: %28
  %27 = integer_literal $Builtin.Word, 0          // user: %29
  %28 = builtin "ptrtoint_Word"(%26 : $Builtin.RawPointer) : $Builtin.Word // user: %29
  %29 = struct $StaticString (%28 : $Builtin.Word, %27 : $Builtin.Word, %22 : $Builtin.Int8) // user: %37
  %30 = string_literal utf8 "Fatal error"         // user: %32
  %31 = integer_literal $Builtin.Word, 11         // user: %33
  %32 = builtin "ptrtoint_Word"(%30 : $Builtin.RawPointer) : $Builtin.Word // user: %33
  %33 = struct $StaticString (%32 : $Builtin.Word, %31 : $Builtin.Word, %22 : $Builtin.Int8) // user: %37
  %34 = integer_literal $Builtin.Int32, 0         // user: %35
  %35 = struct $UInt32 (%34 : $Builtin.Int32)     // user: %37
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %36 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %37
  %37 = apply %36(%33, %29, %23, %25, %35) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %38

bb3:                                              // Preds: bb1
  br bb5                                          // id: %39

bb4:                                              // Preds: bb0
  br bb5                                          // id: %40

bb5:                                              // Preds: bb4 bb3
  %41 = struct_extract %0 : $Int, #Int._value     // user: %43
  %42 = integer_literal $Builtin.Int1, 0          // users: %46, %43
  %43 = builtin "sadd_with_overflow_Int64"(%41 : $Builtin.Int64, %10 : $Builtin.Int64, %42 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // user: %44
  %44 = tuple_extract %43 : $(Builtin.Int64, Builtin.Int1), 0 // users: %51, %45
  %45 = builtin "cmp_slt_Int64"(%11 : $Builtin.Int64, %44 : $Builtin.Int64) : $Builtin.Int1 // user: %46
  %46 = builtin "int_expect_Int1"(%45 : $Builtin.Int1, %42 : $Builtin.Int1) : $Builtin.Int1 // user: %47
  cond_br %46, bb7, bb6                           // id: %47

bb6:                                              // Preds: bb5
  br bb8                                          // id: %48

bb7:                                              // Preds: bb5
  %49 = builtin "cmp_slt_Int64"(%12 : $Builtin.Int64, %11 : $Builtin.Int64) : $Builtin.Int1 // user: %50
  %50 = struct $Bool (%49 : $Builtin.Int1)        // user: %55
  %51 = struct $Int (%44 : $Builtin.Int64)        // user: %55
  %52 = integer_literal $Builtin.Int1, -1         // user: %53
  %53 = struct $Bool (%52 : $Builtin.Int1)        // user: %55
  // function_ref ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)
  %54 = function_ref @$ss15ContiguousArrayV16_createNewBuffer14bufferIsUnique15minimumCapacity13growForAppendySb_SiSbtF : $@convention(method) <τ_0_0> (Bool, Int, Bool, @inout ContiguousArray<τ_0_0>) -> () // user: %55
  %55 = apply %54<Element>(%50, %51, %53, %1) : $@convention(method) <τ_0_0> (Bool, Int, Bool, @inout ContiguousArray<τ_0_0>) -> ()
  br bb8                                          // id: %56

bb8:                                              // Preds: bb7 bb6
  %57 = tuple ()                                  // user: %58
  return %57 : $()                                // id: %58
} // end sil function '$ss15ContiguousArrayV36_reserveCapacityAssumingUniqueBuffer8oldCountySi_tF'

// ContiguousArray.reserveCapacity(_:)
sil public_external [_semantics "array.mutate_unknown"] [_specialize exported: true, kind: full, where  @_noMetadata Element : _Class] @$ss15ContiguousArrayV15reserveCapacityyySiF : $@convention(method) <Element> (Int, @inout ContiguousArray<Element>) -> () {
// %0                                             // users: %49, %44, %71, %28
// %1                                             // users: %11, %96, %52, %4
bb0(%0 : $Int, %1 : $*ContiguousArray<Element>):
  %2 = integer_literal $Builtin.Int1, 0           // users: %73, %41, %30, %3
  %3 = struct $Bool (%2 : $Builtin.Int1)          // users: %52, %13
  %4 = struct_element_addr %1 : $*ContiguousArray<Element>, #ContiguousArray._buffer // user: %5
  %5 = struct_element_addr %4 : $*_ContiguousArrayBuffer<Element>, #_ContiguousArrayBuffer._storage // users: %63, %6, %78
  %6 = load %5 : $*__ContiguousArrayStorageBase   // user: %7
  (%7, %8) = begin_cow_mutation %6 : $__ContiguousArrayStorageBase // users: %12, %34, %21, %9
  %9 = struct $_ContiguousArrayBuffer<Element> (%8 : $__ContiguousArrayStorageBase) // user: %10
  %10 = struct $ContiguousArray<Element> (%9 : $_ContiguousArrayBuffer<Element>) // user: %11
  store %10 to %1 : $*ContiguousArray<Element>    // id: %11
  cond_br %7, bb2, bb1                            // id: %12

bb1:                                              // Preds: bb0
  br bb3(%3 : $Bool)                              // id: %13

bb2:                                              // Preds: bb0
  %14 = integer_literal $Builtin.Int1, -1         // user: %15
  %15 = struct $Bool (%14 : $Builtin.Int1)        // user: %16
  br bb3(%15 : $Bool)                             // id: %16

// %17                                            // users: %52, %18
bb3(%17 : $Bool):                                 // Preds: bb2 bb1
  %18 = struct_extract %17 : $Bool, #Bool._value  // user: %19
  cond_br %18, bb5, bb4                           // id: %19

bb4:                                              // Preds: bb3
  br bb8                                          // id: %20

bb5:                                              // Preds: bb3
  %21 = ref_element_addr %8 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %22
  %22 = struct_element_addr %21 : $*_ArrayBody, #_ArrayBody._storage // user: %23
  %23 = struct_element_addr %22 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage._capacityAndFlags // user: %24
  %24 = struct_element_addr %23 : $*UInt, #UInt._value // user: %25
  %25 = load %24 : $*Builtin.Int64                // user: %27
  %26 = integer_literal $Builtin.Int64, 1         // user: %27
  %27 = builtin "lshr_Int64"(%25 : $Builtin.Int64, %26 : $Builtin.Int64) : $Builtin.Int64 // user: %29
  %28 = struct_extract %0 : $Int, #Int._value     // user: %29
  %29 = builtin "cmp_slt_Int64"(%27 : $Builtin.Int64, %28 : $Builtin.Int64) : $Builtin.Int1 // user: %30
  %30 = builtin "int_expect_Int1"(%29 : $Builtin.Int1, %2 : $Builtin.Int1) : $Builtin.Int1 // user: %31
  cond_br %30, bb7, bb6                           // id: %31

bb6:                                              // Preds: bb5
  br bb13                                         // id: %32

bb7:                                              // Preds: bb5
  br bb8                                          // id: %33

bb8:                                              // Preds: bb7 bb4
  %34 = ref_element_addr %8 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %35
  %35 = struct_element_addr %34 : $*_ArrayBody, #_ArrayBody._storage // user: %36
  %36 = struct_element_addr %35 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %37
  %37 = struct_element_addr %36 : $*Int, #Int._value // user: %38
  %38 = load %37 : $*Builtin.Int64                // users: %40, %43
  %39 = integer_literal $Builtin.Int64, 0         // user: %40
  %40 = builtin "cmp_slt_Int64"(%38 : $Builtin.Int64, %39 : $Builtin.Int64) : $Builtin.Int1 // user: %41
  %41 = builtin "int_expect_Int1"(%40 : $Builtin.Int1, %2 : $Builtin.Int1) : $Builtin.Int1 // user: %42
  cond_br %41, bb21, bb9                          // id: %42

bb9:                                              // Preds: bb8
  %43 = builtin "assumeNonNegative_Int64"(%38 : $Builtin.Int64) : $Builtin.Int64 // users: %47, %45
  %44 = struct_extract %0 : $Int, #Int._value     // user: %45
  %45 = builtin "cmp_slt_Int64"(%43 : $Builtin.Int64, %44 : $Builtin.Int64) : $Builtin.Int1 // user: %46
  cond_br %45, bb11, bb10                         // id: %46

bb10:                                             // Preds: bb9
  %47 = struct $Int (%43 : $Builtin.Int64)        // user: %48
  br bb12(%47 : $Int)                             // id: %48

bb11:                                             // Preds: bb9
  br bb12(%0 : $Int)                              // id: %49

// %50                                            // user: %52
bb12(%50 : $Int):                                 // Preds: bb11 bb10
  // function_ref ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)
  %51 = function_ref @$ss15ContiguousArrayV16_createNewBuffer14bufferIsUnique15minimumCapacity13growForAppendySb_SiSbtF : $@convention(method) <τ_0_0> (Bool, Int, Bool, @inout ContiguousArray<τ_0_0>) -> () // user: %52
  %52 = apply %51<Element>(%17, %50, %3, %1) : $@convention(method) <τ_0_0> (Bool, Int, Bool, @inout ContiguousArray<τ_0_0>) -> ()
  br bb13                                         // id: %53

bb13:                                             // Preds: bb12 bb6
  %54 = string_literal utf8 "Swift/ContiguousArray.swift" // user: %56
  %55 = integer_literal $Builtin.Word, 27         // user: %58
  %56 = builtin "ptrtoint_Word"(%54 : $Builtin.RawPointer) : $Builtin.Word // user: %58
  %57 = integer_literal $Builtin.Int8, 2          // users: %104, %87, %62, %58
  %58 = struct $StaticString (%56 : $Builtin.Word, %55 : $Builtin.Word, %57 : $Builtin.Int8) // users: %108, %91
  %59 = string_literal utf8 ""                    // user: %61
  %60 = integer_literal $Builtin.Word, 0          // user: %62
  %61 = builtin "ptrtoint_Word"(%59 : $Builtin.RawPointer) : $Builtin.Word // user: %62
  %62 = struct $StaticString (%61 : $Builtin.Word, %60 : $Builtin.Word, %57 : $Builtin.Int8) // users: %108, %91
  %63 = load %5 : $*__ContiguousArrayStorageBase  // user: %64
  %64 = ref_element_addr %63 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %65
  %65 = struct_element_addr %64 : $*_ArrayBody, #_ArrayBody._storage // user: %66
  %66 = struct_element_addr %65 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage._capacityAndFlags // user: %67
  %67 = struct_element_addr %66 : $*UInt, #UInt._value // user: %68
  %68 = load %67 : $*Builtin.Int64                // user: %70
  %69 = integer_literal $Builtin.Int64, 1         // user: %70
  %70 = builtin "lshr_Int64"(%68 : $Builtin.Int64, %69 : $Builtin.Int64) : $Builtin.Int64 // users: %76, %72
  %71 = struct_extract %0 : $Int, #Int._value     // user: %72
  %72 = builtin "cmp_slt_Int64"(%70 : $Builtin.Int64, %71 : $Builtin.Int64) : $Builtin.Int1 // user: %73
  %73 = builtin "int_expect_Int1"(%72 : $Builtin.Int1, %2 : $Builtin.Int1) : $Builtin.Int1 // user: %74
  cond_br %73, bb20, bb14                         // id: %74

bb14:                                             // Preds: bb13
  %75 = integer_literal $Builtin.Int64, 0         // user: %76
  %76 = builtin "cmp_eq_Int64"(%70 : $Builtin.Int64, %75 : $Builtin.Int64) : $Builtin.Int1 // user: %77
  cond_br %76, bb18, bb15                         // id: %77

bb15:                                             // Preds: bb14
  %78 = is_unique %5 : $*__ContiguousArrayStorageBase // user: %80
  %79 = integer_literal $Builtin.Int1, -1         // user: %80
  %80 = builtin "int_expect_Int1"(%78 : $Builtin.Int1, %79 : $Builtin.Int1) : $Builtin.Int1 // user: %81
  cond_br %80, bb17, bb16                         // id: %81

bb16:                                             // Preds: bb15
  %82 = integer_literal $Builtin.Int64, 706       // user: %83
  %83 = struct $UInt (%82 : $Builtin.Int64)       // user: %91
  %84 = string_literal utf8 "Fatal error"         // user: %86
  %85 = integer_literal $Builtin.Word, 11         // user: %87
  %86 = builtin "ptrtoint_Word"(%84 : $Builtin.RawPointer) : $Builtin.Word // user: %87
  %87 = struct $StaticString (%86 : $Builtin.Word, %85 : $Builtin.Word, %57 : $Builtin.Int8) // user: %91
  %88 = integer_literal $Builtin.Int32, 0         // user: %89
  %89 = struct $UInt32 (%88 : $Builtin.Int32)     // user: %91
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %90 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %91
  %91 = apply %90(%87, %62, %58, %83, %89) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %92

bb17:                                             // Preds: bb15
  br bb19                                         // id: %93

bb18:                                             // Preds: bb14
  br bb19                                         // id: %94

bb19:                                             // Preds: bb18 bb17
  // function_ref ContiguousArray._endMutation()
  %95 = function_ref @$ss15ContiguousArrayV12_endMutationyyF : $@convention(method) <τ_0_0> (@inout ContiguousArray<τ_0_0>) -> () // user: %96
  %96 = apply %95<Element>(%1) : $@convention(method) <τ_0_0> (@inout ContiguousArray<τ_0_0>) -> ()
  %97 = tuple ()                                  // user: %98
  return %97 : $()                                // id: %98

bb20:                                             // Preds: bb13
  %99 = integer_literal $Builtin.Int64, 705       // user: %100
  %100 = struct $UInt (%99 : $Builtin.Int64)      // user: %108
  %101 = string_literal utf8 "Fatal error"        // user: %103
  %102 = integer_literal $Builtin.Word, 11        // user: %104
  %103 = builtin "ptrtoint_Word"(%101 : $Builtin.RawPointer) : $Builtin.Word // user: %104
  %104 = struct $StaticString (%103 : $Builtin.Word, %102 : $Builtin.Word, %57 : $Builtin.Int8) // user: %108
  %105 = integer_literal $Builtin.Int32, 0        // user: %106
  %106 = struct $UInt32 (%105 : $Builtin.Int32)   // user: %108
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %107 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %108
  %108 = apply %107(%104, %62, %58, %100, %106) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %109

bb21:                                             // Preds: bb8
  %110 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %112
  %111 = integer_literal $Builtin.Word, 24        // user: %114
  %112 = builtin "ptrtoint_Word"(%110 : $Builtin.RawPointer) : $Builtin.Word // user: %114
  %113 = integer_literal $Builtin.Int8, 2         // users: %124, %120, %114
  %114 = struct $StaticString (%112 : $Builtin.Word, %111 : $Builtin.Word, %113 : $Builtin.Int8) // user: %128
  %115 = integer_literal $Builtin.Int64, 15505    // user: %116
  %116 = struct $UInt (%115 : $Builtin.Int64)     // user: %128
  %117 = string_literal utf8 ""                   // user: %119
  %118 = integer_literal $Builtin.Word, 0         // user: %120
  %119 = builtin "ptrtoint_Word"(%117 : $Builtin.RawPointer) : $Builtin.Word // user: %120
  %120 = struct $StaticString (%119 : $Builtin.Word, %118 : $Builtin.Word, %113 : $Builtin.Int8) // user: %128
  %121 = string_literal utf8 "Fatal error"        // user: %123
  %122 = integer_literal $Builtin.Word, 11        // user: %124
  %123 = builtin "ptrtoint_Word"(%121 : $Builtin.RawPointer) : $Builtin.Word // user: %124
  %124 = struct $StaticString (%123 : $Builtin.Word, %122 : $Builtin.Word, %113 : $Builtin.Int8) // user: %128
  %125 = integer_literal $Builtin.Int32, 0        // user: %126
  %126 = struct $UInt32 (%125 : $Builtin.Int32)   // user: %128
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %127 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %128
  %128 = apply %127(%124, %120, %114, %116, %126) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %129
} // end sil function '$ss15ContiguousArrayV15reserveCapacityyySiF'

// _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)
sil shared [noinline] [_semantics "optimize.sil.specialize.owned2guarantee.never"] [_specialize exported: true, kind: full, where  @_noMetadata Element : _Class] @$ss22_ContiguousArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtF : $@convention(method) <Element> (Bool, Int, Bool, @owned _ContiguousArrayBuffer<Element>) -> @owned _ContiguousArrayBuffer<Element> {
[%3: noescape v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // user: %149
// %1                                             // users: %13, %16
// %2                                             // user: %11
// %3                                             // users: %158, %175, %157, %4
bb0(%0 : $Bool, %1 : $Int, %2 : $Bool, %3 : $_ContiguousArrayBuffer<Element>):
  %4 = struct_extract %3 : $_ContiguousArrayBuffer<Element>, #_ContiguousArrayBuffer._storage // users: %163, %5
  %5 = ref_element_addr %4 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %6
  %6 = struct_element_addr %5 : $*_ArrayBody, #_ArrayBody._storage // users: %31, %7
  %7 = struct_element_addr %6 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage._capacityAndFlags // user: %8
  %8 = struct_element_addr %7 : $*UInt, #UInt._value // users: %168, %9
  %9 = load %8 : $*Builtin.Int64                  // user: %15
  %10 = integer_literal $Builtin.Int64, 1         // users: %169, %121, %68, %15
  %11 = struct_extract %2 : $Bool, #Bool._value   // user: %12
  cond_br %11, bb2, bb1                           // id: %12

bb1:                                              // Preds: bb0
  %13 = struct_extract %1 : $Int, #Int._value     // user: %14
  br bb7(%13 : $Builtin.Int64)                    // id: %14

bb2:                                              // Preds: bb0
  %15 = builtin "lshr_Int64"(%9 : $Builtin.Int64, %10 : $Builtin.Int64) : $Builtin.Int64 // users: %19, %22, %17
  %16 = struct_extract %1 : $Int, #Int._value     // users: %29, %26, %17
  %17 = builtin "cmp_slt_Int64"(%15 : $Builtin.Int64, %16 : $Builtin.Int64) : $Builtin.Int1 // user: %18
  cond_br %17, bb4, bb3                           // id: %18

bb3:                                              // Preds: bb2
  br bb7(%15 : $Builtin.Int64)                    // id: %19

bb4:                                              // Preds: bb2
  %20 = integer_literal $Builtin.Int64, 2         // user: %22
  %21 = integer_literal $Builtin.Int1, -1         // user: %22
  %22 = builtin "smul_with_overflow_Int64"(%15 : $Builtin.Int64, %20 : $Builtin.Int64, %21 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %24, %23
  %23 = tuple_extract %22 : $(Builtin.Int64, Builtin.Int1), 0 // users: %28, %26
  %24 = tuple_extract %22 : $(Builtin.Int64, Builtin.Int1), 1 // user: %25
  cond_fail %24 : $Builtin.Int1, "arithmetic overflow" // id: %25
  %26 = builtin "cmp_slt_Int64"(%23 : $Builtin.Int64, %16 : $Builtin.Int64) : $Builtin.Int1 // user: %27
  cond_br %26, bb6, bb5                           // id: %27

bb5:                                              // Preds: bb4
  br bb7(%23 : $Builtin.Int64)                    // id: %28

bb6:                                              // Preds: bb4
  br bb7(%16 : $Builtin.Int64)                    // id: %29

// %30                                            // users: %68, %65, %58, %53, %49
bb7(%30 : $Builtin.Int64):                        // Preds: bb6 bb5 bb3 bb1
  %31 = struct_element_addr %6 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // users: %174, %32
  %32 = struct_element_addr %31 : $*Int, #Int._value // user: %33
  %33 = load %32 : $*Builtin.Int64                // users: %40, %44
  %34 = integer_literal $Builtin.Int8, 2          // users: %214, %199, %188, %182, %137, %131, %84, %78, %48, %38, %208
  %35 = string_literal utf8 ""                    // user: %37
  %36 = integer_literal $Builtin.Word, 0          // user: %38
  %37 = builtin "ptrtoint_Word"(%35 : $Builtin.RawPointer) : $Builtin.Word // user: %38
  %38 = struct $StaticString (%37 : $Builtin.Word, %36 : $Builtin.Word, %34 : $Builtin.Int8) // users: %218, %203, %141, %88
  %39 = integer_literal $Builtin.Int64, 0         // users: %170, %173, %151, %118, %105, %65, %53, %40
  %40 = builtin "cmp_slt_Int64"(%33 : $Builtin.Int64, %39 : $Builtin.Int64) : $Builtin.Int1 // user: %42
  %41 = integer_literal $Builtin.Int1, 0          // users: %171, %119, %114, %106, %66, %50, %42
  %42 = builtin "int_expect_Int1"(%40 : $Builtin.Int1, %41 : $Builtin.Int1) : $Builtin.Int1 // user: %43
  cond_br %42, bb28, bb8                          // id: %43

bb8:                                              // Preds: bb7
  %44 = builtin "assumeNonNegative_Int64"(%33 : $Builtin.Int64) : $Builtin.Int64 // users: %49, %52
  %45 = string_literal utf8 "Swift/ContiguousArrayBuffer.swift" // user: %47
  %46 = integer_literal $Builtin.Word, 33         // user: %48
  %47 = builtin "ptrtoint_Word"(%45 : $Builtin.RawPointer) : $Builtin.Word // user: %48
  %48 = struct $StaticString (%47 : $Builtin.Word, %46 : $Builtin.Word, %34 : $Builtin.Int8) // users: %203, %192
  %49 = builtin "cmp_slt_Int64"(%30 : $Builtin.Int64, %44 : $Builtin.Int64) : $Builtin.Int1 // user: %50
  %50 = builtin "int_expect_Int1"(%49 : $Builtin.Int1, %41 : $Builtin.Int1) : $Builtin.Int1 // user: %51
  cond_br %50, bb27, bb9                          // id: %51

bb9:                                              // Preds: bb8
  %52 = struct $Int (%44 : $Builtin.Int64)        // users: %167, %152, %123, %70
  %53 = builtin "cmp_eq_Int64"(%30 : $Builtin.Int64, %39 : $Builtin.Int64) : $Builtin.Int1 // user: %54
  cond_br %53, bb20, bb10                         // id: %54

bb10:                                             // Preds: bb9
  %55 = metatype $@thick Element.Type             // user: %57
  // function_ref getContiguousArrayStorageType<A>(for:)
  %56 = function_ref @$ss29getContiguousArrayStorageType3fors01_bcD0CyxGmxm_tlF : $@convention(thin) <τ_0_0> (@thick τ_0_0.Type) -> @thick _ContiguousArrayStorage<τ_0_0>.Type // user: %57
  %57 = apply %56<Element>(%55) : $@convention(thin) <τ_0_0> (@thick τ_0_0.Type) -> @thick _ContiguousArrayStorage<τ_0_0>.Type // user: %59
  %58 = builtin "truncOrBitCast_Int64_Word"(%30 : $Builtin.Int64) : $Builtin.Word // user: %59
  %59 = alloc_ref_dynamic [tail_elems $Element * %58 : $Builtin.Word] %57 : $@thick _ContiguousArrayStorage<Element>.Type, $_ContiguousArrayStorage<Element> // user: %60
  %60 = upcast %59 : $_ContiguousArrayStorage<Element> to $__ContiguousArrayStorageBase // users: %72, %97, %125, %127, %74, %90
  // function_ref _swift_stdlib_has_malloc_size
  %61 = function_ref @_swift_stdlib_has_malloc_size : $@convention(c) () -> Bool // user: %62
  %62 = apply %61() : $@convention(c) () -> Bool  // user: %63
  %63 = struct_extract %62 : $Bool, #Bool._value  // user: %64
  cond_br %63, bb14, bb11                         // id: %64

bb11:                                             // Preds: bb10
  %65 = builtin "cmp_slt_Int64"(%30 : $Builtin.Int64, %39 : $Builtin.Int64) : $Builtin.Int1 // user: %66
  %66 = builtin "int_expect_Int1"(%65 : $Builtin.Int1, %41 : $Builtin.Int1) : $Builtin.Int1 // user: %67
  cond_br %66, bb13, bb12                         // id: %67

bb12:                                             // Preds: bb11
  %68 = builtin "shl_Int64"(%30 : $Builtin.Int64, %10 : $Builtin.Int64) : $Builtin.Int64 // user: %69
  %69 = struct $UInt (%68 : $Builtin.Int64)       // user: %70
  %70 = struct $_SwiftArrayBodyStorage (%52 : $Int, %69 : $UInt) // user: %71
  %71 = struct $_ArrayBody (%70 : $_SwiftArrayBodyStorage) // user: %73
  %72 = ref_element_addr %60 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %73
  store %71 to %72 : $*_ArrayBody                 // id: %73
  br bb21(%60 : $__ContiguousArrayStorageBase)    // id: %74

bb13:                                             // Preds: bb11
  %75 = string_literal utf8 "Swift/ArrayBody.swift" // user: %77
  %76 = integer_literal $Builtin.Word, 21         // user: %78
  %77 = builtin "ptrtoint_Word"(%75 : $Builtin.RawPointer) : $Builtin.Word // user: %78
  %78 = struct $StaticString (%77 : $Builtin.Word, %76 : $Builtin.Word, %34 : $Builtin.Int8) // user: %88
  %79 = integer_literal $Builtin.Int64, 31        // user: %80
  %80 = struct $UInt (%79 : $Builtin.Int64)       // user: %88
  %81 = string_literal utf8 "Fatal error"         // user: %83
  %82 = integer_literal $Builtin.Word, 11         // user: %84
  %83 = builtin "ptrtoint_Word"(%81 : $Builtin.RawPointer) : $Builtin.Word // user: %84
  %84 = struct $StaticString (%83 : $Builtin.Word, %82 : $Builtin.Word, %34 : $Builtin.Int8) // user: %88
  %85 = integer_literal $Builtin.Int32, 0         // user: %86
  %86 = struct $UInt32 (%85 : $Builtin.Int32)     // user: %88
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %87 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %88
  %88 = apply %87(%84, %38, %78, %80, %86) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %89

bb14:                                             // Preds: bb10
  %90 = ref_to_raw_pointer %60 : $__ContiguousArrayStorageBase to $Builtin.RawPointer // users: %96, %91
  %91 = struct $UnsafeRawPointer (%90 : $Builtin.RawPointer) // user: %93
  // function_ref _swift_stdlib_malloc_size
  %92 = function_ref @_swift_stdlib_malloc_size : $@convention(c) (UnsafeRawPointer) -> Int // user: %93
  %93 = apply %92(%91) : $@convention(c) (UnsafeRawPointer) -> Int // user: %94
  %94 = struct_extract %93 : $Int, #Int._value    // user: %95
  %95 = builtin "truncOrBitCast_Int64_Word"(%94 : $Builtin.Int64) : $Builtin.Word // user: %96
  %96 = index_raw_pointer %90 : $Builtin.RawPointer, %95 : $Builtin.Word // user: %99
  %97 = ref_tail_addr %60 : $__ContiguousArrayStorageBase, $Element // user: %98
  %98 = address_to_pointer %97 : $*Element to $Builtin.RawPointer // user: %100
  %99 = builtin "ptrtoint_Word"(%96 : $Builtin.RawPointer) : $Builtin.Word // user: %101
  %100 = builtin "ptrtoint_Word"(%98 : $Builtin.RawPointer) : $Builtin.Word // user: %101
  %101 = builtin "sub_Word"(%99 : $Builtin.Word, %100 : $Builtin.Word) : $Builtin.Word // user: %102
  %102 = builtin "sextOrBitCast_Word_Int64"(%101 : $Builtin.Word) : $Builtin.Int64 // users: %117, %109
  %103 = builtin "strideof"<Element>() : $Builtin.Word // user: %104
  %104 = builtin "sextOrBitCast_Word_Int64"(%103 : $Builtin.Word) : $Builtin.Int64 // users: %117, %113, %105
  %105 = builtin "cmp_eq_Int64"(%104 : $Builtin.Int64, %39 : $Builtin.Int64) : $Builtin.Int1 // user: %106
  %106 = builtin "int_expect_Int1"(%105 : $Builtin.Int1, %41 : $Builtin.Int1) : $Builtin.Int1 // user: %107
  cond_fail %106 : $Builtin.Int1, "Division by zero" // id: %107
  %108 = integer_literal $Builtin.Int64, -9223372036854775808 // user: %109
  %109 = builtin "cmp_eq_Int64"(%102 : $Builtin.Int64, %108 : $Builtin.Int64) : $Builtin.Int1 // user: %110
  cond_br %109, bb16, bb15                        // id: %110

bb15:                                             // Preds: bb14
  br bb17                                         // id: %111

bb16:                                             // Preds: bb14
  %112 = integer_literal $Builtin.Int64, -1       // user: %113
  %113 = builtin "cmp_eq_Int64"(%104 : $Builtin.Int64, %112 : $Builtin.Int64) : $Builtin.Int1 // user: %114
  %114 = builtin "int_expect_Int1"(%113 : $Builtin.Int1, %41 : $Builtin.Int1) : $Builtin.Int1 // user: %115
  cond_fail %114 : $Builtin.Int1, "Division results in an overflow" // id: %115
  br bb17                                         // id: %116

bb17:                                             // Preds: bb16 bb15
  %117 = builtin "sdiv_Int64"(%102 : $Builtin.Int64, %104 : $Builtin.Int64) : $Builtin.Int64 // users: %121, %118
  %118 = builtin "cmp_slt_Int64"(%117 : $Builtin.Int64, %39 : $Builtin.Int64) : $Builtin.Int1 // user: %119
  %119 = builtin "int_expect_Int1"(%118 : $Builtin.Int1, %41 : $Builtin.Int1) : $Builtin.Int1 // user: %120
  cond_br %119, bb19, bb18                        // id: %120

bb18:                                             // Preds: bb17
  %121 = builtin "shl_Int64"(%117 : $Builtin.Int64, %10 : $Builtin.Int64) : $Builtin.Int64 // user: %122
  %122 = struct $UInt (%121 : $Builtin.Int64)     // user: %123
  %123 = struct $_SwiftArrayBodyStorage (%52 : $Int, %122 : $UInt) // user: %124
  %124 = struct $_ArrayBody (%123 : $_SwiftArrayBodyStorage) // user: %126
  %125 = ref_element_addr %60 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %126
  store %124 to %125 : $*_ArrayBody               // id: %126
  br bb21(%60 : $__ContiguousArrayStorageBase)    // id: %127

bb19:                                             // Preds: bb17
  %128 = string_literal utf8 "Swift/ArrayBody.swift" // user: %130
  %129 = integer_literal $Builtin.Word, 21        // user: %131
  %130 = builtin "ptrtoint_Word"(%128 : $Builtin.RawPointer) : $Builtin.Word // user: %131
  %131 = struct $StaticString (%130 : $Builtin.Word, %129 : $Builtin.Word, %34 : $Builtin.Int8) // user: %141
  %132 = integer_literal $Builtin.Int64, 31       // user: %133
  %133 = struct $UInt (%132 : $Builtin.Int64)     // user: %141
  %134 = string_literal utf8 "Fatal error"        // user: %136
  %135 = integer_literal $Builtin.Word, 11        // user: %137
  %136 = builtin "ptrtoint_Word"(%134 : $Builtin.RawPointer) : $Builtin.Word // user: %137
  %137 = struct $StaticString (%136 : $Builtin.Word, %135 : $Builtin.Word, %34 : $Builtin.Int8) // user: %141
  %138 = integer_literal $Builtin.Int32, 0        // user: %139
  %139 = struct $UInt32 (%138 : $Builtin.Int32)   // user: %141
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %140 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %141
  %141 = apply %140(%137, %38, %131, %133, %139) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %142

bb20:                                             // Preds: bb9
  %143 = global_addr @_swiftEmptyArrayStorage : $*_SwiftEmptyArrayStorage // user: %144
  %144 = address_to_pointer [stack_protection] %143 : $*_SwiftEmptyArrayStorage to $Builtin.RawPointer // user: %145
  %145 = raw_pointer_to_ref %144 : $Builtin.RawPointer to $__EmptyArrayStorage // user: %146
  %146 = upcast %145 : $__EmptyArrayStorage to $__ContiguousArrayStorageBase // user: %147
  br bb21(%146 : $__ContiguousArrayStorageBase)   // id: %147

// %148                                           // users: %153, %160, %177
bb21(%148 : $__ContiguousArrayStorageBase):       // Preds: bb20 bb18 bb12
  %149 = struct_extract %0 : $Bool, #Bool._value  // user: %150
  cond_br %149, bb23, bb22                        // id: %150

bb22:                                             // Preds: bb21
  %151 = struct $Int (%39 : $Builtin.Int64)       // user: %152
  %152 = struct $Range<Int> (%151 : $Int, %52 : $Int) // user: %157
  %153 = ref_tail_addr %148 : $__ContiguousArrayStorageBase, $Element // user: %154
  %154 = address_to_pointer %153 : $*Element to $Builtin.RawPointer // user: %155
  %155 = struct $UnsafeMutablePointer<Element> (%154 : $Builtin.RawPointer) // user: %157
  // function_ref specialized _ContiguousArrayBuffer._copyContents(subRange:initializing:)
  %156 = function_ref @$ss22_ContiguousArrayBufferV13_copyContents8subRange12initializingSpyxGSnySiG_AFtFTf4nng_n : $@convention(thin) <τ_0_0> (Range<Int>, UnsafeMutablePointer<τ_0_0>, @guaranteed _ContiguousArrayBuffer<τ_0_0>) -> UnsafeMutablePointer<τ_0_0> // user: %157
  %157 = apply %156<Element>(%152, %155, %3) : $@convention(thin) <τ_0_0> (Range<Int>, UnsafeMutablePointer<τ_0_0>, @guaranteed _ContiguousArrayBuffer<τ_0_0>) -> UnsafeMutablePointer<τ_0_0>
  release_value %3 : $_ContiguousArrayBuffer<Element> // id: %158
  br bb25                                         // id: %159

bb23:                                             // Preds: bb21
  %160 = ref_tail_addr %148 : $__ContiguousArrayStorageBase, $Element // user: %161
  %161 = address_to_pointer %160 : $*Element to $Builtin.RawPointer // user: %162
  %162 = struct $UnsafeMutablePointer<Element> (%161 : $Builtin.RawPointer) // user: %167
  %163 = ref_tail_addr %4 : $__ContiguousArrayStorageBase, $Element // user: %164
  %164 = address_to_pointer %163 : $*Element to $Builtin.RawPointer // user: %165
  %165 = struct $UnsafeMutablePointer<Element> (%164 : $Builtin.RawPointer) // user: %167
  // function_ref UnsafeMutablePointer.moveInitialize(from:count:)
  %166 = function_ref @$sSp14moveInitialize4from5countySpyxG_SitF : $@convention(method) <τ_0_0> (UnsafeMutablePointer<τ_0_0>, Int, UnsafeMutablePointer<τ_0_0>) -> () // user: %167
  %167 = apply %166<Element>(%165, %52, %162) : $@convention(method) <τ_0_0> (UnsafeMutablePointer<τ_0_0>, Int, UnsafeMutablePointer<τ_0_0>) -> ()
  %168 = load %8 : $*Builtin.Int64                // user: %169
  %169 = builtin "lshr_Int64"(%168 : $Builtin.Int64, %10 : $Builtin.Int64) : $Builtin.Int64 // user: %170
  %170 = builtin "cmp_slt_Int64"(%169 : $Builtin.Int64, %39 : $Builtin.Int64) : $Builtin.Int1 // user: %171
  %171 = builtin "int_expect_Int1"(%170 : $Builtin.Int1, %41 : $Builtin.Int1) : $Builtin.Int1 // user: %172
  cond_br %171, bb26, bb24                        // id: %172

bb24:                                             // Preds: bb23
  %173 = struct $Int (%39 : $Builtin.Int64)       // user: %174
  store %173 to %31 : $*Int                       // id: %174
  release_value %3 : $_ContiguousArrayBuffer<Element> // id: %175
  br bb25                                         // id: %176

bb25:                                             // Preds: bb24 bb22
  %177 = struct $_ContiguousArrayBuffer<Element> (%148 : $__ContiguousArrayStorageBase) // user: %178
  return %177 : $_ContiguousArrayBuffer<Element>  // id: %178

bb26:                                             // Preds: bb23
  %179 = string_literal utf8 "Can't grow an array buffer past its capacity" // user: %181
  %180 = integer_literal $Builtin.Word, 44        // user: %182
  %181 = builtin "ptrtoint_Word"(%179 : $Builtin.RawPointer) : $Builtin.Word // user: %182
  %182 = struct $StaticString (%181 : $Builtin.Word, %180 : $Builtin.Word, %34 : $Builtin.Int8) // user: %192
  %183 = integer_literal $Builtin.Int64, 645      // user: %184
  %184 = struct $UInt (%183 : $Builtin.Int64)     // user: %192
  %185 = string_literal utf8 "Fatal error"        // user: %187
  %186 = integer_literal $Builtin.Word, 11        // user: %188
  %187 = builtin "ptrtoint_Word"(%185 : $Builtin.RawPointer) : $Builtin.Word // user: %188
  %188 = struct $StaticString (%187 : $Builtin.Word, %186 : $Builtin.Word, %34 : $Builtin.Int8) // user: %192
  %189 = integer_literal $Builtin.Int32, 0        // user: %190
  %190 = struct $UInt32 (%189 : $Builtin.Int32)   // user: %192
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %191 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %192
  %192 = apply %191(%188, %182, %48, %184, %190) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %193

bb27:                                             // Preds: bb8
  %194 = integer_literal $Builtin.Int64, 839      // user: %195
  %195 = struct $UInt (%194 : $Builtin.Int64)     // user: %203
  %196 = string_literal utf8 "Fatal error"        // user: %198
  %197 = integer_literal $Builtin.Word, 11        // user: %199
  %198 = builtin "ptrtoint_Word"(%196 : $Builtin.RawPointer) : $Builtin.Word // user: %199
  %199 = struct $StaticString (%198 : $Builtin.Word, %197 : $Builtin.Word, %34 : $Builtin.Int8) // user: %203
  %200 = integer_literal $Builtin.Int32, 0        // user: %201
  %201 = struct $UInt32 (%200 : $Builtin.Int32)   // user: %203
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %202 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %203
  %203 = apply %202(%199, %38, %48, %195, %201) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %204

bb28:                                             // Preds: bb7
  %205 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %207
  %206 = integer_literal $Builtin.Word, 24        // user: %208
  %207 = builtin "ptrtoint_Word"(%205 : $Builtin.RawPointer) : $Builtin.Word // user: %208
  %208 = struct $StaticString (%207 : $Builtin.Word, %206 : $Builtin.Word, %34 : $Builtin.Int8) // user: %218
  %209 = integer_literal $Builtin.Int64, 15505    // user: %210
  %210 = struct $UInt (%209 : $Builtin.Int64)     // user: %218
  %211 = string_literal utf8 "Fatal error"        // user: %213
  %212 = integer_literal $Builtin.Word, 11        // user: %214
  %213 = builtin "ptrtoint_Word"(%211 : $Builtin.RawPointer) : $Builtin.Word // user: %214
  %214 = struct $StaticString (%213 : $Builtin.Word, %212 : $Builtin.Word, %34 : $Builtin.Int8) // user: %218
  %215 = integer_literal $Builtin.Int32, 0        // user: %216
  %216 = struct $UInt32 (%215 : $Builtin.Int32)   // user: %218
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %217 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %218
  %218 = apply %217(%214, %38, %208, %210, %216) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %219
} // end sil function '$ss22_ContiguousArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtF'

// UnsafeMutablePointer.initialize(from:count:)
sil public_external @$sSp10initialize4from5countySPyxG_SitF : $@convention(method) <Pointee> (UnsafePointer<Pointee>, Int, UnsafeMutablePointer<Pointee>) -> () {
// %0                                             // user: %4
// %1                                             // user: %5
// %2                                             // user: %3
bb0(%0 : $UnsafePointer<Pointee>, %1 : $Int, %2 : $UnsafeMutablePointer<Pointee>):
  %3 = struct_extract %2 : $UnsafeMutablePointer<Pointee>, #UnsafeMutablePointer._rawValue // user: %8
  %4 = struct_extract %0 : $UnsafePointer<Pointee>, #UnsafePointer._rawValue // user: %8
  %5 = struct_extract %1 : $Int, #Int._value      // user: %6
  %6 = builtin "truncOrBitCast_Int64_Word"(%5 : $Builtin.Int64) : $Builtin.Word // user: %8
  %7 = metatype $@thin Pointee.Type               // user: %8
  %8 = builtin "copyArray"<Pointee>(%7 : $@thin Pointee.Type, %3 : $Builtin.RawPointer, %4 : $Builtin.RawPointer, %6 : $Builtin.Word) : $()
  %9 = tuple ()                                   // user: %10
  return %9 : $()                                 // id: %10
} // end sil function '$sSp10initialize4from5countySPyxG_SitF'

// _swift_stdlib_has_malloc_size
// clang name: _swift_stdlib_has_malloc_size
sil shared [clang _swift_stdlib_has_malloc_size] @_swift_stdlib_has_malloc_size : $@convention(c) () -> Bool

// _swift_stdlib_malloc_size
// clang name: _swift_stdlib_malloc_size
sil shared [clang _swift_stdlib_malloc_size] @_swift_stdlib_malloc_size : $@convention(c) (UnsafeRawPointer) -> Int

// UnsafeMutablePointer.moveInitialize(from:count:)
sil public_external @$sSp14moveInitialize4from5countySpyxG_SitF : $@convention(method) <Pointee> (UnsafeMutablePointer<Pointee>, Int, UnsafeMutablePointer<Pointee>) -> () {
// %0                                             // user: %4
// %1                                             // users: %22, %7
// %2                                             // user: %3
bb0(%0 : $UnsafeMutablePointer<Pointee>, %1 : $Int, %2 : $UnsafeMutablePointer<Pointee>):
  %3 = struct_extract %2 : $UnsafeMutablePointer<Pointee>, #UnsafeMutablePointer._rawValue // users: %12, %25, %18, %15, %5
  %4 = struct_extract %0 : $UnsafeMutablePointer<Pointee>, #UnsafeMutablePointer._rawValue // users: %25, %18, %15, %9, %5
  %5 = builtin "cmp_ult_RawPointer"(%3 : $Builtin.RawPointer, %4 : $Builtin.RawPointer) : $Builtin.Int1 // user: %6
  cond_br %5, bb6, bb1                            // id: %6

bb1:                                              // Preds: bb0
  %7 = struct_extract %1 : $Int, #Int._value      // user: %8
  %8 = builtin "truncOrBitCast_Int64_Word"(%7 : $Builtin.Int64) : $Builtin.Word // users: %18, %10
  %9 = pointer_to_address %4 : $Builtin.RawPointer to [strict] $*Pointee // user: %10
  %10 = index_addr [stack_protection] %9 : $*Pointee, %8 : $Builtin.Word // user: %11
  %11 = address_to_pointer [stack_protection] %10 : $*Pointee to $Builtin.RawPointer // user: %12
  %12 = builtin "cmp_ult_RawPointer"(%3 : $Builtin.RawPointer, %11 : $Builtin.RawPointer) : $Builtin.Int1 // user: %13
  cond_br %12, bb3, bb2                           // id: %13

bb2:                                              // Preds: bb1
  br bb7                                          // id: %14

bb3:                                              // Preds: bb1
  %15 = builtin "cmp_eq_RawPointer"(%3 : $Builtin.RawPointer, %4 : $Builtin.RawPointer) : $Builtin.Int1 // user: %16
  cond_br %15, bb5, bb4                           // id: %16

bb4:                                              // Preds: bb3
  %17 = metatype $@thin Pointee.Type              // user: %18
  %18 = builtin "takeArrayBackToFront"<Pointee>(%17 : $@thin Pointee.Type, %3 : $Builtin.RawPointer, %4 : $Builtin.RawPointer, %8 : $Builtin.Word) : $()
  br bb8                                          // id: %19

bb5:                                              // Preds: bb3
  br bb8                                          // id: %20

bb6:                                              // Preds: bb0
  br bb7                                          // id: %21

bb7:                                              // Preds: bb6 bb2
  %22 = struct_extract %1 : $Int, #Int._value     // user: %23
  %23 = builtin "truncOrBitCast_Int64_Word"(%22 : $Builtin.Int64) : $Builtin.Word // user: %25
  %24 = metatype $@thin Pointee.Type              // user: %25
  %25 = builtin "takeArrayFrontToBack"<Pointee>(%24 : $@thin Pointee.Type, %3 : $Builtin.RawPointer, %4 : $Builtin.RawPointer, %23 : $Builtin.Word) : $()
  br bb8                                          // id: %26

bb8:                                              // Preds: bb7 bb5 bb4
  %27 = tuple ()                                  // user: %28
  return %27 : $()                                // id: %28
} // end sil function '$sSp14moveInitialize4from5countySpyxG_SitF'

// specialized static Main.$main()
sil shared @$s4main4MainV5$mainyyYaFZTf4d_n : $@convention(thin) @async () -> () {
[global: read,write,copy,destroy,allocate,deinit_barrier]
bb0:
  %0 = metatype $@thick MainActor.Type            // users: %3, %2
  // function_ref static MainActor.shared.getter
  %1 = function_ref @$sScM6sharedScMvgZ : $@convention(method) (@thick MainActor.Type) -> @owned MainActor // users: %3, %2
  %2 = apply %1(%0) : $@convention(method) (@thick MainActor.Type) -> @owned MainActor // users: %42, %41
  %3 = apply %1(%0) : $@convention(method) (@thick MainActor.Type) -> @owned MainActor // users: %39, %38, %4
  hop_to_executor %3 : $MainActor                 // id: %4
  // function_ref test_localVar_keepsObjectAliveBeyondCallToClassWithPointer()
  %5 = function_ref @$s4main58test_localVar_keepsObjectAliveBeyondCallToClassWithPointeryyF : $@convention(thin) () -> () // user: %6
  %6 = apply %5() : $@convention(thin) () -> ()
  %7 = alloc_ref $FooerAsync                      // users: %9, %8
  debug_value %7 : $FooerAsync, let, name "self", argno 1, implicit // id: %8
  %9 = end_init_let_ref %7 : $FooerAsync          // users: %31, %24, %19, %16, %13, %10
  %10 = ref_element_addr %9 : $FooerAsync, #FooerAsync.strongSelf // users: %20, %12
  %11 = enum $Optional<FooerAsync>, #Optional.none!enumelt // user: %12
  store %11 to %10 : $*Optional<FooerAsync>       // id: %12
  debug_value %9 : $FooerAsync, let, name "self", argno 1, implicit // id: %13
  %14 = alloc_box ${ var @sil_weak Optional<FooerAsync> }, var, name "weakSelf" // users: %33, %29, %27, %15
  %15 = project_box %14 : ${ var @sil_weak Optional<FooerAsync> }, 0 // user: %17
  %16 = enum $Optional<FooerAsync>, #Optional.some!enumelt, %9 : $FooerAsync // users: %22, %18, %17
  store_weak %16 to [init] %15 : $*@sil_weak Optional<FooerAsync> // id: %17
  debug_value %16 : $Optional<FooerAsync>, let, name "value", argno 1, implicit // id: %18
  debug_value %9 : $FooerAsync, let, name "self", argno 2, implicit // id: %19
  %20 = begin_access [modify] [dynamic] [no_nested_conflict] %10 : $*Optional<FooerAsync> // users: %23, %22, %21
  %21 = load %20 : $*Optional<FooerAsync>         // user: %25
  store %16 to %20 : $*Optional<FooerAsync>       // id: %22
  end_access %20 : $*Optional<FooerAsync>         // id: %23
  strong_retain %9 : $FooerAsync                  // id: %24
  release_value %21 : $Optional<FooerAsync>       // id: %25
  // function_ref closure #1 in FooerAsync.foo()
  %26 = function_ref @$s4main10FooerAsyncC3fooScTyyts5NeverOGyFyycfU_ : $@convention(thin) (@guaranteed { var @sil_weak Optional<FooerAsync> }) -> () // user: %27
  %27 = partial_apply [callee_guaranteed] %26(%14) : $@convention(thin) (@guaranteed { var @sil_weak Optional<FooerAsync> }) -> () // users: %32, %30
  // function_ref do_foo_async(_:)
  %28 = function_ref @$s4main12do_foo_asyncyScTyyts5NeverOGyycF : $@convention(thin) (@guaranteed @callee_guaranteed () -> ()) -> @owned Task<(), Never> // user: %30
  strong_retain %14 : ${ var @sil_weak Optional<FooerAsync> } // id: %29
  %30 = apply %28(%27) : $@convention(thin) (@guaranteed @callee_guaranteed () -> ()) -> @owned Task<(), Never> // users: %37, %36
  strong_release %9 : $FooerAsync                 // id: %31
  strong_release %27 : $@callee_guaranteed () -> () // id: %32
  strong_release %14 : ${ var @sil_weak Optional<FooerAsync> } // id: %33
  %34 = alloc_stack $()                           // users: %40, %36
  // function_ref Task<>.value.getter
  %35 = function_ref @$sScTss5NeverORs_rlE5valuexvg : $@convention(method) @async <τ_0_0, τ_0_1 where τ_0_0 : Sendable, τ_0_1 == Never> (@guaranteed Task<τ_0_0, Never>) -> @out τ_0_0 // user: %36
  %36 = apply %35<(), Never>(%34, %30) : $@convention(method) @async <τ_0_0, τ_0_1 where τ_0_0 : Sendable, τ_0_1 == Never> (@guaranteed Task<τ_0_0, Never>) -> @out τ_0_0
  release_value %30 : $Task<(), Never>            // id: %37
  hop_to_executor %3 : $MainActor                 // id: %38
  strong_release %3 : $MainActor                  // id: %39
  dealloc_stack %34 : $*()                        // id: %40
  hop_to_executor %2 : $MainActor                 // id: %41
  strong_release %2 : $MainActor                  // id: %42
  %43 = tuple ()                                  // user: %44
  return %43 : $()                                // id: %44
} // end sil function '$s4main4MainV5$mainyyYaFZTf4d_n'

// specialized _ContiguousArrayBuffer._copyContents(subRange:initializing:)
sil shared @$ss22_ContiguousArrayBufferV13_copyContents8subRange12initializingSpyxGSnySiG_AFtFTf4nng_n : $@convention(thin) <Element> (Range<Int>, UnsafeMutablePointer<Element>, @guaranteed _ContiguousArrayBuffer<Element>) -> UnsafeMutablePointer<Element> {
[%1: read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[%2: noescape v**, read v**.c*.v**, write v**.c*.v**, copy v**.c*.v**, destroy v**.c*.v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0                                             // users: %19, %12
// %1                                             // users: %52, %49
// %2                                             // user: %24
bb0(%0 : $Range<Int>, %1 : $UnsafeMutablePointer<Element>, %2 : $_ContiguousArrayBuffer<Element>):
  %3 = string_literal utf8 "Swift/ContiguousArrayBuffer.swift" // user: %5
  %4 = integer_literal $Builtin.Word, 33          // user: %7
  %5 = builtin "ptrtoint_Word"(%3 : $Builtin.RawPointer) : $Builtin.Word // user: %7
  %6 = integer_literal $Builtin.Int8, 2           // users: %101, %90, %79, %64, %73, %11, %7
  %7 = struct $StaticString (%5 : $Builtin.Word, %4 : $Builtin.Word, %6 : $Builtin.Int8) // users: %105, %94, %68
  %8 = string_literal utf8 ""                     // user: %10
  %9 = integer_literal $Builtin.Word, 0           // user: %11
  %10 = builtin "ptrtoint_Word"(%8 : $Builtin.RawPointer) : $Builtin.Word // user: %11
  %11 = struct $StaticString (%10 : $Builtin.Word, %9 : $Builtin.Word, %6 : $Builtin.Int8) // users: %105, %94, %83, %68
  %12 = struct_extract %0 : $Range<Int>, #Range.lowerBound // user: %14
  %13 = integer_literal $Builtin.Int64, 0         // users: %30, %15
  %14 = struct_extract %12 : $Int, #Int._value    // users: %44, %38, %21, %15
  %15 = builtin "cmp_slt_Int64"(%14 : $Builtin.Int64, %13 : $Builtin.Int64) : $Builtin.Int1 // user: %17
  %16 = integer_literal $Builtin.Int1, 0          // users: %35, %31, %22, %17
  %17 = builtin "int_expect_Int1"(%15 : $Builtin.Int1, %16 : $Builtin.Int1) : $Builtin.Int1 // user: %18
  cond_br %17, bb8, bb1                           // id: %18

bb1:                                              // Preds: bb0
  %19 = struct_extract %0 : $Range<Int>, #Range.upperBound // user: %20
  %20 = struct_extract %19 : $Int, #Int._value    // users: %38, %34, %21
  %21 = builtin "cmp_slt_Int64"(%20 : $Builtin.Int64, %14 : $Builtin.Int64) : $Builtin.Int1 // user: %22
  %22 = builtin "int_expect_Int1"(%21 : $Builtin.Int1, %16 : $Builtin.Int1) : $Builtin.Int1 // user: %23
  cond_br %22, bb7, bb2                           // id: %23

bb2:                                              // Preds: bb1
  %24 = struct_extract %2 : $_ContiguousArrayBuffer<Element>, #_ContiguousArrayBuffer._storage // users: %43, %50, %25
  %25 = ref_element_addr %24 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %26
  %26 = struct_element_addr %25 : $*_ArrayBody, #_ArrayBody._storage // user: %27
  %27 = struct_element_addr %26 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %28
  %28 = struct_element_addr %27 : $*Int, #Int._value // user: %29
  %29 = load %28 : $*Builtin.Int64                // users: %30, %33
  %30 = builtin "cmp_slt_Int64"(%29 : $Builtin.Int64, %13 : $Builtin.Int64) : $Builtin.Int1 // user: %31
  %31 = builtin "int_expect_Int1"(%30 : $Builtin.Int1, %16 : $Builtin.Int1) : $Builtin.Int1 // user: %32
  cond_br %31, bb6, bb3                           // id: %32

bb3:                                              // Preds: bb2
  %33 = builtin "assumeNonNegative_Int64"(%29 : $Builtin.Int64) : $Builtin.Int64 // user: %34
  %34 = builtin "cmp_slt_Int64"(%33 : $Builtin.Int64, %20 : $Builtin.Int64) : $Builtin.Int1 // user: %35
  %35 = builtin "int_expect_Int1"(%34 : $Builtin.Int1, %16 : $Builtin.Int1) : $Builtin.Int1 // user: %36
  cond_br %35, bb5, bb4                           // id: %36

bb4:                                              // Preds: bb3
  %37 = integer_literal $Builtin.Int1, -1         // user: %38
  %38 = builtin "ssub_with_overflow_Int64"(%20 : $Builtin.Int64, %14 : $Builtin.Int64, %37 : $Builtin.Int1) : $(Builtin.Int64, Builtin.Int1) // users: %40, %39
  %39 = tuple_extract %38 : $(Builtin.Int64, Builtin.Int1), 0 // users: %42, %53
  %40 = tuple_extract %38 : $(Builtin.Int64, Builtin.Int1), 1 // user: %41
  cond_fail %40 : $Builtin.Int1, "arithmetic overflow" // id: %41
  %42 = struct $Int (%39 : $Builtin.Int64)        // user: %49
  %43 = ref_tail_addr %24 : $__ContiguousArrayStorageBase, $Element // user: %45
  %44 = builtin "truncOrBitCast_Int64_Word"(%14 : $Builtin.Int64) : $Builtin.Word // user: %45
  %45 = index_addr [stack_protection] %43 : $*Element, %44 : $Builtin.Word // user: %46
  %46 = address_to_pointer [stack_protection] %45 : $*Element to $Builtin.RawPointer // user: %47
  %47 = struct $UnsafePointer<Element> (%46 : $Builtin.RawPointer) // user: %49
  // function_ref UnsafeMutablePointer.initialize(from:count:)
  %48 = function_ref @$sSp10initialize4from5countySPyxG_SitF : $@convention(method) <τ_0_0> (UnsafePointer<τ_0_0>, Int, UnsafeMutablePointer<τ_0_0>) -> () // user: %49
  %49 = apply %48<Element>(%47, %42, %1) : $@convention(method) <τ_0_0> (UnsafePointer<τ_0_0>, Int, UnsafeMutablePointer<τ_0_0>) -> ()
  %50 = init_existential_ref %24 : $__ContiguousArrayStorageBase : $__ContiguousArrayStorageBase, $AnyObject // user: %51
  fix_lifetime %50 : $AnyObject                   // id: %51
  %52 = struct_extract %1 : $UnsafeMutablePointer<Element>, #UnsafeMutablePointer._rawValue // user: %54
  %53 = builtin "truncOrBitCast_Int64_Word"(%39 : $Builtin.Int64) : $Builtin.Word // user: %55
  %54 = pointer_to_address %52 : $Builtin.RawPointer to [strict] $*Element // user: %55
  %55 = index_addr [stack_protection] %54 : $*Element, %53 : $Builtin.Word // user: %56
  %56 = address_to_pointer [stack_protection] %55 : $*Element to $Builtin.RawPointer // user: %57
  %57 = struct $UnsafeMutablePointer<Element> (%56 : $Builtin.RawPointer) // user: %58
  return %57 : $UnsafeMutablePointer<Element>     // id: %58

bb5:                                              // Preds: bb3
  %59 = integer_literal $Builtin.Int64, 718       // user: %60
  %60 = struct $UInt (%59 : $Builtin.Int64)       // user: %68
  %61 = string_literal utf8 "Fatal error"         // user: %63
  %62 = integer_literal $Builtin.Word, 11         // user: %64
  %63 = builtin "ptrtoint_Word"(%61 : $Builtin.RawPointer) : $Builtin.Word // user: %64
  %64 = struct $StaticString (%63 : $Builtin.Word, %62 : $Builtin.Word, %6 : $Builtin.Int8) // user: %68
  %65 = integer_literal $Builtin.Int32, 0         // user: %66
  %66 = struct $UInt32 (%65 : $Builtin.Int32)     // user: %68
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %67 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %68
  %68 = apply %67(%64, %11, %7, %60, %66) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %69

bb6:                                              // Preds: bb2
  %70 = string_literal utf8 "Swift/IntegerTypes.swift" // user: %72
  %71 = integer_literal $Builtin.Word, 24         // user: %73
  %72 = builtin "ptrtoint_Word"(%70 : $Builtin.RawPointer) : $Builtin.Word // user: %73
  %73 = struct $StaticString (%72 : $Builtin.Word, %71 : $Builtin.Word, %6 : $Builtin.Int8) // user: %83
  %74 = integer_literal $Builtin.Int64, 15505     // user: %75
  %75 = struct $UInt (%74 : $Builtin.Int64)       // user: %83
  %76 = string_literal utf8 "Fatal error"         // user: %78
  %77 = integer_literal $Builtin.Word, 11         // user: %79
  %78 = builtin "ptrtoint_Word"(%76 : $Builtin.RawPointer) : $Builtin.Word // user: %79
  %79 = struct $StaticString (%78 : $Builtin.Word, %77 : $Builtin.Word, %6 : $Builtin.Int8) // user: %83
  %80 = integer_literal $Builtin.Int32, 0         // user: %81
  %81 = struct $UInt32 (%80 : $Builtin.Int32)     // user: %83
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %82 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %83
  %83 = apply %82(%79, %11, %73, %75, %81) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %84

bb7:                                              // Preds: bb1
  %85 = integer_literal $Builtin.Int64, 717       // user: %86
  %86 = struct $UInt (%85 : $Builtin.Int64)       // user: %94
  %87 = string_literal utf8 "Fatal error"         // user: %89
  %88 = integer_literal $Builtin.Word, 11         // user: %90
  %89 = builtin "ptrtoint_Word"(%87 : $Builtin.RawPointer) : $Builtin.Word // user: %90
  %90 = struct $StaticString (%89 : $Builtin.Word, %88 : $Builtin.Word, %6 : $Builtin.Int8) // user: %94
  %91 = integer_literal $Builtin.Int32, 0         // user: %92
  %92 = struct $UInt32 (%91 : $Builtin.Int32)     // user: %94
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %93 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %94
  %94 = apply %93(%90, %11, %7, %86, %92) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %95

bb8:                                              // Preds: bb0
  %96 = integer_literal $Builtin.Int64, 716       // user: %97
  %97 = struct $UInt (%96 : $Builtin.Int64)       // user: %105
  %98 = string_literal utf8 "Fatal error"         // user: %100
  %99 = integer_literal $Builtin.Word, 11         // user: %101
  %100 = builtin "ptrtoint_Word"(%98 : $Builtin.RawPointer) : $Builtin.Word // user: %101
  %101 = struct $StaticString (%100 : $Builtin.Word, %99 : $Builtin.Word, %6 : $Builtin.Int8) // user: %105
  %102 = integer_literal $Builtin.Int32, 0        // user: %103
  %103 = struct $UInt32 (%102 : $Builtin.Int32)   // user: %105
  // function_ref _fatalErrorMessage(_:_:file:line:flags:)
  %104 = function_ref @$ss18_fatalErrorMessage__4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never // user: %105
  %105 = apply %104(%101, %11, %7, %97, %103) : $@convention(thin) (StaticString, StaticString, StaticString, UInt, UInt32) -> Never
  unreachable                                     // id: %106
} // end sil function '$ss22_ContiguousArrayBufferV13_copyContents8subRange12initializingSpyxGSnySiG_AFtFTf4nng_n'

sil_vtable DataWrapper {
  #DataWrapper.pointer!getter: (DataWrapper) -> () -> UnsafeMutableRawBufferPointer : @$s4main11DataWrapperC7pointerSwvg	// DataWrapper.pointer.getter
  #DataWrapper.pointer!setter: (DataWrapper) -> (UnsafeMutableRawBufferPointer) -> () : @$s4main11DataWrapperC7pointerSwvs	// DataWrapper.pointer.setter
  #DataWrapper.pointer!modify: (DataWrapper) -> () -> () : @$s4main11DataWrapperC7pointerSwvM	// DataWrapper.pointer.modify
  #DataWrapper.init!allocator: (DataWrapper.Type) -> (Int) -> DataWrapper : @$s4main11DataWrapperC5countACSi_tcfC	// DataWrapper.__allocating_init(count:)
  #DataWrapper.bytes!getter: (DataWrapper) -> () -> UnsafeMutableRawBufferPointer : @$s4main11DataWrapperC5bytesSwvg	// DataWrapper.bytes.getter
  #DataWrapper.deinit!deallocator: @$s4main11DataWrapperCfD	// DataWrapper.__deallocating_deinit
}

sil_vtable FooerAsync {
  #FooerAsync.strongSelf!getter: (FooerAsync) -> () -> FooerAsync? : @$s4main10FooerAsyncC10strongSelfACSgvg	// FooerAsync.strongSelf.getter
  #FooerAsync.strongSelf!setter: (FooerAsync) -> (FooerAsync?) -> () : @$s4main10FooerAsyncC10strongSelfACSgvs	// FooerAsync.strongSelf.setter
  #FooerAsync.strongSelf!modify: (FooerAsync) -> () -> () : @$s4main10FooerAsyncC10strongSelfACSgvM	// FooerAsync.strongSelf.modify
  #FooerAsync.foo: (__owned FooerAsync) -> () -> Task<(), Never> : @$s4main10FooerAsyncC3fooScTyyts5NeverOGyF	// FooerAsync.foo()
  #FooerAsync.foo1: (FooerAsync) -> () -> () : @$s4main10FooerAsyncC4foo1yyF	// FooerAsync.foo1()
  #FooerAsync.foo2: (FooerAsync) -> () -> () : @$s4main10FooerAsyncC4foo2yyF	// FooerAsync.foo2()
  #FooerAsync.init!allocator: (FooerAsync.Type) -> () -> FooerAsync : @$s4main10FooerAsyncCACycfC	// FooerAsync.__allocating_init()
  #FooerAsync.deinit!deallocator: @$s4main10FooerAsyncCfD	// FooerAsync.__deallocating_deinit
}

sil_vtable _ContiguousArrayStorage {
  #__SwiftNativeNSArrayWithContiguousStorage.init!allocator: (__SwiftNativeNSArrayWithContiguousStorage.Type) -> () -> __SwiftNativeNSArrayWithContiguousStorage : @$ss28__ContiguousArrayStorageBaseCABycfC [inherited]	// __ContiguousArrayStorageBase.__allocating_init()
  #__ContiguousArrayStorageBase.init!allocator: (__ContiguousArrayStorageBase.Type) -> (()) -> __ContiguousArrayStorageBase : @$ss23_ContiguousArrayStorageC16_doNotCallMeBaseAByxGyt_tcfC [override]	// _ContiguousArrayStorage.__allocating_init(_doNotCallMeBase:)
  #__ContiguousArrayStorageBase.canStoreElements: (__ContiguousArrayStorageBase) -> (any Any.Type) -> Bool : @$ss23_ContiguousArrayStorageC16canStoreElements13ofDynamicTypeSbypXp_tF [override]	// _ContiguousArrayStorage.canStoreElements(ofDynamicType:)
  #__ContiguousArrayStorageBase.staticElementType!getter: (__ContiguousArrayStorageBase) -> () -> any Any.Type : @$ss23_ContiguousArrayStorageC17staticElementTypeypXpvg [override]	// _ContiguousArrayStorage.staticElementType.getter
  #_ContiguousArrayStorage.deinit!deallocator: @$ss23_ContiguousArrayStorageCfD	// _ContiguousArrayStorage.__deallocating_deinit
}

sil_vtable __ContiguousArrayStorageBase {
  #__SwiftNativeNSArrayWithContiguousStorage.init!allocator: (__SwiftNativeNSArrayWithContiguousStorage.Type) -> () -> __SwiftNativeNSArrayWithContiguousStorage : @$ss28__ContiguousArrayStorageBaseCABycfC [override]	// __ContiguousArrayStorageBase.__allocating_init()
  #__ContiguousArrayStorageBase.init!allocator: (__ContiguousArrayStorageBase.Type) -> (()) -> __ContiguousArrayStorageBase : @$ss28__ContiguousArrayStorageBaseC012_doNotCallMeD0AByt_tcfC	// __ContiguousArrayStorageBase.__allocating_init(_doNotCallMeBase:)
  #__ContiguousArrayStorageBase.canStoreElements: (__ContiguousArrayStorageBase) -> (any Any.Type) -> Bool : @$ss28__ContiguousArrayStorageBaseC16canStoreElements13ofDynamicTypeSbypXp_tF	// __ContiguousArrayStorageBase.canStoreElements(ofDynamicType:)
  #__ContiguousArrayStorageBase.staticElementType!getter: (__ContiguousArrayStorageBase) -> () -> any Any.Type : @$ss28__ContiguousArrayStorageBaseC17staticElementTypeypXpvg	// __ContiguousArrayStorageBase.staticElementType.getter
  #__ContiguousArrayStorageBase.deinit!deallocator: @$ss28__ContiguousArrayStorageBaseCfD	// __ContiguousArrayStorageBase.__deallocating_deinit
}

sil_vtable __SwiftNativeNSArrayWithContiguousStorage {
  #__SwiftNativeNSArrayWithContiguousStorage.init!allocator: (__SwiftNativeNSArrayWithContiguousStorage.Type) -> () -> __SwiftNativeNSArrayWithContiguousStorage : @$ss41__SwiftNativeNSArrayWithContiguousStorageCABycfC	// __SwiftNativeNSArrayWithContiguousStorage.__allocating_init()
  #__SwiftNativeNSArrayWithContiguousStorage.deinit!deallocator: @$ss41__SwiftNativeNSArrayWithContiguousStorageCfD	// __SwiftNativeNSArrayWithContiguousStorage.__deallocating_deinit
}



// Mappings from '#fileID' to '#filePath':
//   'main/lexical-lifetimes.swift' => 'lexical-lifetimes.swift'


