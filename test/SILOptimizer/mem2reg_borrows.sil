import Builtin
import Swift

class Klass {}

struct WrapperStruct {
  var val:Klass
}

sil [ossa] @use_inguaranteed : $@convention(thin) (@in_guaranteed Klass) -> ()
sil [ossa] @use_guaranteed : $@convention(thin) (@guaranteed Klass) -> ()
sil [ossa] @use_owned : $@convention(thin) (@owned Klass) -> ()

sil [ossa] @test_control_flow4 : $@convention(thin) (@guaranteed Klass) -> () {
bb0(%0 : @guaranteed $Klass):
  %stk = alloc_stack $Klass
  store_borrow %0 to %stk : $*Klass
  cond_br undef, bb1, bb2

bb1:
  %ld1 = load_borrow %stk : $*Klass
  fix_lifetime %ld1 : $Klass
  end_borrow %ld1 : $Klass
  dealloc_stack %stk : $*Klass
  %r = tuple ()
  return %r : $()

bb2:
  %ld2 = load_borrow %stk : $*Klass
  fix_lifetime %ld2 : $Klass
  end_borrow %ld2 : $Klass
  dealloc_stack %stk : $*Klass
  unreachable
}
sil [ossa] @store_only_allocas : $@convention(thin) (@guaranteed Klass) -> () {
bb0(%0 : @guaranteed $Klass):
  %1 = alloc_stack $Klass
  store_borrow %0 to %1 : $*Klass
  dealloc_stack %1 : $*Klass
  %6 = tuple ()
  return %6 : $()
}

sil [ossa] @test1 : $@convention(thin) (@guaranteed Klass) -> () {
bb0(%0 : @guaranteed $Klass):
  %1 = alloc_stack $Klass
  store_borrow %0 to %1 : $*Klass
  %2 = load_borrow %1 : $*Klass
  %3 = function_ref @use_guaranteed : $@convention(thin) (@guaranteed Klass) -> ()
  %4 = apply %3(%2) : $@convention(thin) (@guaranteed Klass) -> ()
  end_borrow %2 : $Klass
  dealloc_stack %1 : $*Klass
  %6 = tuple ()
  return %6 : $()
}

sil [ossa] @test2 : $@convention(thin) (@guaranteed Klass) -> () {
bb0(%0 : @guaranteed $Klass):
  %1 = alloc_stack $Klass
  store_borrow %0 to %1 : $*Klass
  %2 = load_borrow %1 : $*Klass
  %3 = function_ref @use_guaranteed : $@convention(thin) (@guaranteed Klass) -> ()
  %4 = apply %3(%2) : $@convention(thin) (@guaranteed Klass) -> ()
  end_borrow %2 : $Klass
  %5 = load_borrow %1 : $*Klass
  %6 = function_ref @use_guaranteed : $@convention(thin) (@guaranteed Klass) -> ()
  %7 = apply %3(%5) : $@convention(thin) (@guaranteed Klass) -> ()
  end_borrow %5 : $Klass
  dealloc_stack %1 : $*Klass
  %8 = tuple ()
  return %8 : $()
}

sil [ossa] @test3 : $@convention(thin) (@guaranteed Klass, @guaranteed Klass) -> () {
bb0(%0 : @guaranteed $Klass, %1 : @guaranteed $Klass):
  %2 = alloc_stack $Klass
  store_borrow %0 to %2 : $*Klass
  %3 = load_borrow %2 : $*Klass
  %4 = function_ref @use_guaranteed : $@convention(thin) (@guaranteed Klass) -> ()
  %5 = apply %4(%3) : $@convention(thin) (@guaranteed Klass) -> ()
  end_borrow %3 : $Klass
  store_borrow %1 to %2 : $*Klass
  %6 = load_borrow %2 : $*Klass
  %7 = apply %4(%6) : $@convention(thin) (@guaranteed Klass) -> ()
  end_borrow %6 : $Klass
  dealloc_stack %2 : $*Klass
  %9 = tuple ()
  return %9 : $()
}

sil [ossa] @test4 : $@convention(thin) (@guaranteed Klass) -> () {
bb0(%0 : @guaranteed $Klass):
  %1 = alloc_stack $Klass
  store_borrow %0 to %1 : $*Klass
  %2 = load_borrow %1 : $*Klass
  %3 = function_ref @use_guaranteed : $@convention(thin) (@guaranteed Klass) -> ()
  %4 = apply %3(%2) : $@convention(thin) (@guaranteed Klass) -> ()
  end_borrow %2 : $Klass
  %5 = load [copy] %1 : $*Klass
  %6 = function_ref @use_owned : $@convention(thin) (@owned Klass) -> ()
  %7 = apply %6(%5) : $@convention(thin) (@owned Klass) -> ()
  dealloc_stack %1 : $*Klass
  %8 = tuple ()
  return %8 : $()
}

sil [ossa] @test5 : $@convention(thin) (@owned Klass) -> () {
bb0(%0 : @owned $Klass):
  %1 = alloc_stack $Klass
  store %0 to [init] %1 : $*Klass
  %2 = load_borrow %1 : $*Klass
  %3 = function_ref @use_guaranteed : $@convention(thin) (@guaranteed Klass) -> ()
  %4 = apply %3(%2) : $@convention(thin) (@guaranteed Klass) -> ()
  end_borrow %2 : $Klass
  destroy_addr %1 : $*Klass
  dealloc_stack %1 : $*Klass
  %6 = tuple ()
  return %6 : $()
}

sil [ossa] @test6 : $@convention(thin) (@owned Klass) -> () {
bb0(%0 : @owned $Klass):
  %1 = alloc_stack $Klass
  %b = begin_borrow %0 : $Klass
  store_borrow %b to %1 : $*Klass
  end_borrow %b : $Klass
  %2 = load_borrow %1 : $*Klass
  %3 = function_ref @use_guaranteed : $@convention(thin) (@guaranteed Klass) -> ()
  %4 = apply %3(%2) : $@convention(thin) (@guaranteed Klass) -> ()
  end_borrow %2 : $Klass
  destroy_value %0 : $Klass
  dealloc_stack %1 : $*Klass
  %6 = tuple ()
  return %6 : $()
}

sil [ossa] @test_control_flow1 : $@convention(thin) (@guaranteed Klass, @guaranteed Klass) -> () {
bb0(%0 : @guaranteed $Klass, %1 : @guaranteed $Klass):
  %stk = alloc_stack $Klass
  cond_br undef, bb1, bb2

bb1:
  store_borrow %0 to %stk : $*Klass
  br bb3

bb2:
  store_borrow %1 to %stk : $*Klass
  br bb3

bb3:
  %2 = load_borrow %stk : $*Klass
  %3 = function_ref @use_guaranteed : $@convention(thin) (@guaranteed Klass) -> ()
  %4 = apply %3(%2) : $@convention(thin) (@guaranteed Klass) -> ()
  end_borrow %2 : $Klass
  dealloc_stack %stk : $*Klass
  %8 = tuple ()
  return %8 : $()
}

sil [ossa] @test_control_flow2 : $@convention(thin) (@owned Klass, @owned Klass) -> () {
bb0(%0 : @owned $Klass, %1 : @owned $Klass):
  %stk = alloc_stack $Klass
  cond_br undef, bb1, bb2

bb1:
  %b1 = begin_borrow %0 : $Klass
  store_borrow %b1 to %stk : $*Klass
  end_borrow %b1 : $Klass
  br bb3

bb2:
  %b2 = begin_borrow %1 : $Klass
  store_borrow %b2 to %stk : $*Klass
  end_borrow %b2 : $Klass
  br bb3

bb3:
  %2 = load_borrow %stk : $*Klass
  %3 = function_ref @use_guaranteed : $@convention(thin) (@guaranteed Klass) -> ()
  %4 = apply %3(%2) : $@convention(thin) (@guaranteed Klass) -> ()
  end_borrow %2 : $Klass
  destroy_value %0 : $Klass
  destroy_value %1 : $Klass
  dealloc_stack %stk : $*Klass
  %8 = tuple ()
  return %8 : $()
}

sil [ossa] @test_control_flow3 : $@convention(thin) (@owned Klass, @owned Klass) -> () {
bb0(%0 : @owned $Klass, %1 : @owned $Klass):
  %stk = alloc_stack $Klass
  cond_br undef, bb1, bb2

bb1:
  %b1 = begin_borrow %0 : $Klass
  store_borrow %b1 to %stk : $*Klass
  end_borrow %b1 : $Klass
  br bb3

bb2:
  %b2 = begin_borrow %1 : $Klass
  store_borrow %b2 to %stk : $*Klass
  end_borrow %b2 : $Klass
  br bb3

bb3:
  cond_br undef, bb4, bb5

bb4:
  %2 = load_borrow %stk : $*Klass
  %3 = function_ref @use_guaranteed : $@convention(thin) (@guaranteed Klass) -> ()
  %4 = apply %3(%2) : $@convention(thin) (@guaranteed Klass) -> ()
  end_borrow %2 : $Klass
  br bb6

bb5:
  br bb6

bb6:
  destroy_value %0 : $Klass
  destroy_value %1 : $Klass
  dealloc_stack %stk : $*Klass
  %8 = tuple ()
  return %8 : $()
}

sil [ossa] @test_no_storeborrow1 : $@convention(thin) (@owned Klass) -> () {
bb0(%0 : @owned $Klass):
  %stk = alloc_stack $Klass
  store %0 to [init] %stk : $*Klass
  %ld = load_borrow %stk : $*Klass
  %3 = function_ref @use_guaranteed : $@convention(thin) (@guaranteed Klass) -> ()
  %4 = apply %3(%ld) : $@convention(thin) (@guaranteed Klass) -> ()
  end_borrow %ld : $Klass
  destroy_addr %stk : $*Klass
  dealloc_stack %stk : $*Klass
  %6 = tuple ()
  return %6 : $()
}

sil [ossa] @test_no_storeborrow2 : $@convention(method) (@owned Klass) -> () { 
bb0(%0 : @owned $Klass):
  %stk = alloc_stack $Klass
  store %0 to [init] %stk : $*Klass
  %ld1 = load_borrow %stk : $*Klass
  %f = function_ref @use_guaranteed : $@convention(thin) (@guaranteed Klass) -> ()
  apply %f(%ld1) : $@convention(thin) (@guaranteed Klass) -> ()
  end_borrow %ld1 : $Klass
  cond_br undef, bb3, bb1

bb1:
  %ld2 = load_borrow %stk : $*Klass
  apply %f(%ld2) : $@convention(thin) (@guaranteed Klass) -> ()
  end_borrow %ld2 : $Klass
  %tk1 = load [take] %stk : $*Klass
  destroy_value %tk1 : $Klass
  dealloc_stack %stk : $*Klass
  br bb4

bb3:
  %tk2 = load [take] %stk : $*Klass
  destroy_value %tk2 : $Klass
  dealloc_stack %stk : $*Klass
  br bb4

bb4:
  %ret = tuple ()
  return %ret : $()
}

sil [ossa] @test_with_structs_and_borrows1 : $@convention(thin) (@guaranteed WrapperStruct) -> () {
bb0(%0 : @guaranteed $WrapperStruct):
  %stk = alloc_stack $WrapperStruct
  store_borrow %0 to %stk : $*WrapperStruct
  %ele = struct_element_addr %stk : $*WrapperStruct, #WrapperStruct.val
  %ld = load_borrow %ele : $*Klass
  %f = function_ref @use_guaranteed : $@convention(thin) (@guaranteed Klass) -> ()
  apply %f(%ld) : $@convention(thin) (@guaranteed Klass) -> ()
  end_borrow %ld : $Klass
  dealloc_stack %stk : $*WrapperStruct
  %r = tuple ()
  return %r : $()
}

sil [ossa] @test_control_flow4 : $@convention(thin) (@guaranteed Klass) -> () {
bb0(%0 : @guaranteed $Klass):
  %stk = alloc_stack $Klass
  store_borrow %0 to %stk : $*Klass
  cond_br undef, bb1, bb2

bb1:
  %ld1 = load_borrow %stk : $*Klass
  fix_lifetime %ld1 : $Klass
  end_borrow %ld1 : $Klass
  dealloc_stack %stk : $*Klass
  %r = tuple ()
  return %r : $()

bb2:
  %ld2 = load_borrow %stk : $*Klass
  fix_lifetime %ld2 : $Klass
  end_borrow %ld2 : $Klass
  dealloc_stack %stk : $*Klass
  unreachable
}
