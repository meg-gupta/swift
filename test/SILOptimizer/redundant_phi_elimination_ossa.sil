// RUN: %target-sil-opt -enable-sil-verify-all %s -redundant-phi-elimination | %FileCheck %s

sil_stage canonical

class Klass {
}

struct NonTrivialStruct {
  var val:Klass
}

public enum FakeOptional<T> {
  case none
  case some(T)
}

// CHECK-LABEL: sil [ossa] @test_redundantownedphiarg1 :
// CHECK: bb3([[ARG1:%.*]] : @owned $FakeOptional<Klass>):
// CHECK: [[COPY:%.*]] = copy_value [[ARG1]]
// CHECK-LABEL: } // end sil function 'test_redundantownedphiarg1'
sil [ossa] @test_redundantownedphiarg1 : $@convention(thin) () -> () {
bb0:
  %0 = enum $FakeOptional<Klass>, #FakeOptional.none!enumelt 
  cond_br undef, bb1, bb2

bb1:
  br bb3(%0 : $FakeOptional<Klass>, %0 : $FakeOptional<Klass>)

bb2:
  br bb3(%0 : $FakeOptional<Klass>, %0 : $FakeOptional<Klass>)

bb3(%1 : @owned $FakeOptional<Klass>, %2 : @owned $FakeOptional<Klass>):
  destroy_value %1 : $FakeOptional<Klass>
  destroy_value %2 : $FakeOptional<Klass>
  %res = tuple ()
  return %res : $()
}

// CHECK-LABEL: sil [ossa] @test_redundantownedphiarg2 :
// CHECK: bb3([[ARG1:%.*]] : @owned $FakeOptional<Klass>, [[ARG2:%.*]] : $FakeOptional<Klass>):
// CHECK-NOT: copy_value
// CHECK-LABEL: } // end sil function 'test_redundantownedphiarg2'
sil [ossa] @test_redundantownedphiarg2 : $@convention(thin) () -> () {
bb0:
  %0 = enum $FakeOptional<Klass>, #FakeOptional.none!enumelt 
  cond_br undef, bb1, bb2

bb1:
  br bb3(%0 : $FakeOptional<Klass>, %0 : $FakeOptional<Klass>)

bb2:
  br bb3(%0 : $FakeOptional<Klass>, %0 : $FakeOptional<Klass>)

bb3(%1 : @owned $FakeOptional<Klass>, %2 : $FakeOptional<Klass>):
  destroy_value %1 : $FakeOptional<Klass>
  destroy_value %2 : $FakeOptional<Klass>
  %res = tuple ()
  return %res : $()
}

// CHECK-LABEL: sil [ossa] @test_redundantownedphiarg3 :
// CHECK: bb3([[ARG1:%.*]] : @owned $FakeOptional<Klass>, [[ARG2:%.*]] : $FakeOptional<Klass>):
// CHECK-NOT: copy_value
// CHECK-LABEL: } // end sil function 'test_redundantownedphiarg3'
sil [ossa] @test_redundantownedphiarg3 : $@convention(thin) () -> () {
bb0:
  %0 = enum $FakeOptional<Klass>, #FakeOptional.none!enumelt 
  cond_br undef, bb1, bb2

bb1:
  br bb3(%0 : $FakeOptional<Klass>, %0 : $FakeOptional<Klass>)

bb2:
  br bb3(%0 : $FakeOptional<Klass>, %0 : $FakeOptional<Klass>)

bb3(%1 : @owned $FakeOptional<Klass>, %2 : $FakeOptional<Klass>):
  destroy_value %1 : $FakeOptional<Klass>
  cond_br undef, bb4, bb5

bb4:
  destroy_value %2 : $FakeOptional<Klass>
  br bb6

bb5:
  br bb6

bb6:  
  %res = tuple ()
  return %res : $()
}

// CHECK-LABEL: sil [ossa] @test_redundantownedphiarg4 :
// CHECK: bb3([[ARG1:%.*]] : @owned $FakeOptional<Klass>):
// CHECK-NOT: copy_value
// CHECK-LABEL: } // end sil function 'test_redundantownedphiarg4'
sil [ossa] @test_redundantownedphiarg4 : $@convention(thin) () -> () {
bb0:
  %0 = enum $FakeOptional<Klass>, #FakeOptional.none!enumelt 
  cond_br undef, bb1, bb2

bb1:
  br bb3(%0 : $FakeOptional<Klass>, %0 : $FakeOptional<Klass>)

bb2:
  br bb3(%0 : $FakeOptional<Klass>, %0 : $FakeOptional<Klass>)

bb3(%1 : $FakeOptional<Klass>, %2 : @owned $FakeOptional<Klass>):
  destroy_value %1 : $FakeOptional<Klass>
  destroy_value %2 : $FakeOptional<Klass>
  %res = tuple ()
  return %res : $()
}

// CHECK-LABEL: sil [ossa] @test_redundantguaranteedphiarg1 :
// CHECK: bb3([[ARG1:%.*]] : @guaranteed $FakeOptional<Klass>, [[ARG2:%.*]] : @guaranteed $FakeOptional<Klass>):
// CHECK-LABEL: } // end sil function 'test_redundantguaranteedphiarg1'
sil [ossa] @test_redundantguaranteedphiarg1 : $@convention(thin) () -> () {
bb0:
  %0 = enum $FakeOptional<Klass>, #FakeOptional.none!enumelt 
  cond_br undef, bb1, bb2

bb1:
  br bb3(%0 : $FakeOptional<Klass>, %0 : $FakeOptional<Klass>)

bb2:
  br bb3(%0 : $FakeOptional<Klass>, %0 : $FakeOptional<Klass>)

bb3(%1 : @guaranteed $FakeOptional<Klass>, %2 : @guaranteed $FakeOptional<Klass>):
  end_borrow %1 : $FakeOptional<Klass>
  end_borrow %2 : $FakeOptional<Klass>
  %res = tuple ()
  return %res : $()
}

// CHECK-LABEL: sil [ossa] @test_redundantguaranteedphiarg2 :
// CHECK: bb3([[ARG1:%.*]] : @owned $FakeOptional<Klass>, [[ARG2:%.*]] : @guaranteed $FakeOptional<Klass>):
// CHECK-LABEL: } // end sil function 'test_redundantguaranteedphiarg2'
sil [ossa] @test_redundantguaranteedphiarg2 : $@convention(thin) () -> () {
bb0:
  %0 = enum $FakeOptional<Klass>, #FakeOptional.none!enumelt 
  cond_br undef, bb1, bb2

bb1:
  br bb3(%0 : $FakeOptional<Klass>, %0 : $FakeOptional<Klass>)

bb2:
  br bb3(%0 : $FakeOptional<Klass>, %0 : $FakeOptional<Klass>)

bb3(%1 : @owned $FakeOptional<Klass>, %2 : @guaranteed $FakeOptional<Klass>):
  destroy_value %1 : $FakeOptional<Klass>
  end_borrow %2 : $FakeOptional<Klass>
  %res = tuple ()
  return %res : $()
}

// CHECK-LABEL: sil [ossa] @test_redundantguaranteedphiarg3 :
// CHECK: bb3([[ARG3:%.*]] : @guaranteed $FakeOptional<Klass>, [[ARG2:%.*]] : @guaranteed $FakeOptional<Klass>):
// CHECK-LABEL: } // end sil function 'test_redundantguaranteedphiarg3'
sil [ossa] @test_redundantguaranteedphiarg3 : $@convention(thin) () -> () {
bb0:
  %0 = enum $FakeOptional<Klass>, #FakeOptional.none!enumelt 
  cond_br undef, bb1, bb2

bb1:
  br bb3(%0 : $FakeOptional<Klass>, %0 : $FakeOptional<Klass>)

bb2:
  br bb3(%0 : $FakeOptional<Klass>, %0 : $FakeOptional<Klass>)

bb3(%1 : @guaranteed $FakeOptional<Klass>, %2 : @guaranteed $FakeOptional<Klass>):
  cond_br undef, bb4, bb5

bb4:
  end_borrow %1 : $FakeOptional<Klass>
  end_borrow %2 : $FakeOptional<Klass>
  br bb6

bb5:
  end_borrow %2 : $FakeOptional<Klass>
  end_borrow %1 : $FakeOptional<Klass>
  br bb6

bb6:
  %res = tuple ()
  return %res : $()
}

