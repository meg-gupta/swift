import Builtin

class Klass {

}

enum FakeOptional<T> {
  case some(T)
  case none
}

sil [ossa] @test_switch_enum1 : $@convention(thin) (@owned Klass) -> @owned Klass {
bb0(%0 : @owned $Klass):
  %1 = enum $FakeOptional<Klass>, #FakeOptional.some!enumelt, %0 : $Klass
  switch_enum %1 : $FakeOptional<Klass>, case #FakeOptional.some!enumelt: bb1, case #FakeOptional.none!enumelt: bb2

bb2:
  unreachable

bb1(%3 : @owned $Klass):
  return %3 : $Klass
}

sil [ossa] @test_switch_enum2 : $@convention(thin) (@guaranteed Klass) -> @owned Klass {
bb0(%0 : @guaranteed $Klass):
  %1 = enum $FakeOptional<Klass>, #FakeOptional.some!enumelt, %0 : $Klass
  switch_enum %1 : $FakeOptional<Klass>, case #FakeOptional.some!enumelt: bb1, case #FakeOptional.none!enumelt: bb2

bb2:
  unreachable

bb1(%3 : @guaranteed $Klass):
  %copy = copy_value %3 : $Klass
  return %copy : $Klass
}

sil [ossa] @test_switch_enum3 : $@convention(thin) (@owned Klass) -> @owned Klass {
bb0(%0 : @owned $Klass):
  %b = begin_borrow %0 : $Klass
  %1 = enum $FakeOptional<Klass>, #FakeOptional.some!enumelt, %b : $Klass
  switch_enum %1 : $FakeOptional<Klass>, case #FakeOptional.some!enumelt: bb1, case #FakeOptional.none!enumelt: bb2

bb2:
  unreachable

bb1(%3 : @guaranteed $Klass):
  %copy = copy_value %3 : $Klass
  end_borrow %b : $Klass
  destroy_value %0 : $Klass
  return %copy : $Klass
}

sil @use_optional : $@convention(thin) (@guaranteed FakeOptional<Klass>) -> ()

sil [ossa] @test_switch_enum4 : $@convention(thin) (@guaranteed Klass) -> @owned Klass {
bb0(%0 : @guaranteed $Klass):
  %1 = enum $FakeOptional<Klass>, #FakeOptional.some!enumelt, %0 : $Klass
  %f = function_ref @use_optional : $@convention(thin) (@guaranteed FakeOptional<Klass>) -> ()
  %c = apply %f(%1) : $@convention(thin) (@guaranteed FakeOptional<Klass>) -> ()
  switch_enum %1 : $FakeOptional<Klass>, case #FakeOptional.some!enumelt: bb1, case #FakeOptional.none!enumelt: bb2

bb2:
  unreachable

bb1(%3 : @guaranteed $Klass):
  %copy = copy_value %3 : $Klass
  return %copy : $Klass
}

sil [ossa] @test_switch_enum5 : $@convention(thin) (@owned Klass) -> @owned Klass {
bb0(%0 : @owned $Klass):
  %b = begin_borrow %0 : $Klass
  %1 = enum $FakeOptional<Klass>, #FakeOptional.some!enumelt, %b : $Klass
  %f = function_ref @use_optional : $@convention(thin) (@guaranteed FakeOptional<Klass>) -> ()
  %c = apply %f(%1) : $@convention(thin) (@guaranteed FakeOptional<Klass>) -> ()
  switch_enum %1 : $FakeOptional<Klass>, case #FakeOptional.some!enumelt: bb1, case #FakeOptional.none!enumelt: bb2

bb2:
  unreachable

bb1(%3 : @guaranteed $Klass):
  %copy = copy_value %3 : $Klass
  end_borrow %b : $Klass
  destroy_value %0 : $Klass
  return %copy : $Klass
}

sil [ossa] @test_switch_enum6 : $@convention(thin) (@owned Klass) -> @owned Klass {
bb0(%0 : @owned $Klass):
  %1 = enum $FakeOptional<Klass>, #FakeOptional.some!enumelt, %0 : $Klass
  %f = function_ref @use_optional : $@convention(thin) (@guaranteed FakeOptional<Klass>) -> ()
  %c = apply %f(%1) : $@convention(thin) (@guaranteed FakeOptional<Klass>) -> ()
  switch_enum %1 : $FakeOptional<Klass>, case #FakeOptional.some!enumelt: bb1, case #FakeOptional.none!enumelt: bb2

bb2:
  unreachable

bb1(%3 : @owned $Klass):
  return %3 : $Klass
}

sil [ossa] @test_switch_enum7 : $@convention(thin) (@owned Klass) -> @owned Klass {
bb0(%0 : @owned $Klass):
  cond_br undef, bb1, bb2

bb1:
  %1a = enum $FakeOptional<Klass>, #FakeOptional.some!enumelt, %0 : $Klass
  br bb3(%1a : $FakeOptional<Klass>)

bb2:
  %1b = enum $FakeOptional<Klass>, #FakeOptional.some!enumelt, %0 : $Klass
  br bb3(%1b : $FakeOptional<Klass>)

bb3(%3 : @owned $FakeOptional<Klass>):
  %f = function_ref @use_optional : $@convention(thin) (@guaranteed FakeOptional<Klass>) -> ()
  %c = apply %f(%3) : $@convention(thin) (@guaranteed FakeOptional<Klass>) -> ()
  switch_enum %3 : $FakeOptional<Klass>, case #FakeOptional.some!enumelt: bb5, case #FakeOptional.none!enumelt: bb4

bb4:
  unreachable

bb5(%4 : @owned $Klass):
  return %4 : $Klass
}

sil [ossa] @test_switch_enum8 : $@convention(thin) (@owned Klass) -> @owned Klass {
bb0(%0 : @owned $Klass):
  %cond = integer_literal $Builtin.Int1, 0
  cond_br %cond, bb1, bb2

bb1:
  %1a = enum $FakeOptional<Klass>, #FakeOptional.some!enumelt, %0 : $Klass
  br bb3(%1a : $FakeOptional<Klass>)

bb2:
  %1b = enum $FakeOptional<Klass>, #FakeOptional.none!enumelt
  destroy_value %0 : $Klass
  br bb3(%1b : $FakeOptional<Klass>)

bb3(%3 : @owned $FakeOptional<Klass>):
  %f = function_ref @use_optional : $@convention(thin) (@guaranteed FakeOptional<Klass>) -> ()
  %c = apply %f(%3) : $@convention(thin) (@guaranteed FakeOptional<Klass>) -> ()
  switch_enum %3 : $FakeOptional<Klass>, case #FakeOptional.some!enumelt: bb5, case #FakeOptional.none!enumelt: bb4

bb4:
  unreachable

bb5(%4 : @owned $Klass):
  return %4 : $Klass
}

sil [ossa] @test_switch_enum9 : $@convention(thin) (@owned Klass) -> @owned Klass {
bb0(%0 : @owned $Klass):
  %cond = integer_literal $Builtin.Int1, 1
  cond_br %cond, bb1, bb2

bb1:
  %1a = enum $FakeOptional<Klass>, #FakeOptional.some!enumelt, %0 : $Klass
  br bb3(%1a : $FakeOptional<Klass>)

bb2:
  %1b = enum $FakeOptional<Klass>, #FakeOptional.none!enumelt
  destroy_value %0 : $Klass
  br bb3(%1b : $FakeOptional<Klass>)

bb3(%3 : @owned $FakeOptional<Klass>):
  %f = function_ref @use_optional : $@convention(thin) (@guaranteed FakeOptional<Klass>) -> ()
  %c = apply %f(%3) : $@convention(thin) (@guaranteed FakeOptional<Klass>) -> ()
  switch_enum %3 : $FakeOptional<Klass>, case #FakeOptional.some!enumelt: bb5, case #FakeOptional.none!enumelt: bb4

bb4:
  unreachable

bb5(%4 : @owned $Klass):
  return %4 : $Klass
}

sil [ossa] @test_switch_enum10 : $@convention(thin) (@owned Klass, Builtin.Int1) -> @owned Klass {
bb0(%0 : @owned $Klass, %1 : $Builtin.Int1):
  cond_br %1, bb1, bb2

bb1:
  %1a = enum $FakeOptional<Klass>, #FakeOptional.some!enumelt, %0 : $Klass
  br bb3(%1a : $FakeOptional<Klass>)

bb2:
  %1b = enum $FakeOptional<Klass>, #FakeOptional.none!enumelt
  destroy_value %0 : $Klass
  br bb3(%1b : $FakeOptional<Klass>)

bb3(%3 : @owned $FakeOptional<Klass>):
  %f = function_ref @use_optional : $@convention(thin) (@guaranteed FakeOptional<Klass>) -> ()
  %c = apply %f(%3) : $@convention(thin) (@guaranteed FakeOptional<Klass>) -> ()
  switch_enum %3 : $FakeOptional<Klass>, case #FakeOptional.some!enumelt: bb5, case #FakeOptional.none!enumelt: bb4

bb4:
  unreachable

bb5(%4 : @owned $Klass):
  return %4 : $Klass
}
